<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Enter a short description (optional)</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="lblDisplaying.Text" xml:space="preserve">
    <value>Displaying contents of:</value>
  </data>
  <data name="lblDisplayName.Help" xml:space="preserve">
    <value>Choose a name for this documents (max 100 characters). It does not have to be the same as the filename.</value>
  </data>
  <data name="lblDisplayName.Text" xml:space="preserve">
    <value>Display Name:</value>
  </data>
  <data name="lblExpand.Text" xml:space="preserve">
    <value>(Click to expand/colapse)</value>
  </data>
  <data name="lblFile.Help" xml:space="preserve">
    <value>Select the file you would like to link to. The link will appear like any other file, and will also include all of the version and comments associated with the file. If the file you are looking for does not yet exist on the server, you will need to upload it using the "Upload Files" option.</value>
  </data>
  <data name="lblFile.Text" xml:space="preserve">
    <value>File:</value>
  </data>
  <data name="lblFileAuthor.Help" xml:space="preserve">
    <value>Enter the name of the author/owner (optional)</value>
  </data>
  <data name="lblFileAuthor.Text" xml:space="preserve">
    <value>Author:</value>
  </data>
  <data name="lblFileDescription.Help" xml:space="preserve">
    <value>Enter a short description of this file (optional)</value>
  </data>
  <data name="lblFileDescription.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="lblFolderName.Help" xml:space="preserve">
    <value>Choose a name for your new folder (max 100 characters)</value>
  </data>
  <data name="lblFolderName.Text" xml:space="preserve">
    <value>Folder Name:</value>
  </data>
  <data name="lblGoogle.Help" xml:space="preserve">
    <value>This is identical to External URL, except the link will have a Google Icon. When users click on this link, the googledoc will open in a new tab.</value>
  </data>
  <data name="lblGoogle.Text" xml:space="preserve">
    <value>Google Doc URL:</value>
  </data>
  <data name="lblIcon.Text" xml:space="preserve">
    <value>Icon:</value>
  </data>
  <data name="lblKeywords.Help" xml:space="preserve">
    <value>Enter keywords associated with this file. Separate multiple keywords with a comma. Keywords help your users search for documents.</value>
  </data>
  <data name="lblKeywords.Text" xml:space="preserve">
    <value>Keywords:</value>
  </data>
  <data name="lblLinkType.Help" xml:space="preserve">
    <value>Select the link type. </value>
  </data>
  <data name="lblLinkType.Text" xml:space="preserve">
    <value>Link Type:</value>
  </data>
  <data name="lblPage.Help" xml:space="preserve">
    <value>Select the page you would like to link to. When users click on this link, it will open in the same widow.</value>
  </data>
  <data name="lblPage.Text" xml:space="preserve">
    <value>Page:</value>
  </data>
  <data name="lblPermissions.Text" xml:space="preserve">
    <value>Permissions:</value>
  </data>
  <data name="lblSelectFile.Help" xml:space="preserve">
    <value>Select a file to upload as a new version, then click Save Version. </value>
  </data>
  <data name="lblSelectFile.Text" xml:space="preserve">
    <value>Select File:</value>
  </data>
  <data name="lblSelectFiles.Text" xml:space="preserve">
    <value>Select the files you want to upload:</value>
  </data>
  <data name="lblSelectFilesHelp.Text" xml:space="preserve">
    <value>You can select as many files as you want. When you have selected your files, click upload. If you would like to change the files details (e.g. Name or Description) or location, right click on the file (after you have uploaded it).</value>
  </data>
  <data name="lblSelectIcon.Help" xml:space="preserve">
    <value>Select an image file (png, gif or jpg). Whilst any image file can be used, we suggest that you use a sqaure image of 128px x 128px. Png files tend to work the best, as they can provide high quality with transparent backgrounds.  Avoid very high resolution files as these will slow down your loading times.</value>
  </data>
  <data name="lblSelectIcon.Text" xml:space="preserve">
    <value>Select Image File:</value>
  </data>
  <data name="lblTags.Help" xml:space="preserve">
    <value>Select the tags that best describe the type of resource. Documents can be listed and searched by Tag. </value>
  </data>
  <data name="lblTags.Text" xml:space="preserve">
    <value>Tags:</value>
  </data>
  <data name="lblURL.Help" xml:space="preserve">
    <value>Enter the website url (including http://). When users click on this link, the website will open in a new tab.</value>
  </data>
  <data name="lblURL.Text" xml:space="preserve">
    <value>Website URL:</value>
  </data>
  <data name="lblVersion.Help" xml:space="preserve">
    <value>Enter a version number for this documents (Optional)</value>
  </data>
  <data name="lblVersion.Text" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="lblVersions.Text" xml:space="preserve">
    <value>Versions:</value>
  </data>
  <data name="lblYouTube.Help" xml:space="preserve">
    <value>Enter the url of your YouTube video, or just the you tube video id. When users click on this link, they will view this video on this site. </value>
  </data>
  <data name="lblYouTube.Text" xml:space="preserve">
    <value>YouTube URL:</value>
  </data>
  <data name="Save.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblDisplayingSearch.Text" xml:space="preserve">
    <value>Display Search Results for</value>
  </data>
</root>