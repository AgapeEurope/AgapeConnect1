-- *** ALTER table Store_Orders ***
-- Tax and ShippingCost have been added to the Store_Orders table

ALTER TABLE {databaseOwner}{objectQualifier}Store_Orders 
	ADD [Tax] [money] NOT NULL 
	CONSTRAINT [DF_{objectQualifier}Store_Orders_Tax]  DEFAULT ((0))
GO

ALTER TABLE {databaseOwner}{objectQualifier}Store_Orders 
	ADD [ShippingCost] [money] NOT NULL 
	CONSTRAINT [DF_{objectQualifier}Store_Orders_ShippingCost] DEFAULT ((0))
GO

-- *** Create stored procedures for table Store_Addresses ***
-- {databaseOwner}{objectQualifier} was missing

ALTER PROCEDURE {databaseOwner}{objectQualifier}Store_Addresses_AddAddress
		@UserID int,
		@PortalID int,
		@Description nvarchar(100),
		@Name nvarchar(50),
		@Address1 nvarchar(100),
		@Address2 nvarchar(100),
		@City nvarchar(100),
		@RegionCode nvarchar(100),
		@CountryCode nvarchar(100),
		@PostalCode nvarchar(10),
		@Phone1 nvarchar(20),
		@Phone2 nvarchar(20),
		@PrimaryAddress bit,
		@CreatedByUser nvarchar(100)
	AS
	SET NOCOUNT ON
	INSERT INTO {databaseOwner}{objectQualifier}Store_Addresses
		(UserID,PortalID,[Description],Name,Address1,Address2,City,RegionCode,CountryCode,PostalCode,Phone1,Phone2,PrimaryAddress,CreatedByUser,CreatedDate)
		VALUES
		(@UserID,@PortalID,@Description,@Name,@Address1,@Address2,@City,@RegionCode,@CountryCode,@PostalCode,@Phone1,@Phone2,@PrimaryAddress,@CreatedByUser,getdate())
		
	IF	@PrimaryAddress = 1
	BEGIN
		UPDATE 	{databaseOwner}{objectQualifier}Store_Addresses
		SET 	PrimaryAddress = 0
		WHERE 	UserID = @UserID
		AND	AddressID <> SCOPE_IDENTITY()
	END
	
	SELECT SCOPE_IDENTITY()
GO

-- *** Create stored procedures for table Store_Addresses ***
-- {databaseOwner}{objectQualifier} was missing

ALTER PROCEDURE {databaseOwner}{objectQualifier}Store_Addresses_AddAddress
		@UserID int,
		@PortalID int,
		@Description nvarchar(100),
		@Name nvarchar(50),
		@Address1 nvarchar(100),
		@Address2 nvarchar(100),
		@City nvarchar(100),
		@RegionCode nvarchar(100),
		@CountryCode nvarchar(100),
		@PostalCode nvarchar(10),
		@Phone1 nvarchar(20),
		@Phone2 nvarchar(20),
		@PrimaryAddress bit,
		@CreatedByUser nvarchar(100)
	AS
	SET NOCOUNT ON
	INSERT INTO {databaseOwner}{objectQualifier}Store_Addresses
		(UserID,PortalID,[Description],Name,Address1,Address2,City,RegionCode,CountryCode,PostalCode,Phone1,Phone2,PrimaryAddress,CreatedByUser,CreatedDate)
		VALUES
		(@UserID,@PortalID,@Description,@Name,@Address1,@Address2,@City,@RegionCode,@CountryCode,@PostalCode,@Phone1,@Phone2,@PrimaryAddress,@CreatedByUser,getdate())
		
	IF	@PrimaryAddress = 1
	BEGIN
		UPDATE 	{databaseOwner}{objectQualifier}Store_Addresses
		SET 	PrimaryAddress = 0
		WHERE 	UserID = @UserID
		AND	AddressID <> SCOPE_IDENTITY()
	END
	
	SELECT SCOPE_IDENTITY()
GO

-- {databaseOwner}{objectQualifier} was missing

ALTER PROCEDURE {databaseOwner}{objectQualifier}Store_Addresses_UpdateAddress
		@AddressID int,
		@Description nvarchar(500),
		@Name nvarchar(50),
		@Address1 nvarchar(100),
		@Address2 nvarchar(100),
		@City nvarchar(100),
		@RegionCode nvarchar(100),
		@CountryCode nvarchar(100),
		@PostalCode nvarchar(10),
		@Phone1 nvarchar(20),
		@Phone2 nvarchar(20),
		@PrimaryAddress bit
	AS
	SET NOCOUNT ON
	UPDATE {databaseOwner}{objectQualifier}Store_Addresses SET 
		[Description]=@Description,
		Name=@Name,
		Address1=@Address1,
		Address2=@Address2,
		City=@City,
		RegionCode=@RegionCode,
		CountryCode=@CountryCode,
		PostalCode=@PostalCode,
		Phone1=@Phone1,
		Phone2=@Phone2,
		PrimaryAddress=@PrimaryAddress
	WHERE
		AddressID=@AddressID

	IF	@PrimaryAddress = 1
	BEGIN
		DECLARE @UserID int
		
		SELECT	@UserID = UserID
		FROM	{databaseOwner}{objectQualifier}Store_Addresses
		WHERE	AddressID = @AddressID

		UPDATE 	{databaseOwner}{objectQualifier}Store_Addresses
		SET 	PrimaryAddress = 0
		WHERE 	UserID = @UserID
		AND	AddressID <> @AddressID
	END

GO


-- *** ALTER stored procedures for table Store_Orders ***
-- Added Tax and Shipping Cost

ALTER Procedure {databaseOwner}{objectQualifier}Store_Orders_GetCustomerOrders
(
    @PortalID int = 0,
    @UserID int
)
As

SELECT  
    o.OrderID,
    Cast(sum(od.Quantity*od.UnitCost) as money) as OrderTotal,
    o.OrderNumber,
    o.OrderDate, 
    o.ShipDate,
    o.ShippingAddressID,
    o.BillingAddressID,
	o.Tax,
	o.ShippingCost

FROM    
    {databaseOwner}{objectQualifier}Store_Orders o
  INNER JOIN {databaseOwner}{objectQualifier}Store_OrderDetails od ON o.OrderID = od.OrderID

GROUP BY    
    UserID, 
    o.OrderID, 
    o.OrderNumber,
    o.OrderDate, 
    o.ShipDate,
    o.ShippingAddressID,
    o.BillingAddressID,
	o.Tax,
	o.ShippingCost
HAVING  
    o.UserID = @UserID
GO


ALTER Procedure {databaseOwner}{objectQualifier}Store_Orders_GetOrder
(
    @OrderID int
)
As

SELECT  
    o.OrderID,
    o.UserID as CustomerID,
    Cast(sum(od.Quantity*od.UnitCost) as money) as OrderTotal,
    o.OrderNumber,
    o.OrderDate, 
    o.ShipDate,
    o.ShippingAddressID,
    o.BillingAddressID,
	o.Tax,
	o.ShippingCost	

FROM    
    {databaseOwner}{objectQualifier}Store_Orders o 
  INNER JOIN {databaseOwner}{objectQualifier}Store_OrderDetails od 
	ON o.OrderID = od.OrderID
GROUP BY    
    UserID, 
    o.OrderID, 
    o.OrderNumber,
    o.OrderDate, 
    o.ShipDate,
    o.ShippingAddressID,
    o.BillingAddressID,
	o.Tax,
	o.ShippingCost	
HAVING  
    o.OrderID = @OrderID

GO

-- Added Tax and Shipping Cost


ALTER PROCEDURE {databaseOwner}{objectQualifier}Store_Orders_UpdateOrder
		@OrderID int,
		@OrderNumber nvarchar(50),
		@ShippingAddressID int,
		@BillingAddressID int,
		@Tax money,
		@ShippingCost money		
        AS
	SET NOCOUNT ON

	UPDATE {databaseOwner}{objectQualifier}Store_Orders
	SET
		OrderNumber = @OrderNumber,
		ShippingAddressID = @ShippingAddressID,
		BillingAddressID = @BillingAddressID,
		Tax = @Tax,
		ShippingCost = @ShippingCost		
	WHERE OrderID = @OrderID
GO
	
-- New procedure	
	
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}Store_Orders_UpdateOrderDetails 
		@OrderID int, 
		@CartID nvarchar(50)
	AS
	SET NOCOUNT ON
	
	-- Remove the current order details from the order
	DELETE FROM {databaseOwner}{objectQualifier}Store_OrderDetails
	WHERE OrderId = @OrderID

	-- Insert the new order details from the specified cart
	INSERT INTO {databaseOwner}{objectQualifier}Store_OrderDetails
		(OrderID, ProductID, Quantity, UnitCost)
	SELECT @OrderID, ci.ProductID, Quantity, UnitCost
	FROM {databaseOwner}{objectQualifier}Store_CartItems ci, {databaseOwner}{objectQualifier}Store_Products pr
	WHERE ci.ProductID = pr.ProductID
	AND CartID = @CartID

	-- Return the updated Order
	SELECT  
		o.OrderID,
		o.UserID as CustomerID,
		Cast(sum(od.Quantity*od.UnitCost) as money) as OrderTotal,
		o.OrderNumber,
		o.OrderDate, 
		o.ShipDate,
		o.ShippingAddressID,
		o.BillingAddressID
	FROM {databaseOwner}{objectQualifier}Store_Orders o, {databaseOwner}{objectQualifier}Store_OrderDetails od 
	WHERE o.OrderID = od.OrderID
	AND o.OrderID = @OrderID
	GROUP BY    
		UserID, 
		o.OrderID,
		o.OrderNumber, 
		o.OrderDate, 
		o.ShipDate,
		o.ShippingAddressID,
		o.BillingAddressID
	HAVING o.OrderID = @OrderID
GO

