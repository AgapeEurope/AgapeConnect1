if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.Box) == "undefined" || typeof (window.DnnDevControlsNamespace.Box.Version) == null || window.DnnDevControlsNamespace.Box.Version < 1) { window.DnnDevControlsNamespace.Box = { Version: 1, GetOuterWidth: function (a) { return a.offsetWidth }, GetOuterHeight: function (a) { return a.offsetHeight }, SetOuterHeight: function (d, c) { if (c <= 0 || c == "") { d.style.height = "" } else { d.style.height = c + "px"; var b = d.offsetHeight - c; var a = c - b; if (a > 0) { d.style.height = a + "px" } else { d.style.height = "" } } }, SetOuterWidth: function (c, b) { if (b <= 0 || b == "") { c.style.width = "" } else { c.style.width = b + "px"; var a = c.offsetWidth - b; var d = b - a; if (d > 0) { c.style.width = d + "px" } else { c.style.width = "" } } }, GetPropertyValue: function (c, b) { var a = this.GetStyle(c); return thisGetStyleValues(a, b) }, GetStyle: function (a) { if (document.defaultView && document.defaultView.getComputedStyle) { return document.defaultView.getComputedStyle(a, null) } else { if (a.currentStyle) { return a.currentStyle } else { return a.style } } } } } if (typeof window.DnnDevControlsNamespace == "undefined") { windowDnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.Browser) == "undefined" || typeof (window.DnnDevControlsNamespace.BrowserVersion) == null || window.DnnDevControlsNamespace.Browser.Version < 1) { window.DnnDevControlsNamespace.Browser = { Version: 1 }; window.DnnDevControlsNamespace.Browser.ParseBrowserInfo = function () { this.IsMacIE = (navigator.appName == "Microsoft Internet Explorer") && ((navigator.userAgent.toLowerCase().indexOf("mac") != -1) || (navigator.appVersion.toLowerCase().indexOf("mac") != -1)); this.IsSafari = (navigator.userAgent.toLowerCase().indexOf("safari") != -1); this.IsMozilla = window.netscape && !window.opera; this.IsNetscape = /Netscape/.test(navigator.userAgent); this.IsOpera = window.opera; this.IsOpera9 = window.opera && (parseInt(window.opera.version()) > 8); this.IsIE = !this.IsMacIE && !this.IsMozilla && !this.IsOpera && !this.IsSafari; this.IsIE7 = /MSIE 7/.test(navigator.appVersion); this.StandardsMode = this.IsSafari || this.IsOpera9 || this.IsMozilla || document.compatMode == "CSS1Compat"; this.IsMac = /Mac/.test(navigator.userAgent) }; DnnDevControlsNamespace.Browser.ParseBrowserInfo() } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.DomEventMixin) == "undefined" || typeof (window.DnnDevControlsNamespace.DomEventMixin.Version) == null || window.DnnDevControlsNamespace.DomEventMixin.Version < 2) { DnnDevControlsNamespace.DomEventMixin = { Version: 2, Initialize: function (a) { a.CreateEventHandler = this.CreateEventHandler; a.AttachDomEvent = this.AttachDomEvent; a.DetachDomEvent = this.DetachDomEvent; a.DisposeDomEventHandlers = this.DisposeDomEventHandlers; a._domEventHandlingEnabled = true; a.EnableDomEventHandling = this.EnableDomEventHandling; a.DisableDomEventHandling = this.DisableDomEventHandling; a.RemoveHandlerRegister = this.RemoveHandlerRegister; a.GetHandlerRegister = this.GetHandlerRegister; a.AddHandlerRegister = this.AddHandlerRegister; a.handlerRegisters = [] }, EnableDomEventHandling: function () { this._domEventHandlingEnabled = true }, DisableDomEventHandling: function () { this._domEventHandlingEnabled = false }, CreateEventHandler: function (c, b) { var a = this; return function (d) { if (!a._domEventHandlingEnabled && !b) { return false } return a[c](d || window.event) } }, AttachDomEvent: function (f, d, b, a) { var g = this.CreateEventHandler(b, a); var e = this.GetHandlerRegister(f, d, b); if (e != null) { this.DetachDomEvent(e.Element, e.EventName, b) } var c = { Element: f, EventName: d, HandlerName: b, Handler: g }; this.AddHandlerRegister(c); if (f.addEventListener) { f.addEventListener(d, g, false) } else { if (f.attachEvent) { f.attachEvent("on" + d, g) } } }, DetachDomEvent: function (b, a, e) { var d = null; var c = ""; if (typeof e == "string") { c = e; d = this.GetHandlerRegister(b, a, c); if (d == null) { return } e = d.Handler } if (!b) { return } if (b.removeEventListener) { b.removeEventListener(a, e, false) } else { if (b.detachEvent) { b.detachEvent("on" + a, e) } } if (d != null && c != "") { this.RemoveHandlerRegister(d); d = null } }, DisposeDomEventHandlers: function () { for (var a = 0; a < this.handlerRegisters.length; a++) { var b = this.handlerRegisters[a]; if (b != null) { this.DetachDomEvent(b.Element, b.EventName, b.Handler) } } this.handlerRegisters = [] }, RemoveHandlerRegister: function (c) { try { var b = c.index; for (var a in c) { c[a] = null } this.handlerRegisters[b] = null } catch (d) { } }, GetHandlerRegister: function (c, b, a) { for (var e = 0; e < this.handlerRegisters.length; e++) { var d = this.handlerRegisters[e]; if (d != null && d.Element == c && d.EventName == b && d.HandlerName == a) { return this.handlerRegisters[e] } } return null }, AddHandlerRegister: function (a) { a.index = this.handlerRegisters.length; this.handlerRegisters[this.handlerRegisters.length] = a } }; DnnDevControlsNamespace.DomEvent = {}; DnnDevControlsNamespace.DomEvent.PreventDefault = function (a) { if (!a) { return true } if (a.preventDefault) { a.preventDefault() } a.returnValue = false; return false }; DnnDevControlsNamespace.DomEvent.StopPropagation = function (a) { if (!a) { return } if (a.stopPropagation) { a.stopPropagation() } else { a.cancelBubble = true } }; DnnDevControlsNamespace.DomEvent.GetTarget = function (a) { if (!a) { return null } return a.target || a.srcElement }; DnnDevControlsNamespace.DomEvent.GetRelatedTarget = function (a) { if (!a) { return null } return a.relatedTarget || (a.type == "mouseout" ? a.toElement : a.fromElement) }; DnnDevControlsNamespace.DomEvent.GetKeyCode = function (a) { if (!a) { return 0 } return a.which || a.keyCode } } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.Ease) == "undefined" || typeof (window.DnnDevControlsNamespace.Ease.Version) == null || window.DnnDevControlsNamespace.Ease.Version < 1.1) { DnnDevControlsNamespace.Ease = function (g, f, e, d, c, b) { this.Element = g; if (b) { this.Overlay = new DnnDevControlsNamespace.Overlay(g) } this.OffsetX = e; this.OffsetY = d; this.Invert = false; var a = this.Element.parentNode; this.ExpandConfig = this.MergeConfig(f.ExpandAnimation); this.CollapseConfig = this.MergeConfig(f.CollapseAnimation); this.Ticker = new DnnDevControlsNamespace.Ticker(this); this.Listener = c; this.SlideParent = false }; DnnDevControlsNamespace.Ease.Version = 1.1; DnnDevControlsNamespace.Ease.Coef = 0; DnnDevControlsNamespace.Ease.prototype = { SetSide: function (a) { this.InitialSide = a.charAt(0).toUpperCase() + a.substr(1, a.length - 1); this.Invert = false; if (a == "right") { a = "left"; this.Invert = true } if (a == "bottom") { a = "top"; this.Invert = true } this.Side = a; this.Horizontal = a == "left" }, MergeConfig: function (a) { if (!a.Type) { a.Type = "OutQuint" } if (!a.Duration) { a.Duration = 200 } return a }, GetSide: function () { return this.InitialSide }, ShowElements: function () { this.Element.parentNode.style.display = "block"; this.Element.style.display = "block"; this.Element.parentNode.style.overflow = "hidden" }, Dispose: function () { this.Ticker.Stop(); this.Element = null; if (this.Overlay) { this.Overlay.Dispose() } }, ResetState: function (b) { this.ShowElements(); if (b) { var a = (this.Horizontal ? this.Element.offsetWidth : this.Element.offsetHeight); if (!this.Invert) { a = -a } this.SetPosition(a) } this.InitialPosition = this.GetPosition() }, UpdateContainerSize: function () { if (!this.Element.parentNode) { return } if (!this.Element.offsetWidth || !this.Element.offsetHeight) { return } if (this.Invert) { if (this.Side == "left") { this.Element.parentNode.style.height = this.Element.offsetHeight + "px" } else { if (this.Side == "top") { this.Element.parentNode.style.width = this.Element.offsetWidth + "px" } } return } var b = 0; var a = 0; if (this.Element.style.top != "") { b = Math.max(parseInt(this.Element.style.top), 0) } if (this.Element.style.left != "") { a = Math.max(parseInt(this.Element.style.left), 0) } if (this.SlideParent) { b = parseInt(this.Element.style.top); if (isNaN(b)) { b = 0 } } if (typeof (DnnDevItem) != "undefined" && this.Listener instanceof DnnDevItem) { if (this.Element.parentNode.style.height != this.Element.offsetHeight + b + "px") { this.Element.parentNode.style.height = Math.max(this.Element.offsetHeight + b, 0) + "px" } if (this.Element.parentNode.style.width != (this.Element.offsetWidth + a) + "px") { this.Element.parentNode.style.width = Math.max(this.Element.offsetWidth + a, 0) + "px" } } else { if (this.Element.parentNode.offsetHeight != this.Element.offsetHeight + b) { this.Element.parentNode.style.height = Math.max(this.Element.offsetHeight + b, 0) + "px" } if (this.Element.parentNode.offsetWidth != (this.Element.offsetWidth + a)) { this.Element.parentNode.style.width = Math.max(this.Element.offsetWidth + a, 0) + "px" } } }, GetSize: function () { return this.Horizontal ? this.Element.offsetWidth : this.Element.offsetHeight }, GetPosition: function () { if (!this.Element.style[this.Side]) { return 0 } return parseInt(this.Element.style[this.Side]) }, SetPosition: function (a) { this.Element.style[this.Side] = a + "px" }, Out: function () { this.ResetState(); this.Direction = -1; if (this.Invert) { this.Delta = this.GetSize() - this.GetPosition() } else { this.Delta = this.GetPosition() - this.GetSize() } this.Start(this.CollapseConfig) }, In: function () { this.ResetState(true); this.Direction = 1; this.Delta = -this.GetPosition(); this.Start(this.ExpandConfig) }, Start: function (a) { if (a.Type == "None") { this.UpdateContainerSize(); this.Ticker.Stop(); this.ChangePosition(this.InitialPosition + this.Delta); if (this.Overlay) { this.Overlay.Update() } this.UpdateContainerSize(); this.OnTickEnd(); return } this.Tween = a.Type; this.Ticker.Configure(a); this.Ticker.Start(); this.UpdateContainerSize() }, ChangePosition: function (e) { if (isNaN(e)) { return } var d, c, b; if (this.Invert) { if (this.Horizontal) { d = this.Element.offsetWidth; c = "width"; b = this.OffsetX } else { d = this.Element.offsetHeight; c = "height"; b = this.OffsetY } this.SetPosition(0); var a = Math.max(1, d - e) + "px"; this.Element.parentNode.style[c] = a; this.Element.parentNode.style[this.Side] = ((d - e + b) * -1) + "px" } else { this.Element.style[this.Side] = e + "px" } }, OnTick: function (b) { var a = Math.round(Penner[this.Tween](b, this.InitialPosition, this.Delta, this.Ticker.Duration)); if (a == this.InitialPosition + this.Delta) { this.Ticker.Stop(); return } this.ChangePosition(a); this.UpdateContainerSize(); if (this.Overlay) { this.Overlay.Update() } }, OnTickEnd: function () { try { if (this.Direction == 0) { return } this.ChangePosition(this.InitialPosition + this.Delta); if (this.Overlay) { this.Overlay.Update() } if (this.Direction > 0) { this.Element.parentNode.style.overflow = "visible"; if (this.Listener && this.Listener.OnExpandComplete) { this.Listener.OnExpandComplete() } } else { this.Element.parentNode.style.display = "none"; if (this.Listener) { this.Listener.OnCollapseComplete() } } this.Direction = 0 } catch (a) { } } } } var Penner = {}; Penner.Linear = function (e, a, g, f) { return g * e / f + a }; Penner.InQuad = function (e, a, g, f) { return g * (e /= f) * e + a }; Penner.OutQuad = function (e, a, g, f) { return -g * (e /= f) * (e - 2) + a }; Penner.InOutQuad = function (e, a, g, f) { if ((e /= f / 2) < 1) { return g / 2 * e * e + a } return -g / 2 * ((--e) * (e - 2) - 1) + a }; Penner.InCubic = function (e, a, g, f) { return g * (e /= f) * e * e + a }; Penner.OutCubic = function (e, a, g, f) { return g * ((e = e / f - 1) * e * e + 1) + a }; Penner.InOutCubic = function (e, a, g, f) { if ((e /= f / 2) < 1) { return g / 2 * e * e * e + a } return g / 2 * ((e -= 2) * e * e + 2) + a }; Penner.InQuart = function (e, a, g, f) { return g * (e /= f) * e * e * e + a }; Penner.OutQuart = function (e, a, g, f) { return -g * ((e = e / f - 1) * e * e * e - 1) + a }; Penner.InOutQuart = function (e, a, g, f) { if ((e /= f / 2) < 1) { return g / 2 * e * e * e * e + a } return -g / 2 * ((e -= 2) * e * e * e - 2) + a }; Penner.InQuint = function (e, a, g, f) { return g * (e /= f) * e * e * e * e + a }; Penner.OutQuint = function (e, a, g, f) { return g * ((e = e / f - 1) * e * e * e * e + 1) + a }; Penner.InOutQuint = function (e, a, g, f) { if ((e /= f / 2) < 1) { return g / 2 * e * e * e * e * e + a } return g / 2 * ((e -= 2) * e * e * e * e + 2) + a }; Penner.InSine = function (e, a, g, f) { return -g * Math.cos(e / f * (Math.PI / 2)) + g + a }; Penner.OutSine = function (e, a, g, f) { return g * Math.sin(e / f * (Math.PI / 2)) + a }; Penner.InOutSine = function (e, a, g, f) { return -g / 2 * (Math.cos(Math.PI * e / f) - 1) + a }; Penner.InExpo = function (e, a, g, f) { return (e == 0) ? a : g * Math.pow(2, 10 * (e / f - 1)) + a }; Penner.OutExpo = function (e, a, g, f) { return (e == f) ? a + g : g * (-Math.pow(2, -10 * e / f) + 1) + a }; Penner.InOutExpo = function (e, a, g, f) { if (e == 0) { return a } if (e == f) { return a + g } if ((e /= f / 2) < 1) { return g / 2 * Math.pow(2, 10 * (e - 1)) + a } return g / 2 * (-Math.pow(2, -10 * --e) + 2) + a }; Penner.InCirc = function (e, a, g, f) { return -g * (Math.sqrt(1 - (e /= f) * e) - 1) + a }; Penner.OutCirc = function (e, a, g, f) { return g * Math.sqrt(1 - (e = e / f - 1) * e) + a }; Penner.InOutCirc = function (e, a, g, f) { if ((e /= f / 2) < 1) { return -g / 2 * (Math.sqrt(1 - e * e) - 1) + a } return g / 2 * (Math.sqrt(1 - (e -= 2) * e) + 1) + a }; Penner.InElastic = function (g, e, l, k, f, i) { if (g == 0) { return e } if ((g /= k) == 1) { return e + l } if (!i) { i = k * 0.3 } if ((!f) || f < Math.abs(l)) { f = l; var h = i / 4 } else { var h = i / (2 * Math.PI) * Math.asin(l / f) } return -(f * Math.pow(2, 10 * (g -= 1)) * Math.sin((g * k - h) * (2 * Math.PI) / i)) + e }; Penner.OutElastic = function (g, e, l, k, f, i) { if (g == 0) { return e } if ((g /= k) == 1) { return e + l } if (!i) { i = k * 0.3 } if ((!f) || f < Math.abs(l)) { f = l; var h = i / 4 } else { var h = i / (2 * Math.PI) * Math.asin(l / f) } return f * Math.pow(2, -10 * g) * Math.sin((g * k - h) * (2 * Math.PI) / i) + l + e }; Penner.InOutElastic = function (g, e, l, k, f, i) { if (g == 0) { return e } if ((g /= k / 2) == 2) { return e + l } if (!i) { i = k * (0.3 * 1.5) } if ((!f) || f < Math.abs(l)) { f = l; var h = i / 4 } else { var h = i / (2 * Math.PI) * Math.asin(l / f) } if (g < 1) { return -0.5 * (f * Math.pow(2, 10 * (g -= 1)) * Math.sin((g * k - h) * (2 * Math.PI) / i)) + e } return f * Math.pow(2, -10 * (g -= 1)) * Math.sin((g * k - h) * (2 * Math.PI) / i) * 0.5 + l + e }; Penner.InBack = function (e, a, h, g, f) { if (f == undefined) { f = 1.70158 } return h * (e /= g) * e * ((f + 1) * e - f) + a }; Penner.OutBack = function (e, a, h, g, f) { if (f == undefined) { f = 1.70158 } return h * ((e = e / g - 1) * e * ((f + 1) * e + f) + 1) + a }; Penner.InOutBack = function (e, a, h, g, f) { if (f == undefined) { f = 1.70158 } if ((e /= g / 2) < 1) { return h / 2 * (e * e * (((f *= (1.525)) + 1) * e - f)) + a } return h / 2 * ((e -= 2) * e * (((f *= (1.525)) + 1) * e + f) + 2) + a }; Penner.InBounce = function (e, a, g, f) { return g - Penner.OutBounce(f - e, 0, g, f) + a }; Penner.OutBounce = function (e, a, g, f) { if ((e /= f) < (1 / 2.75)) { return g * (7.5625 * e * e) + a } else { if (e < (2 / 2.75)) { return g * (7.5625 * (e -= (1.5 / 2.75)) * e + 0.75) + a } else { if (e < (2.5 / 2.75)) { return g * (7.5625 * (e -= (2.25 / 2.75)) * e + 0.9375) + a } else { return g * (7.5625 * (e -= (2.625 / 2.75)) * e + 0.984375) + a } } } }; Penner.InOutBounce = function (e, a, g, f) { if (e < f / 2) { return Penner.InBounce(e * 2, 0, g, f) * 0.5 + a } return Penner.OutBounce(e * 2 - f, 0, g, f) * 0.5 + g * 0.5 + a }; if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.EventMixin) == "undefined" || typeof (window.DnnDevControlsNamespace.EventMixin.Version) == null || window.DnnDevControlsNamespace.EventMixin.Version < 2) { DnnDevControlsNamespace.EventMixin = { Version: 2, Initialize: function (a) { a._listeners = {}; a._eventsEnabled = true; a.AttachEvent = this.AttachEvent; a.DetachEvent = this.DetachEvent; a.RaiseEvent = this.RaiseEvent; a.EnableEvents = this.EnableEvents; a.DisableEvents = this.DisableEvents; a.DisposeEventHandlers = this.DisposeEventHandlers }, DisableEvents: function () { this._eventsEnabled = false }, EnableEvents: function () { this._eventsEnabled = true }, AttachEvent: function (b, a) { if (!this._listeners[b]) { this._listeners[b] = [] } this._listeners[b][this._listeners[b].length] = (DnnDevControlsNamespace.EventMixin.ResolveFunction(a)) }, DetachEvent: function (e, d) { var b = this._listeners[e]; if (!b) { return false } var a = DnnDevControlsNamespace.EventMixin.ResolveFunction(d); for (var c = 0; c < b.length; c++) { if (a == b[c]) { b.splice(c, 1); return true } } return false }, DisposeEventHandlers: function () { for (var a in this._listeners) { var c = null; if (this._listeners.hasOwnProperty(a)) { c = this._listeners[a]; for (var b = 0; b < c.length; b++) { c[b] = null } c = null } } }, ResolveFunction: function (a) { if (typeof (a) == "function") { return a } else { if (typeof (window[a]) == "function") { return window[a] } else { return new Function("var Sender = arguments[0]; var Arguments = arguments[1];" + a) } } }, RaiseEvent: function (b, a) { if (!this._eventsEnabled) { return true } var f = true; if (this[b]) { var e = DnnDevControlsNamespace.EventMixin.ResolveFunction(this[b])(this, a); if (typeof (e) == "undefined") { e = true } f = f && e } if (!this._listeners[b]) { return f } for (var c = 0; c < this._listeners[b].length; c++) { var d = this._listeners[b][c]; var e = d(this, a); if (typeof (e) == "undefined") { e = true } f = f && e } return f } } } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.JSON) == "undefined" || typeof (window.DnnDevControlsNamespace.JSON.Version) == null || window.DnnDevControlsNamespace.JSON.Version < 1) { window.DnnDevControlsNamespace.JSON = { Version: 1, copyright: "(c)2005 JSON.org", license: "http://www.crockford.com/JSON/license.html", stringify: function (c, h) { var b = []; var d = arguments[2] || {}; function i(a) { b[b.length] = a } function f(a) { var n, m, e, g; switch (typeof a) { case "object": if (a) { if (a instanceof Array) { i("["); e = b.length; for (m = 0; m < a.length; m += 1) { g = a[m]; if (typeof g != "undefined" && typeof g != "function") { if (e < b.length) { i(",") } f(g) } } i("]"); return "" } else { if (typeof a.valueOf == "function") { i("{"); e = b.length; for (m in a) { g = a[m]; if (h && g == h[m]) { continue } var k = typeof g; if (k == "undefined" || k == "function") { continue } if (k == "object" && !d[m]) { continue } if (e < b.length) { i(",") } f(m); i(":"); f(g) } return i("}") } } } i("null"); return ""; case "number": i(isFinite(a) ? +a : "null"); return ""; case "string": e = a.length; i('"'); for (m = 0; m < e; m += 1) { n = a.charAt(m); if (n >= " ") { if (n == "\\" || n == '"') { i("\\") } i(n) } else { switch (n) { case "\b": i("\\b"); break; case "\f": i("\\f"); break; case "\n": i("\\n"); break; case "\r": i("\\r"); break; case "\t": i("\\t"); break; default: n = n.charCodeAt(); i("\\u00" + Math.floor(n / 16).toString(16) + (n % 16).toString(16)) } } } i('"'); return ""; case "boolean": i(String(a)); return ""; default: i("null"); return "" } } f(c, 0); return b.join("") }, stringifyHashTable: function (f, e, d) { var c = []; if (!d) { d = [] } for (var g = 0; g < f.length; g++) { var b = this.stringify(f[g], d[g]); if (b == "{}") { continue } c[c.length] = '"' + f[g][e] + '":' + b } return "{" + c.join(",") + "}" }, parse: function (_11) { return (/^([ \t\r\n,:{}\[\]]|"(\\["\\\/bfnrtu]|[^\x00-\x1f"\\]+)*"|-?\d+(\.\d*)?([eE][+-]?\d+)?|true|false|null)+$/.test(_11)) && eval("(" + _11 + ")") } } } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.MsAjaxMixin) == "undefined" || typeof (window.DnnDevControlsNamespace.MsAjaxMixin.Version) == null || window.DnnDevControlsNamespace.MsAjaxMixin.Version < 1) { DnnDevControlsNamespace.MsAjaxMixin = { Version: 1, Initialize: function (b, a) { if (typeof (b.registerClass) != "function") { return } b.inheritsFrom(Sys.UI.Control); b.registerClass(a, Sys.UI.Control, Sys.IDisposable); b.prototype.initialize = function () { Sys.UI.Control.callBaseMethod(this, "initialize") }; b.prototype.dispose = function () { Sys.UI.Control.callBaseMethod(this, "dispose"); this.Dispose() } } } } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.Overlay) == "undefined" || typeof (window.DnnDevControlsNamespace.Overlay.Version) == null || window.DnnDevControlsNamespace.Overlay.Version < 1.1) { window.DnnDevControlsNamespace.Overlay = function (a) { if (!this.SupportsOverlay()) { return } this.Element = a; this.Shim = document.createElement("IFRAME"); this.Shim.src = "javascript:'';"; this.Element.parentNode.insertBefore(this.Shim, this.Element); if (a.style.zIndex > 0) { this.Shim.style.zIndex = a.style.zIndex - 1 } this.Shim.style.position = "absolute"; this.Shim.style.border = "0px"; this.Shim.frameBorder = 0; this.Shim.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)"; this.Shim.disabled = "disabled" }; window.DnnDevControlsNamespace.Overlay.Version = 1.1; DnnDevControlsNamespace.Overlay.prototype.SupportsOverlay = function () { return DnnDevControlsNamespace.Browser.IsIE }; DnnDevControlsNamespace.Overlay.prototype.Update = function () { if (!this.SupportsOverlay()) { return } this.Shim.style.top = this.ToUnit(this.Element.style.top); this.Shim.style.left = this.ToUnit(this.Element.style.left); this.Shim.style.width = this.Element.offsetWidth + "px"; this.Shim.style.height = this.Element.offsetHeight + "px" }; DnnDevControlsNamespace.Overlay.prototype.ToUnit = function (a) { if (!a) { return "0px" } return parseInt(a) + "px" }; DnnDevControlsNamespace.Overlay.prototype.Dispose = function () { if (!this.SupportsOverlay()) { return } if (this.Shim.parentNode) { this.Shim.parentNode.removeChild(this.Shim) } this.Element = null; this.Shim = null } } if (typeof window.DnnDevNamespace == "undefined") { window.DnnDevNamespace = {} } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } DnnDevControlsNamespace.AppendStyleSheet = function (e, d, c) { if (!c) { return } var b = window.netscape && !window.opera; if (!e && b) { document.write("<link rel='stylesheet' type='text/css' href='" + c + "' />") } else { var a = document.createElement("link"); a.rel = "stylesheet"; a.type = "text/css"; a.href = c; document.getElementsByTagName("head")[0].appendChild(a) } }; DnnDevNamespace.ItemFlow = { H: 0, Horizontal: 1 }; DnnDevNamespace.ExpandDirection = { Auto: 0, Up: 1, Down: 2, Left: 3, Right: 4 }; DnnDevNamespace.ExpandDirectionPropertyName = { "1": "bottom", "2": "top", "3": "right", "4": "left" }; function DnnDev(a) { this.DomElement = a; this.ChildItemList = DnnDev.GetFirstChildByTagName(this.DomElement, "ul"); this.StateField = document.getElementById(a.id + "_Hidden"); this.Items = []; this.AllItems = []; this.OpenedItem = null; this.LastExpandedItem = null; this.ExpandAnimation = {}; this.CollapseAnimation = {}; this.CollapseDelay = 500; this.ExpandDelay = 000; this.ID = a.id; this.Skin = "Default"; this.RightToLeft = false; this.EnableScreenBoundaryDetection = true; this.InUpdate = false; this.Initialized = false; this.State = {}; this.ItemState = {}; this.CausesValidation = true; this.Flow = DnnDevNamespace.ItemFlow.Horizontal; this.ClickToOpen = false; this.Enabled = true; this.EnableAutoScroll = false; this.Clicked = false; this.OriginalZIndex = this.DomElement.style.zIndex; this.Attributes = {}; DnnDevControlsNamespace.EventMixin.Initialize(this); DnnDevControlsNamespace.DomEventMixin.Initialize(this) } DnnDev.Create = function () { var c = arguments[0]; var b = window[c]; if (b != null && b.Dispose) { b.Dispose() } var a = document.getElementById(c); return new this(a) }; DnnDev.JSONIncludeDeep = { Attributes: true }; DnnDev.CreateState = function (c) { c.InitialState = {}; for (var b in c) { var a = typeof c[b]; if (a == "number" || a == "string" || a == "boolean") { c.InitialState[b] = c[b] } } }; DnnDev.GetFirstChildByTagName = function (b, a) { var c = b.getElementsByTagName(a)[0]; if (c && c.parentNode == b) { return c } return null }; DnnDev.prototype.RenderInProgress = function () { return this.DomElement.offsetWidth == 0 }; DnnDev.prototype.Detach = function (a) { if (!(DnnDevControlsNamespace.Browser.IsIE) || document.readyState == "complete") { document.forms[0].insertBefore(this.DomElement, document.forms[0].firstChild); this.DomElement.style.position = "absolute"; this.Detached = true } }; DnnDev.prototype.Show = function (c) { if (!this.IsContext) { return } if (!this.RaiseEvent("OnClientContextShowing")) { return DnnDevControlsNamespace.DomEvent.PreventDefault(c) } for (var b in DnnDevNamespace.ContextMenus) { DnnDevNamespace.ContextMenus[b].Hide() } var a = this.MouseEventX(c); var d = this.MouseEventY(c); if (this.RightToLeft) { this.ShowAt(a, d); return this.ShowAt(a - this.ChildItemList.offsetWidth, d) } return this.ShowAt(a, d) }; DnnDev.prototype.ShowAt = function (a, b) { if (!this.IsContext) { return } if (!this.Detached) { this.Detach() } this.ShownAsContext = true; this.Ease.ShowElements(); this.Ease.UpdateContainerSize(); if (!this.WidthFixed) { this.WidthFixed = true; this.FixItemWidth(this) } this.Position(a, b); this.Ease.In(); this.RaiseEvent("OnClientContextShown", null); return false }; DnnDev.prototype.Position = function (a, c) { var b = DnnDevControlsNamespace.Screen.GetViewPortSize(); a = Math.min(a, b.width - this.DomElement.offsetWidth); c = Math.min(c, b.height - this.DomElement.offsetHeight); if (isNaN(a)) { a = 0 } if (isNaN(c)) { c = 0 } this.DomElement.style.left = a + "px"; this.DomElement.style.top = c + "px" }; DnnDev.prototype.MouseEventX = function (a) { if (a.pageX) { return a.pageX } else { if (a.clientX) { if (DnnDevControlsNamespace.Browser.StandardsMode) { return (a.clientX + document.documentElement.scrollLeft) } return (a.clientX + document.body.scrollLeft) } } }; DnnDev.prototype.MouseEventY = function (a) { if (a.pageY) { return a.pageY } else { if (a.clientY) { if (DnnDevControlsNamespace.Browser.StandardsMode) { return (a.clientY + document.documentElement.scrollTop) } return (a.clientY + document.body.scrollTop) } } }; DnnDev.prototype.EventSource = function (a) { return DnnDevControlsNamespace.DomEvent.GetTarget(a) }; DnnDev.prototype.Hide = function () { if (this.ShownAsContext) { this.Ease.Out(); this.ShownAsContext = false; this.RaiseEvent("OnClientContextHidden", null) } }; DnnDev.prototype.Initialize = function (b, a) { this.LoadConfiguration(b); this.ItemData = a; this.DetermineDirection(); this.ApplyRTL(); if (this.IsContext) { this.InitContextMenu() } this.CreateControlHierarchy(this, 0); if (!this.Enabled) { this.Disable() } if (this.Flow == DnnDevNamespace.ItemFlow.H) { this.FixRootItemWidth() } this.AttachEventHandlers(); this.Initialized = true; DnnDev.CreateState(this); this.RaiseEvent("OnClientLoad", null) }; DnnDev.prototype.AttachEventHandlers = function () { var a = this; this.DomElement.DnnDevShow = function () { if (a.Flow == DnnDevNamespace.ItemFlow.H) { a.FixRootItemWidth() } }; this.AttachDomEvent(window, "unload", "Dispose"); if (!this.ClickToOpen) { this.AttachDomEvent(document, "mouseout", "MouseOutHandler") } if (this.ClickToOpen) { this.AttachDomEvent(document, "click", "CloseOpenedItems") } this.AttachDomEvent(window, "resize", "RefreshPosition") }; DnnDev.prototype.RefreshPosition = function (a) { this.DomElement.style.cssText = this.DomElement.style.cssText }; DnnDev.prototype.MouseOutHandler = function (a) { var c = DnnDevControlsNamespace.DomEvent.GetRelatedTarget(a); if (!c) { var b = this; setTimeout(function () { b.Close() }, this.CollapseDelay) } }; DnnDev.prototype.CloseOpenedItems = function (b) { var a = this.EventSource(b); if (!this.IsChildOf(this.DomElement, a)) { this.Close() } }; DnnDev.prototype.DetermineDirection = function () { var a = this.DomElement; while (a.tagName.toLowerCase() != "html") { if (a.dir) { this.RightToLeft = (a.dir.toLowerCase() == "rtl"); return } a = a.parentNode } this.RightToLeft = false }; DnnDev.prototype.ApplyRTL = function () { if (!this.RightToLeft) { return } if (this.RenderInProgress()) { this.AttachDomEvent(window, "load", "ApplyRTL"); return } this.FixItemWidthInRTL(); if (DnnDevControlsNamespace.Browser.IsIE) { this.DomElement.dir = "ltr" } if (!this.IsContext) { this.DomElement.className += " rtl DnnDev_" + this.Skin + "_rtl" } else { this.DomElement.className += " rtlcontext DnnDev_" + this.Skin + "_rtl" } }; DnnDev.prototype.InitContextMenu = function () { this.Ease = new DnnDevControlsNamespace.Ease(this.ChildItemList, this, 0, 0, null, true); this.Flow = DnnDevNamespace.ItemFlow.H; this.Ease.SetSide("top"); if (DnnDevControlsNamespace.Browser.IsOpera) { this.AttachDomEvent(document, "mousedown", "OnContextMenu") } else { this.AttachDomEvent(document, "contextmenu", "OnContextMenu") } this.AttachDomEvent(document, "click", "OnDocumentClick"); if (!DnnDevNamespace.ContextMenus) { DnnDevNamespace.ContextMenus = {} } if (!DnnDevNamespace.ContextElements) { DnnDevNamespace.ContextElements = {} } if (this.ContextMenuElementID) { DnnDevNamespace.ContextElements[this.ContextMenuElementID] = true } DnnDevNamespace.ContextMenus[this.ID] = this }; DnnDev.prototype.OnContextMenu = function (b) { if (DnnDevControlsNamespace.Browser.IsOpera) { if (b.button != 2) { return } } this.ContextElement = document.getElementById(this.ContextMenuElementID); if (this.ContextMenuElementID && !this.ContextElement) { return } var a = this.EventSource(b); if (this.ContextElement) { if (a == this.ContextElement || this.IsChildOf(this.ContextElement, a)) { this.Show(b); DnnDevControlsNamespace.DomEvent.PreventDefault(b); DnnDevControlsNamespace.DomEvent.StopPropagation(b) } } else { if (!DnnDevNamespace.ContextElements[a.id]) { this.Show(b); DnnDevControlsNamespace.DomEvent.PreventDefault(b); DnnDevControlsNamespace.DomEvent.StopPropagation(b) } } }; DnnDev.prototype.IsChildOf = function (a, b) { if (b == a) { return false } while (b && (b != document.body)) { if (b == a) { return true } try { b = b.parentNode } catch (c) { return false } } return false }; DnnDev.prototype.OnDocumentClick = function (b) { var a = this.EventSource(b); if (this.IsChildOf(this.DomElement, a)) { if (!this.IsChildOfMenuItem(a)) { return } } this.Hide() }; DnnDev.prototype.IsChildOfMenuItem = function (a) { if (a.tagName == "SPAN" && a.className.indexOf("text") > -1) { return true } if (a.tagName == "A" && a.className.indexOf("link") > -1) { return true } return false }; DnnDev.prototype.Enable = function () { this.Enabled = true; this.DomElement.disabled = ""; for (var a = 0; a < this.AllItems.length; a++) { this.AllItems[a].Enable() } }; DnnDev.prototype.Disable = function () { this.Enabled = false; this.DomElement.disabled = "disabled"; for (var a = 0; a < this.AllItems.length; a++) { this.AllItems[a].Disable() } }; DnnDev.prototype.Focus = function () { this.DomElement.focus() }; DnnDev.prototype.Dispose = function () { if (this.Disposed) { return } this.Disposed = true; for (var a = 0; a < this.AllItems.length; a++) { this.AllItems[a].Dispose() } if (this.Detached && this.DomElement) { if (this.DomElement.parentNode) { this.DomElement.parentNode.removeChild(this.DomElement) } } if (this.DomElement) { this.DomElement.DnnDevShow = null } this.DomElement = null; this.ChildItemList = null; this.StateField = null; this.DisposeDomEventHandlers(); if (this.IsContext && DnnDevNamespace.ContextMenus) { DnnDevNamespace.ContextMenus[this.ID] = null } }; DnnDev.prototype.CreateMenuItem = function (c, b) { var a = new DnnDevItem(b); this.AddItemToParent(c, a); return a }; DnnDev.prototype.AddItemToParent = function (b, a) { a.Index = b.Items.length; b.Items[b.Items.length] = a; a.GlobalIndex = this.AllItems.length; this.AllItems[this.AllItems.length] = a; a.Parent = b; a.Menu = this }; DnnDev.prototype.CreateControlHierarchy = function (e, c) { e.Level = c; var b = e.ChildItemList; if (!b) { return } for (var a = 0; a < b.childNodes.length; a++) { var f = b.childNodes[a]; if (f.nodeType == 3) { continue } var d = this.CreateMenuItem(e, f); d.Initialize(); if (c == 0) { d.PostInitialize() } this.CreateControlHierarchy(d, c + 1) } }; DnnDev.prototype.FixItemWidthInRTL = function () { var g = 0; var f = 0; var h = this.ChildItemList; for (var d = 0; d < h.childNodes.length; d++) { var l = h.childNodes[d]; if (l.nodeType == 3) { continue } var e = DnnDev.GetFirstChildByTagName(l, "a"); if (!e) { e = l } if (this.RightToLeft) { var c = e.getElementsByTagName("img")[0]; if (c) { c.style.styleFloat = "left" } } g = Math.max(DnnDevControlsNamespace.Box.GetOuterWidth(e), g); if (this.RightToLeft) { var c = e.getElementsByTagName("img")[0]; if (c) { c.style.styleFloat = "right" } } } for (var d = 0; d < h.childNodes.length; d++) { var l = h.childNodes[d]; if (l.nodeType == 3) { continue } if (DnnDevControlsNamespace.Browser.IsOpera) { l.style.cssFloat = "none" } var k = DnnDev.GetFirstChildByTagName(l, "a"); if (k) { var b = !DnnDev.GetFirstChildByTagName(k, "span").firstChild; if (!DnnDevControlsNamespace.Browser.IsIE || !b) { DnnDevControlsNamespace.Box.SetOuterWidth(k, DnnDevControlsNamespace.Box.GetOuterWidth(k)) } } else { l.style.width = g + "px" } } if (DnnDevControlsNamespace.Browser.IsSafari) { h.style.width = DnnDev.GetFirstChildByTagName(h, "li").offsetWidth + "px" } }; DnnDev.prototype.FixItemWidth = function (g) { var e = 0; var l = g.ChildItemList; var c = null; for (var k = 0; k < l.childNodes.length; k++) { var n = l.childNodes[k]; if (n.nodeType == 3) { continue } var h = DnnDev.GetFirstChildByTagName(n, "a"); if (!h) { h = DnnDev.GetFirstChildByTagName(n, "div"); if (!h) { continue } } if (this.RightToLeft) { var f = h.getElementsByTagName("img")[0]; if (f) { f.style.styleFloat = "left" } } var d = DnnDevControlsNamespace.Box.GetOuterWidth(h); if (isNaN(d)) { continue } if (d > e) { e = d; c = n } if (this.RightToLeft) { var f = h.getElementsByTagName("img")[0]; if (f) { f.style.styleFloat = "right" } } } for (var k = 0; k < l.childNodes.length; k++) { var n = l.childNodes[k]; if (n.nodeType == 3) { continue } if (DnnDevControlsNamespace.Browser.IsOpera) { n.style.cssFloat = "none" } var m = DnnDev.GetFirstChildByTagName(n, "a"); if (m) { var b = !DnnDev.GetFirstChildByTagName(m, "span").firstChild; if (!DnnDevControlsNamespace.Browser.IsIE || !b) { if (m.style.display != "none") { DnnDevControlsNamespace.Box.SetOuterWidth(m, e) } } } else { n.style.width = e + "px" } } if (DnnDevControlsNamespace.Browser.IsSafari) { if (c) { l.style.width = c.offsetWidth + "px" } } }; DnnDev.prototype.FixRootItemWidth = function () { var b = this; var a = function () { b.FixItemWidth(b) }; if (this.RenderInProgress() || DnnDevControlsNamespace.Browser.IsOpera || DnnDevControlsNamespace.Browser.IsSafari) { if (window.addEventListener) { window.addEventListener("load", a, false) } else { window.attachEvent("onload", a) } } else { a() } }; DnnDev.prototype.FixListWidth = function (e) { if (this.RightToLeft) { this.FixItemWidth(e) } var d = 0; var c = e.ChildItemList; for (var b = 0; b < c.childNodes.length; b++) { var a = c.childNodes[b]; if (a.nodeType == 3) { continue } d += a.offsetWidth; a.style.clear = "none" } c.style.width = d + "px" }; DnnDev.prototype.LoadConfiguration = function (a) { for (var b in a) { this[b] = a[b] } if (!this.DefaultGroupSettings) { this.DefaultGroupSettings = {} } if (typeof this.DefaultGroupSettings.Flow == "undefined") { this.DefaultGroupSettings.Flow = DnnDevNamespace.ItemFlow.H } if (typeof this.DefaultGroupSettings.ExpandDirection == "undefined") { this.DefaultGroupSettings.ExpandDirection = DnnDevNamespace.ExpandDirection.Auto } if (typeof this.DefaultGroupSettings.OffsetX == "undefined") { this.DefaultGroupSettings.OffsetX = 0 } if (typeof this.DefaultGroupSettings.OffsetY == "undefined") { this.DefaultGroupSettings.OffsetY = 0 } }; DnnDev.prototype.Close = function (a) { if (this.OpenedItem) { this.OpenedItem.Close() } }; DnnDev.prototype.FindItemByText = function (a) { for (var b = 0; b < this.AllItems.length; b++) { if (this.AllItems[b].Text == a) { return this.AllItems[b] } } return null }; DnnDev.prototype.FindItemById = function (b) { for (var a = 0; a < this.AllItems.length; a++) { if (this.AllItems[a].ID == b) { return this.AllItems[a] } } return null }; DnnDev.prototype.FindItemByValue = function (b) { for (var a = 0; a < this.AllItems.length; a++) { if (this.AllItems[a].Value == b) { return this.AllItems[a] } } return null }; DnnDev.prototype.FindItemByUrl = function (a) { for (var b = 0; b < this.AllItems.length; b++) { if (this.AllItems[b].NavigateUrl == a) { return this.AllItems[b] } } return null }; DnnDev.prototype.SetContextElementID = function (a) { if (!DnnDevNamespace.ContextElements) { DnnDevNamespace.ContextElements = {} } if (this.ContextMenuElementID) { DnnDevNamespace.ContextElements[this.ContextMenuElementID] = false } this.ContextMenuElementID = a; DnnDevNamespace.ContextElements[this.ContextMenuElementID] = false }; DnnDev.prototype.RecordState = function () { if (this.InUpdate || !this.Initialized) { return } var c = DnnDevControlsNamespace.JSON.stringify(this, this.InitialState, DnnDev.JSONIncludeDeep); var b = []; for (var a in this.ItemState) { if (this.ItemState[a] == "") { continue } if (typeof this.ItemState[a] == "function") { continue } b[b.length] = this.ItemState[a] } this.StateField.value = '{"State":' + c + ',"ItemState":{' + b.join(",") + "}}" }; DnnDev.prototype.PersistClientSideItems = function () { for (var b = 0; b < this.AllItems.length; b++) { var a = this.AllItems[b]; if (a.ClientSide) { a.RecordState(true) } } }; DnnDev.prototype.SetAttribute = function (b, a) { this.Attributes[b] = a; this.RecordState() }; DnnDev.prototype.GetAttribute = function (a) { return this.Attributes[a] }; DnnDev.CreateChildItemContainer = function (c) { var b = document.createElement("div"); b.className = "slide"; c.DomElement.appendChild(b); var a = document.createElement("ul"); if (c.Flow == DnnDevNamespace.ItemFlow.Horizontal) { a.className = "horizontal group level" + c.Level } else { a.className = "H group level" + c.Level } b.appendChild(a) }; DnnDev.prototype.AddItem = function (b) { var g = document.createElement("li"); g.className = "item last"; var a = document.createElement("a"); a.className = "link"; var f = document.createElement("span"); f.className = "text"; a.appendChild(f); g.appendChild(a); b.SetDomElement(g); var e = this.Menu || this; if (e != this && this.Items.length == 0) { DnnDev.CreateChildItemContainer(this); this.InitializeDomElements(); this.InitializeAnimation() } this.ChildItemList.appendChild(g); e.AddItemToParent(this, b); b.Level = this.Level + 1; var d = b.Text; b.Text = ""; b.ID = this.ID + "_m" + (this.Items.length - 1); b.Initialize(); b.SetText(d); if (this.Menu) { b.ParentClientID = this.ID } a.href = "#"; if (this.Items.length > 1) { var c = this.Items[this.Items.length - 2].DomElement; c.className = c.className.replace(" last", "") } }; function DnnDevItem(a) { if (a) { this.SetDomElement(a) } else { this.ClientSide = true } this.IsSeparator = false; this.AnimationContainer = null; this.OpenedItem = null; this.FocusedItem = null; this.Items = []; this.Attributes = {}; this.Index = -1; this.Level = -1; this.Parent = null; this.Menu = null; this.GroupSettings = {}; this.TimeoutPointer = null; this.Templated = false; this.NavigateAfterClick = true; this.FocusedCssClass = "menu_actived"; this.ClickedCssClass = "menu_clicked"; this.ExpandedCssClass = "menu_hover"; this.DisabledCssClass = "disabled"; this.CssClass = ""; this.State = DnnDevItemState.Closed; this.Focused = false; this.Clicked = false; this.Enabled = true; this.Initialized = false } DnnDevItem.prototype.SetDomElement = function (a) { this.DomElement = a; this.LinkElement = DnnDev.GetFirstChildByTagName(this.DomElement, "a"); if (this.LinkElement == null) { this.ID = this.DomElement.id; this.TextElement = DnnDev.GetFirstChildByTagName(this.DomElement, "span"); this.NavigateUrl = "" } else { this.ID = this.LinkElement.id; this.TextElement = DnnDev.GetFirstChildByTagName(this.LinkElement, "span"); this.NavigateUrl = this.LinkElement.href } }; DnnDevItem.prototype.PostInitializeItems = function () { for (var a = 0; a < this.Items.length; a++) { this.Items[a].PostInitialize() } }; DnnDevItem.prototype.SetText = function (a) { this.PostInitialize(); this.TextElement.innerHTML = a; this.Text = a; this.RecordState() }; DnnDevItem.prototype.SetNavigateUrl = function (a) { this.PostInitialize(); this.LinkElement.setAttribute("href", a); this.NavigateUrl = a; this.RecordState() }; DnnDevItem.prototype.SetValue = function (a) { this.PostInitialize(); this.Value = a; this.RecordState() }; DnnDevItem.prototype.InitializeDomElements = function () { if (!this.Templated) { this.AnimationContainer = DnnDev.GetFirstChildByTagName(this.DomElement, "div"); this.ImageElement = DnnDev.GetFirstChildByTagName(this.LinkElement || this.DomElement, "img"); if (this.ImageElement) { this.ImageUrl = this.ImageElement.src } } else { this.TextElement = DnnDev.GetFirstChildByTagName(this.DomElement, "div"); this.AnimationContainer = this.TextElement.nextSibling } if (this.AnimationContainer) { var a = this.AnimationContainer.getElementsByTagName("ul")[0]; this.ChildItemList = a; if (this.ChildItemList.parentNode != this.AnimationContainer) { this.ScrollWrap = this.ChildItemList.parentNode } } }; DnnDevItem.prototype.InitializeAnimation = function () { this.DetermineExpandDirection(); if (!this.AnimationContainer) { return } this.Ease = new DnnDevControlsNamespace.Ease(this.ScrollWrap || this.ChildItemList, this.Menu, this.GroupSettings.OffsetX, this.GroupSettings.OffsetY, this, true); var b = this.GroupSettings.ExpandDirection; var a = DnnDevNamespace.ExpandDirectionPropertyName[b]; this.Ease.SetSide(a); this.TextElement.className = "menutext " + this.Ease.GetSide(); this.AnimationContainer.style.zIndex = this.GlobalIndex + 10; this.ChildItemList.style.zIndex = this.GlobalIndex + 10; if (this.ScrollWrap) { this.CreateScroll() } }; DnnDevItem.prototype.Initialize = function () { DnnDevControlsNamespace.DomEventMixin.Initialize(this); this.LoadConfiguration(); this.InitializeDomElements(); if (this.TextElement && this.TextElement.firstChild) { this.Text = this.TextElement.firstChild.nodeValue } this.OriginalZIndex = Math.max(this.DomElement.style.zIndex, this.Menu.OriginalZIndex) }; DnnDevItem.prototype.PostInitialize = function () { if (this.Initialized) { return } this.InitializeAnimation(); this.AttachEventHandlers(); this.RenderAccessKey(); DnnDev.CreateState(this); this.UpdateCssClass(); this.Initialized = true }; DnnDevItem.prototype.RenderAccessKey = function () { if (this.IsSeparator || this.Templated) { return } var c = this.LinkElement.accessKey.toLowerCase(); if (!c) { return } var b = this.TextElement.firstChild.nodeValue; var a = b.toLowerCase().indexOf(c); if (a == -1) { return } this.TextElement.innerHTML = b.substr(0, a) + "<u>" + b.substr(a, 1) + "</u>" + b.substr(a + 1, b.length) }; DnnDevItem.prototype.CreateScroll = function () { this.ScrollWrap.style.zIndex = this.GlobalIndex + 10; this.BuildScrollObject(false) }; DnnDevItem.prototype.BuildScrollObject = function (b) { var a = DnnDevNamespace.ItemFlow.H == this.GroupSettings.Flow; var c = { PerTabScrolling: false, ScrollButtonsPosition: 1, ScrollPosition: 0 }; this.Scroll = new DnnDevControlsNamespace.Scroll(this.ChildItemList, a, c); this.Scroll.ScrollOnHover = true; this.Scroll.LeaveGapsForArrows = false; this.Scroll.WrapNeeded = b; if (this.GroupSettings.Flow == DnnDevNamespace.ItemFlow.H) { this.Scroll.LeftArrowClass = "topArrow"; this.Scroll.LeftArrowClassDisabled = "topArrowDisabled"; this.Scroll.RightArrowClass = "bottomArrow"; this.Scroll.RightArrowClassDisabled = "bottomArrowDisabled" } }; DnnDevItem.prototype.CreateRuntimeScroll = function (a) { if (this.Scroll) { this.Scroll.SetHeight(a); return } this.BuildScrollObject(true); this.Scroll.Initialize(); this.ScrollWrap = this.ChildItemList.parentNode; this.Ease.Element = this.ScrollWrap; this.Ease.Overlay.Element = this.ScrollWrap; this.ScrollWrap.className = "scrollWrap"; this.Scroll.SetHeight(a) }; DnnDevItem.prototype.Dispose = function () { if (!this.Initialized) { return } this.DisposeDomEventHandlers(); if (this.Ease) { this.Ease.Dispose() } this.DomElement = null; this.LinkElement = null; this.AnimationContainer = null }; DnnDevItem.prototype.Focus = function () { if (!this.CanFocus()) { return } this.PostInitializeItems(); if (this.Parent.OpenedItem && this.Parent.OpenedItem != this) { this.Parent.OpenedItem.Close() } if (this.Parent.State != DnnDevItemState.Open && this.Parent.Open) { this.Parent.Open() } this.Parent.FocusedItem = this; if (!this.Focused && this.LinkElement) { this.LinkElement.focus() } this.CancelMenuClose(); this.UpdateCssClass(); this.RaiseEvent("OnClientItemFocus") }; DnnDevItem.prototype.Hide = function () { if (this.LinkElement) { this.LinkElement.style.display = "none" } else { this.TextElement.style.display = "none" } if (this.Parent.Flow == DnnDevNamespace.ItemFlow.H) { var b = this.Parent.Items; for (var a = 0; a < b.length; a++) { if (b[a] != this) { if (b[a].LinkElement) { b[a].LinkElement.style.width = "auto" } } } if (DnnDevControlsNamespace.Browser.IsSafari) { this.Parent.ChildItemList.style.width = "auto" } this.Menu.WidthFixed = false; if (this.Parent.DomElement.offsetWidth > 0) { this.Menu.FixItemWidth(this.Parent) } } }; DnnDevItem.prototype.IsVisible = function () { if (!this.LinkElement) { return this.TextElement.style.display != "none" } return this.LinkElement.style.display != "none" }; DnnDevItem.prototype.Show = function () { if (this.LinkElement) { this.LinkElement.style.display = "" } else { this.TextElement.style.display = "" } if (this.Parent.Flow == DnnDevNamespace.ItemFlow.H) { this.Menu.WidthFixed = false; if (this.Parent.DomElement.offsetWidth > 0) { this.Menu.FixItemWidth(this.Parent) } } }; DnnDevItem.prototype.Blur = function () { if (this.IsSeparator) { return } if (this.Focused) { this.LinkElement.blur() } this.Parent.FocusedItem = null; this.UpdateCssClass(); this.RaiseEvent("OnClientItemBlur") }; DnnDevItem.prototype.Open = function () { this.PostInitializeItems(); this.Menu.AboutToCollapse = false; if (this.Parent != this.Menu && this.Parent.State != DnnDevItemState.Open) { this.Parent.Open() } this.Parent.OpenedItem = this; clearTimeout(this.TimeoutPointer); if (!this.AnimationContainer) { return } this.State = DnnDevItemState.Open; var a = DnnDevControlsNamespace.Screen.GetViewPortSize(); this.ChildItemList.style.display = "block"; this.Ease.ShowElements(); if (this.GroupSettings.Flow == DnnDevNamespace.ItemFlow.H) { this.Menu.FixItemWidth(this) } else { this.Menu.FixListWidth(this) } if (this.Menu.EnableAutoScroll && this.ChildItemList.offsetHeight > a.height) { if (!this.ScrollWrap || this.ScrollWrap.offsetHeight > a.height) { this.CreateRuntimeScroll(a.height + "px"); this.Ease.ShowElements(); this.Ease.UpdateContainerSize() } } this.Ease.SetSide(this.GetEaseSide()); this.Ease.UpdateContainerSize(); if (this.Scroll) { this.CalculateScrollWrapSize(); this.Scroll.Initialize() } this.PositionChildContainer(a); this.Ease.In(); this.UpdateCssClass(); this.DomElement.style.zIndex = this.OriginalZIndex + 1000; if (!DnnDevControlsNamespace.Browser.IsNetscape) { this.Menu.DomElement.style.zIndex = this.Menu.OriginalZIndex + 1000 } this.CancelMenuClose(); this.RaiseEvent("OnClientItemOpen") }; DnnDevItem.prototype.GetEaseSide = function () { var a = this.GroupSettings.ExpandDirection; return DnnDevNamespace.ExpandDirectionPropertyName[a] }; DnnDevItem.prototype.RaiseEvent = function (a) { return this.Menu.RaiseEvent(a, { Item: this }) }; DnnDevItem.prototype.UpdateCssClass = function () { if (this.IsSeparator || this.Templated) { return } var a = "menuitem " + this.CssClass; if (this.Focused) { a = a + " " + this.FocusedCssClass } if (this.State == DnnDevItemState.Open) { a = a + " " + this.ExpandedCssClass } if (this.Clicked) { a = a + " " + this.ClickedCssClass } if (!this.Enabled) { a = a + " " + this.DisabledCssClass } this.LinkElement.className = a; this.UpdateImageUrl() }; DnnDevItem.prototype.UpdateImageUrl = function () { if (!this.ImageElement) { return } var a = this.ImageUrl; if (this.Hovered && this.ImageOverUrl) { a = this.ImageOverUrl } if (this.State == DnnDevItemState.Open && this.ExpandedImageUrl) { a = this.ExpandedImageUrl } if (!this.Enabled && this.DisabledImageUrl) { a = this.DisabledImageUrl } if (this.Clicked && this.ImageClickedUrl) { a = this.ImageClickedUrl } a = a.replace(/&amp;/ig, "&"); if (a != this.ImageElement.src) { this.ImageElement.src = a } }; DnnDevItem.prototype.Enable = function () { if (this.IsSeparator || this.Templated) { return } this.LinkElement.disabled = ""; if (this.ImageElement) { this.ImageElement.disabled = "" } this.Enabled = true; this.EnableDomEventHandling(); this.UpdateCssClass() }; DnnDevItem.prototype.Disable = function () { if (this.IsSeparator || this.Templated) { return } this.LinkElement.disabled = "disabled"; if (this.ImageElement) { this.ImageElement.disabled = "disabled" } this.Enabled = false; this.DisableDomEventHandling(); this.UpdateCssClass() }; DnnDevItem.prototype.Close = function () { if (this.IsSeparator) { return } if (this.State == DnnDevItemState.Closed) { return } if (this.OpenedItem) { this.OpenedItem.Close() } this.Parent.OpenedItem = null; clearTimeout(this.TimeoutPointer); if (!this.AnimationContainer) { return } this.State = DnnDevItemState.Closed; if (this.Level == 1) { this.Menu.AboutToCollapse = true } this.Ease.Out(); this.UpdateCssClass(); this.DomElement.style.zIndex = this.OriginalZIndex; if (!DnnDevControlsNamespace.Browser.IsNetscape) { if (this.Level == 1) { this.Menu.DomElement.style.zIndex = this.Menu.OriginalZIndex } } this.HideChildren() }; DnnDevItem.prototype.OnCollapseComplete = function () { this.RaiseEvent("OnClientItemClose") }; DnnDevItem.prototype.HideChildren = function () { for (var a = 0; a < this.Items.length; a++) { if (this.Items[a].AnimationContainer) { this.Items[a].AnimationContainer.style.display = "none" } } }; DnnDevItem.prototype.CalculateScrollWrapSize = function () { if (!this.ScrollWrap) { return } if (!this.ScrollWrap.style.height) { this.ScrollWrap.style.height = this.ChildItemList.offsetHeight + "px" } if (!this.ScrollWrap.style.width) { this.ScrollWrap.style.width = this.ChildItemList.offsetWidth + "px" } }; DnnDevItem.prototype.AttachEventHandlers = function () { this.AttachDomEvent(this.DomElement, "mouseover", "MouseOverHandler"); this.AttachDomEvent(this.DomElement, "mouseout", "MouseOutHandler"); if (this.IsSeparator || this.Templated) { return } this.AttachDomEvent(this.LinkElement, "click", "ClickHandler", true); this.AttachDomEvent(this.LinkElement, "mouseout", "HRefMouseOutHandler"); this.AttachDomEvent(this.LinkElement, "mouseover", "HRefMouseOverHandler"); this.AttachDomEvent(this.LinkElement, "mousedown", "MouseDownHandler"); this.AttachDomEvent(this.LinkElement, "mouseup", "MouseUpHandler"); this.AttachDomEvent(this.LinkElement, "blur", "BlurHandler"); this.AttachDomEvent(this.LinkElement, "focus", "FocusHandler"); this.AttachDomEvent(this.LinkElement, "keydown", "KeyDownHandler") }; DnnDevItem.prototype.MouseDownHandler = function (a) { this.Clicked = true; this.UpdateCssClass() }; DnnDevItem.prototype.MouseUpHandler = function (a) { this.Clicked = false; this.UpdateCssClass() }; DnnDevItem.prototype.HRefMouseOutHandler = function (a) { var b = DnnDevControlsNamespace.DomEvent.GetRelatedTarget(a); if (this.Menu.IsChildOf(this.LinkElement, b) || b == this.LinkElement) { return } this.Hovered = false; this.UpdateImageUrl(); this.RaiseEvent("OnClientMouseOut") }; DnnDevItem.prototype.HRefMouseOverHandler = function (b) { var a = DnnDevControlsNamespace.DomEvent.GetRelatedTarget(b); if (this.Menu.IsChildOf(this.LinkElement, a) || this.LinkElement == a) { return } this.Hovered = true; this.UpdateImageUrl(); this.RaiseEvent("OnClientMouseOver") }; DnnDevItem.prototype.KeyDownHandler = function (c) { var b = { left: 37, up: 38, right: 39, down: 40, esc: 27 }; var a = DnnDevControlsNamespace.DomEvent.GetKeyCode(c); if (a == b.right) { if (this.Menu.RightToLeft) { this.HandleLeftArrow() } else { this.HandleRightArrow() } } else { if (a == b.left) { if (this.Menu.RightToLeft) { this.HandleRightArrow() } else { this.HandleLeftArrow() } } else { if (a == b.up) { this.HandleUpArrow() } else { if (a == b.down) { this.HandleDownArrow() } else { if (a == b.esc) { if (this.Parent == this.Menu) { this.Blur() } else { this.Parent.Close(); this.Parent.Focus() } } else { return } } } } } DnnDevControlsNamespace.DomEvent.PreventDefault(c) }; DnnDevItem.prototype.FocusHandler = function (a) { this.Focused = true; this.Focus() }; DnnDevItem.prototype.ScheduleMenuClose = function (b) { var a = this.Menu; clearTimeout(this.Menu.CloseTimeout); this.Menu.CloseTimeout = setTimeout(function () { a.Close(); a.Clicked = false }, b) }; DnnDevItem.prototype.CancelMenuClose = function () { clearTimeout(this.Menu.CloseTimeout) }; DnnDevItem.prototype.BlurHandler = function (a) { this.Focused = false; this.Blur() }; DnnDevItem.prototype.NavigatesToURL = function () { if (location.href + "#" == this.NavigateUrl || location.href == this.NavigateUrl) { return false } return (new RegExp("//")).test(this.LinkElement.href) }; DnnDevItem.prototype.Validate = function () { if (!this.Menu.CausesValidation || this.NavigatesToURL()) { return true } if (typeof (Page_ClientValidate) != "function") { return true } return Page_ClientValidate(this.Menu.ValidationGroup) }; DnnDevItem.prototype.ClickHandler = function (b) { if (!this.Enabled) { return DnnDevControlsNamespace.DomEvent.PreventDefault(b) } if (!this.RaiseEvent("OnClientItemClicking")) { return DnnDevControlsNamespace.DomEvent.PreventDefault(b) } if (!this.Validate()) { return DnnDevControlsNamespace.DomEvent.PreventDefault(b) } var a = true; if (!this.Menu.ClickToOpen) { a = true } else { if (this.Level > 1) { a = true } else { if (!this.Menu.Clicked) { this.Open() } else { this.Close() } this.Menu.Clicked = !this.Menu.Clicked } } this.RaiseEvent("OnClientItemClicked"); if (!this.NavigateAfterClick || !a) { DnnDevControlsNamespace.DomEvent.PreventDefault(b) } }; DnnDevItem.prototype.MouseOverHandler = function (d) { var a = DnnDevControlsNamespace.DomEvent.GetRelatedTarget(d); if (this.Menu.IsChildOf(this.DomElement, a) || this.DomElement == a) { return } if (this.Menu.ClickToOpen && !this.Menu.Clicked) { return } if (this.State == DnnDevItemState.Open || this.State == DnnDevItemState.AboutToOpen) { return } this.Menu.LastOpenedItem = this; if (this.State == DnnDevItemState.AboutToClose) { clearTimeout(this.TimeoutPointer); this.State = DnnDevItemState.Open; return } if (this.Parent.OpenedItem) { this.Parent.OpenedItem.Close() } this.Parent.OpenedItem = this; this.State = DnnDevItemState.AboutToOpen; var c = this; var b = function () { c.Open() }; this.TimeoutPointer = setTimeout(b, this.Menu.ExpandDelay) }; DnnDevItem.prototype.MouseOutHandler = function (d) { var f = DnnDevControlsNamespace.DomEvent.GetRelatedTarget(d); if ((!f) || this.Menu.IsChildOf(this.DomElement, f) || f == this.DomElement) { return } else { try { var c = f.parentNode } catch (d) { return } } if (this.State == DnnDevItemState.Closed || this.State == DnnDevItemState.AboutToClose) { return } if (this.State == DnnDevItemState.AboutToOpen) { clearTimeout(this.TimeoutPointer); this.State = DnnDevItemState.Closed; this.Parent.OpenedItem = null; return } if (this.Menu.ClickToOpen) { return } this.State = DnnDevItemState.AboutToClose; var a = this; var b = function () { a.Close() }; this.TimeoutPointer = setTimeout(b, this.Menu.CollapseDelay) }; DnnDevItem.prototype.PositionChildContainer = function (m) { var l = 0; var k = 0; var h = this.GroupSettings.ExpandDirection; var f = DnnDevNamespace.ExpandDirectionPropertyName[h]; var d = this.DomElement; var c = DnnDevControlsNamespace.Box.GetOuterHeight(d); var b = DnnDevControlsNamespace.Box.GetOuterWidth(d); var a = this.AnimationContainer; var i = DnnDevControlsNamespace.Box.GetOuterHeight(a); var g = DnnDevControlsNamespace.Box.GetOuterWidth(a); if (h == DnnDevNamespace.ExpandDirection.Down) { l = c } else { if (h == DnnDevNamespace.ExpandDirection.Right) { k = b } } this.SetContainerPosition(k, l); var e = DnnDevControlsNamespace.Screen.GetElementPosition(a); if (this.Menu.RightToLeft) { k = b - g } if (!this.Menu.EnableScreenBoundaryDetection) { this.Ease.SetSide(f); this.TextElement.className = "text expand" + this.Ease.GetSide(); return } if (DnnDevControlsNamespace.Screen.ElementOverflowsRight(m, a) && h == DnnDevNamespace.ExpandDirection.Right) { h = DnnDevNamespace.ExpandDirection.Left; f = "right"; k = 0 } else { if (e.x - g < 0 && h == DnnDevNamespace.ExpandDirection.Left) { h = DnnDevNamespace.ExpandDirection.Right; f = "left"; k = b } else { if (e.y - i < 0 && h == DnnDevNamespace.ExpandDirection.Up) { h = DnnDevNamespace.ExpandDirection.Down; f = "top"; l = c } else { if (DnnDevControlsNamespace.Screen.ElementOverflowsBottom(m, a) && h == DnnDevNamespace.ExpandDirection.Down) { var a = DnnDevControlsNamespace.Screen.GetElementPosition(this.DomElement); if (a.y > this.AnimationContainer.offsetHeight) { h = DnnDevNamespace.ExpandDirection.Up; f = "bottom"; l = c } } } } } if (DnnDevControlsNamespace.Screen.ElementOverflowsRight(m, a) && (h == DnnDevNamespace.ExpandDirection.Down || h == DnnDevNamespace.ExpandDirection.Up)) { if (!this.Menu.RightToLeft) { k = m.width - (e.x + g) } } else { if (DnnDevControlsNamespace.Screen.ElementOverflowsBottom(m, a)) { if (h == DnnDevNamespace.ExpandDirection.Left || h == DnnDevNamespace.ExpandDirection.Right) { l = m.height - (e.y + i) } } } this.SetContainerPosition(k, l); this.Ease.SetSide(f); this.TextElement.className = "text expand" + this.Ease.GetSide() }; DnnDevItem.prototype.SetContainerPosition = function (a, b) { var c = b + this.GroupSettings.OffsetY; this.AnimationContainer.style.top = c + "px"; this.AnimationContainer.style.left = (a + this.GroupSettings.OffsetX) + "px" }; DnnDevItem.prototype.SetAttribute = function (b, a) { this.PostInitialize(); this.Attributes[b] = a; this.RecordState() }; DnnDevItem.prototype.SetImageUrl = function (a) { this.PostInitialize(); this.ImageUrl = a; this.ImageElement.src = a; this.RecordState() }; DnnDevItem.prototype.SetImageOverUrl = function (a) { this.PostInitialize(); this.ImageOverUrl = a; this.RecordState() }; DnnDevItem.prototype.GetAttribute = function (a) { return this.Attributes[a] }; DnnDevItem.prototype.DetermineExpandDirection = function () { if (this.GroupSettings.ExpandDirection != DnnDevNamespace.ExpandDirection.Auto) { return } if (this.Parent.Flow == DnnDevNamespace.ItemFlow.H) { if (this.Menu.RightToLeft) { this.GroupSettings.ExpandDirection = DnnDevNamespace.ExpandDirection.Left } else { this.GroupSettings.ExpandDirection = DnnDevNamespace.ExpandDirection.Right } } else { this.GroupSettings.ExpandDirection = DnnDevNamespace.ExpandDirection.Down } }; DnnDevItem.prototype.LoadConfiguration = function () { if (this.Menu.ItemData[this.ID]) { for (var a in this.Menu.ItemData[this.ID]) { this[a] = this.Menu.ItemData[this.ID][a] } } var b = this.Menu.DefaultGroupSettings; if (typeof this.GroupSettings.Flow == "undefined") { this.GroupSettings.Flow = b.Flow } this.Flow = this.GroupSettings.Flow; if (typeof this.GroupSettings.ExpandDirection == "undefined") { this.GroupSettings.ExpandDirection = b.ExpandDirection } if (typeof this.GroupSettings.OffsetX == "undefined") { this.GroupSettings.OffsetX = b.OffsetX } if (typeof this.GroupSettings.OffsetY == "undefined") { this.GroupSettings.OffsetY = b.OffsetY } if (!this.Enabled) { this.Disable() } }; DnnDevItem.prototype.HandleRightArrow = function () { if (this.Parent.Flow == DnnDevNamespace.ItemFlow.Horizontal) { this.FocusNextItem() } else { if (this.Items.length && this.GroupSettings.ExpandDirection == DnnDevNamespace.ExpandDirection.Right) { this.FocusFirstChild() } else { if (this.Parent.GroupSettings && this.Parent.GroupSettings.ExpandDirection == DnnDevNamespace.ExpandDirection.Left) { this.Parent.Focus() } else { if (this.Menu.OpenedItem) { this.Menu.OpenedItem.GetNextItem().Focus() } } } } }; DnnDevItem.prototype.HandleLeftArrow = function () { if (this.Parent.Flow == DnnDevNamespace.ItemFlow.Horizontal) { this.FocusPreviousItem() } else { if (this.Items.length && this.GroupSettings.ExpandDirection == DnnDevNamespace.ExpandDirection.Left) { this.FocusFirstChild() } else { if (this.Parent.GroupSettings && this.Parent.GroupSettings.ExpandDirection == DnnDevNamespace.ExpandDirection.Right) { this.Parent.Focus() } else { if (this.Menu.OpenedItem) { this.Menu.OpenedItem.GetPreviousItem().Focus() } } } } }; DnnDevItem.prototype.HandleUpArrow = function () { if (this.Parent.Flow == DnnDevNamespace.ItemFlow.H) { this.FocusPreviousItem() } else { this.FocusLastChild() } }; DnnDevItem.prototype.HandleDownArrow = function () { if (this.Parent.Flow == DnnDevNamespace.ItemFlow.H) { this.FocusNextItem() } else { this.FocusFirstChild() } }; DnnDevItem.prototype.GetNextItem = function () { if (this.Index == this.Parent.Items.length - 1) { return this.Parent.Items[0] } return this.Parent.Items[this.Index + 1] }; DnnDevItem.prototype.GetPreviousItem = function () { if (this.Index == 0) { return this.Parent.Items[this.Parent.Items.length - 1] } return this.Parent.Items[this.Index - 1] }; DnnDevItem.prototype.CanFocus = function () { return (!this.IsSeparator) && this.Enabled }; DnnDevItem.prototype.FocusFirstChild = function () { if (!this.Items.length) { return } var a = this.Items[0]; while (!a.CanFocus()) { a = a.GetNextItem(); if (a == this.Items[0]) { return } } a.Focus() }; DnnDevItem.prototype.FocusLastChild = function () { if (!this.Items.length) { return } var a = this.Items[this.Items.length - 1]; while (!a.CanFocus()) { a = a.GetPreviousItem(); if (this.Items.length - 1) { return } } a.Focus() }; DnnDevItem.prototype.FocusNextItem = function () { var a = this.GetNextItem(); while (!a.CanFocus()) { a = a.GetNextItem() } a.Focus() }; DnnDevItem.prototype.FocusPreviousItem = function () { var a = this.GetPreviousItem(); while (!a.CanFocus()) { a = a.GetPreviousItem() } a.Focus() }; DnnDevItem.prototype.RecordState = function (b) { if (this.ClientSide && !b) { return } var a = DnnDevControlsNamespace.JSON.stringify(this, this.InitialState, DnnDev.JSONIncludeDeep); if (a == "{}") { this.Menu.ItemState[this.ID] = "" } else { this.Menu.ItemState[this.ID] = '"' + this.ID + '":' + a } this.Menu.RecordState() }; DnnDevItem.prototype.AddItem = function () { this.Menu.AddItem.apply(this, arguments); this.Menu.FixItemWidth(this) }; function DnnDevItemState() { } DnnDevItemState = { Closed: 0, Open: 1, AboutToClose: 2, AboutToOpen: 3 }; if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } if (typeof (window.DnnDevControlsNamespace.Screen) == "undefined" || typeof (window.DnnDevControlsNamespace.Screen.Version) == null || window.DnnDevControlsNamespace.Screen.Version < 1.1) { window.DnnDevControlsNamespace.Screen = { Version: 1.1, GetViewPortSize: function () { var c = 0; var b = 0; var a = document.body; if (DnnDevControlsNamespace.Browser.StandardsMode && !DnnDevControlsNamespace.Browser.IsSafari) { a = document.documentElement } if (DnnDevControlsNamespace.Browser.IsMozilla && document.compatMode != "CSS1Compat") { a = document.body } if (window.innerWidth) { c = window.innerWidth; b = window.innerHeight } else { c = a.clientWidth; b = a.clientHeight } c += a.scrollLeft; b += a.scrollTop; return { width: c - 6, height: b - 6} }, GetElementPosition: function (g) { var f = null; var d = { x: 0, y: 0 }; var c; if (g.getBoundingClientRect) { c = g.getBoundingClientRect(); var b = document.documentElement.scrollTop || document.body.scrollTop; var a = document.documentElement.scrollLeft || document.body.scrollLeft; d.x = c.left + a - 2; d.y = c.top + b - 2; return d } else { if (document.getBoxObjectFor) { try { c = document.getBoxObjectFor(g); d.x = c.x - 2; d.y = c.y - 2 } catch (h) { } } else { d.x = g.offsetLeft; d.y = g.offsetTop; f = g.offsetParent; if (f != g) { while (f) { d.x += f.offsetLeft; d.y += f.offsetTop; f = f.offsetParent } } } } if (window.opera) { f = g.offsetParent; while (f && f.tagName != "BODY" && f.tagName != "HTML") { d.x -= f.scrollLeft; d.y -= f.scrollTop; f = f.offsetParent } } else { f = g.parentNode; while (f && f.tagName != "BODY" && f.tagName != "HTML") { d.x -= f.scrollLeft; d.y -= f.scrollTop; f = f.parentNode } } return d }, ElementOverflowsTop: function (a) { return this.GetElementPosition(a).y < 0 }, ElementOverflowsLeft: function (a) { return this.GetElementPosition(a).x < 0 }, ElementOverflowsBottom: function (c, b) { var a = this.GetElementPosition(b).y + DnnDevControlsNamespace.Box.GetOuterHeight(b); return a > c.height }, ElementOverflowsRight: function (c, b) { var a = this.GetElementPosition(b).x + DnnDevControlsNamespace.Box.GetOuterWidth(b); return a > c.width } } } if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } DnnDevControlsNamespace.ScrollButtonsPosition = { Left: 0, Middle: 1, Right: 2 }; DnnDevControlsNamespace.Scroll = function (c, b, a) { this.Owner = a; this.Element = c; this.IsH = b; this.ScrollButtonsPosition = a.ScrollButtonsPosition; this.ScrollPosition = a.ScrollPosition; this.PerTabScrolling = a.PerTabScrolling; this.ScrollOnHover = false; this.WrapNeeded = false; this.LeaveGapsForArrows = true; this.LeftArrowClass = "leftArrow"; this.LeftArrowClassDisabled = "leftArrowDisabled"; this.RightArrowClass = "rightArrow"; this.RightArrowClassDisabled = "rightArrowDisabled"; this.Initialized = false }; DnnDevControlsNamespace.Scroll.Create = function (c, b, a) { return new DnnDevControlsNamespace.Scroll(c, b, a) }; DnnDevControlsNamespace.Scroll.prototype.Initialize = function () { if (this.Initialized) { this.ApplyOverflow(); this.CalculateMinMaxPosition(); this.EvaluateArrowStatus(); return false } if ((this.Element.offsetWidth == 0 && !this.IsH) || (this.Element.offsetHeight == 0 && this.IsH)) { return false } this.Initialized = true; this.ScrollAmount = 2; this.Direction = 0; if (this.WrapNeeded) { var a = this.CreateScrollWrap() } this.ApplyOverflow(); this.Element.style.position = "relative"; this.AttachArrows(); this.CalculateMinMaxPosition(); if (this.PerTabScrolling) { this.CalculateInitialTab() } this.AttachScrollMethods(); this.EvaluateArrowStatus(); this.AttachEventHandlers(); this.ScrollTo(this.ScrollPosition); this.ApplyOverflow(); return a }; DnnDevControlsNamespace.Scroll.prototype.ApplyOverflow = function () { if (DnnDevControlsNamespace.Browser.IsIE) { this.Element.parentNode.style.overflow = "visible"; if (this.IsH) { this.Element.parentNode.style.overflowX = ""; this.Element.parentNode.style.overflowY = "hidden" } else { this.Element.parentNode.style.overflowX = "hidden"; this.Element.parentNode.style.overflowY = "hidden" } } else { this.Element.parentNode.style.overflow = "hidden" } if (!this.ScrollNeeded()) { this.Element.parentNode.style.overflow = "visible"; this.Element.parentNode.style.overflowX = "visible"; this.Element.parentNode.style.overflowY = "visible" } }; DnnDevControlsNamespace.Scroll.prototype.ResizeHandler = function () { if (this.Disposed) { return } if (!this.Initialized) { this.Initialize() } if (!this.Initialized) { return } if (!this.Element.offsetHeight || !this.Element.offsetWidth) { return } this.CalculateMinMaxPosition(); if (this.Element.offsetWidth < this.Element.parentNode.offsetWidth) { this.ScrollTo(0) } var b = parseInt(this.IsH ? this.Element.style.top : this.Element.style.left); if (isNaN(b)) { b = 0 } var a = this }; DnnDevControlsNamespace.Scroll.prototype.AttachEventHandlers = function () { var b = this.Element; var a = this; this.resizeClosure = function () { a.ResizeHandler() }; if (window.addEventListener) { window.addEventListener("resize", this.resizeClosure, false) } else { window.attachEvent("onresize", this.resizeClosure) } }; DnnDevControlsNamespace.Scroll.prototype.Dispose = function () { this.Disposed = true; this.Element = null; clearTimeout(this.intervalPointer); if (window.removeEventListener) { window.removeEventListener("resize", this.resizeClosure, false) } else { window.detachEvent("onresize", this.resizeClosure) } }; DnnDevControlsNamespace.Scroll.prototype.AttachArrows = function () { var b = this.CreateArrow("&laquo;", 1, this.LeftArrowClass); var a = this.CreateArrow("&raquo;", -1, this.RightArrowClass); this.LeftArrow = b; this.RightArrow = a; if (this.IsH) { b.style.left = "0px"; a.style.left = "0px"; if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Middle) { b.style.top = "0px"; a.style.bottom = "0px" } else { if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Left) { b.style.top = "0px"; a.style.top = b.offsetHeight + "px" } else { a.style.bottom = "0px"; b.style.bottom = b.offsetHeight + "px" } } } else { b.style.top = "0px"; a.style.top = "0px"; if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Middle) { b.style.left = "-1px"; a.style.right = "-1px" } else { if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Left) { b.style.left = "-1px"; a.style.left = (b.offsetWidth - 1) + "px" } else { a.style.right = "-1px"; b.style.right = (a.offsetWidth - 1) + "px" } } } }; DnnDevControlsNamespace.Scroll.prototype.CreateArrow = function (a, e, d) { var c = document.createElement("a"); c.href = "#"; c.className = d; c.innerHTML = "&nbsp;"; c.style.zIndex = "2000"; this.Element.parentNode.appendChild(c); var b = this; c.ScrollDirection = e; if (this.ScrollOnHover) { c.onmousedown = function () { if (this.disabled) { return false } b.ScrollAmount = 3; return true }; c.onmouseup = function () { b.ScrollAmount = 1 }; c.onmouseover = function () { if (this.disabled) { return false } b.ScrollAmount = 1; b.Scroll(this.ScrollDirection); return true }; c.onmouseout = function () { b.scrollAmount = 0; b.Stop(); return false } } else { c.onmousedown = function () { b.Scroll(this.ScrollDirection) }; c.onmouseup = function () { b.Stop() } } c.onclick = function () { return false }; return c }; DnnDevControlsNamespace.Scroll.prototype.SetHeight = function (a) { if (parseInt(a) == 0) { return } this.Element.parentNode.style.height = a; this.Initialize() }; DnnDevControlsNamespace.Scroll.prototype.SetWidth = function (a) { if (parseInt(a) == 0) { return } this.Element.parentNode.style.width = a; this.Initialize() }; DnnDevControlsNamespace.Scroll.prototype.CreateScrollWrap = function () { var e = document.createElement("div"); var d = this.Element.parentNode; e.appendChild(this.Element); e.style.position = "relative"; e.align = "left"; d.appendChild(e); if (this.IsH) { e.style.styleFloat = "left"; e.style.cssFloat = "left"; this.Element.style.display = "none"; e.style.height = e.parentNode.parentNode.offsetHeight + "px"; this.Element.style.display = "block" } else { var b = 0; for (var c = 0; c < this.Element.childNodes.length; c++) { var a = this.Element.childNodes[c]; if (!a.tagName) { continue } b += a.offsetWidth } this.Element.style.width = (b + 3) + "px" } return e }; DnnDevControlsNamespace.Scroll.prototype.CalculateMinMaxPosition = function () { if (!this.Initialized) { return } if (this.IsH) { var c = this.Element.parentNode.offsetHeight - this.Element.offsetHeight; var b = this.LeftArrow.offsetHeight; var a = this.RightArrow.offsetHeight } else { var c = this.Element.parentNode.offsetWidth - this.Element.offsetWidth; var b = this.LeftArrow.offsetWidth; var a = this.RightArrow.offsetWidth } if (!this.LeaveGapsForArrows) { b = 0; a = 0 } this.MaxScrollPosition = 0; this.MinScrollPosition = c - a - b; if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Middle) { this.Offset = b } else { if (this.ScrollButtonsPosition == DnnDevControlsNamespace.ScrollButtonsPosition.Left) { this.Offset = b + a } else { this.Offset = 0 } } }; DnnDevControlsNamespace.Scroll.prototype.CalculateInitialTab = function () { var a = this.Element.getElementsByTagName("li"); if (a.length > 0) { var b = 0; while (this.ScrollPosition < -(this.IsH ? a[b].offsetTop : a[b].offsetLeft)) { b++ } this.CurrentTab = b } }; DnnDevControlsNamespace.Scroll.prototype.AttachScrollMethods = function () { if (this.PerTabScrolling) { this.Scroll = DnnDevControlsNamespace.Scroll.StartPerTabScroll; this.Stop = DnnDevControlsNamespace.Scroll.StopPerTabScroll } else { this.Scroll = DnnDevControlsNamespace.Scroll.StartSmoothScroll; this.Stop = DnnDevControlsNamespace.Scroll.StopSmoothScroll } }; DnnDevControlsNamespace.Scroll.prototype.EvaluateArrowStatus = function () { var a = !(this.ScrollPosition > this.MinScrollPosition); var b = !(this.ScrollPosition < this.MaxScrollPosition); this.RightArrow.disabled = a; this.LeftArrow.disabled = b; if (b) { if (this.LeftArrow.className != this.LeftArrowClassDisabled) { this.LeftArrow.className = this.LeftArrowClassDisabled } } else { if (this.LeftArrow.className != this.LeftArrowClass) { this.LeftArrow.className = this.LeftArrowClass } } if (a) { if (this.RightArrow.className != this.RightArrowClassDisabled) { this.RightArrow.className = this.RightArrowClassDisabled } } else { if (this.RightArrow.className != this.RightArrowClass) { this.RightArrow.className = this.RightArrowClass } } }; DnnDevControlsNamespace.Scroll.StartSmoothScroll = function (a) { this.Stop(); this.Direction = a; var c = this; var b = function () { c.ScrollBy(c.Direction * c.ScrollAmount) }; b(); this.scrollInterval = setInterval(b, 10) }; DnnDevControlsNamespace.Scroll.prototype.ScrollTo = function (a) { a = Math.max(a, this.MinScrollPosition); a = Math.min(a, this.MaxScrollPosition); a += this.Offset; if (this.IsH) { this.Element.style.top = a + "px" } else { this.Element.style.left = a + "px" } this.Owner.ScrollPosition = this.ScrollPosition = a - this.Offset; this.EvaluateArrowStatus() }; DnnDevControlsNamespace.Scroll.prototype.ScrollBy = function (b) { var a = this.ScrollPosition; this.ScrollTo(a + b) }; DnnDevControlsNamespace.Scroll.StartPerTabScroll = function (c) { this.Stop(); var b = this.Element.getElementsByTagName("li"); var a = this.CurrentTab - c; if (a < 0 || a > b.length) { return } var e = c == -1 ? this.CurrentTab : a; this.CurrentTab = a; if (this.IsH) { var d = b[e].offsetHeight } else { var d = b[e].offsetWidth } this.ScrollBy(d * c); this.EvaluateArrowStatus() }; DnnDevControlsNamespace.Scroll.prototype.ScrollNeeded = function () { return true; if (this.IsH) { return this.Element.offsetHeight > this.Element.parentNode.offsetHeight } return this.Element.offsetWidth > this.Element.parentNode.offsetWidth }; DnnDevControlsNamespace.Scroll.StopSmoothScroll = function (a) { if (this.OnScrollStop) { this.OnScrollStop() } clearInterval(this.scrollInterval) }; DnnDevControlsNamespace.Scroll.StopPerTabScroll = function (a) { if (this.OnScrollStop) { this.OnScrollStop() } }; if (typeof window.DnnDevControlsNamespace == "undefined") { window.DnnDevControlsNamespace = {} } DnnDevControlsNamespace.Ticker = function (a) { this.Listener = a; this.IntervalPointer = null }; DnnDevControlsNamespace.Ticker.prototype = { Configure: function (a) { this.Duration = a.Duration; this.Interval = 16 }, Start: function () { clearInterval(this.IntervalPointer); this.TimeElapsed = 0; var b = this; var a = function () { b.Tick() }; this.Tick(); this.IntervalPointer = setInterval(a, this.Interval) }, Tick: function () { this.TimeElapsed += this.Interval; this.Listener.OnTick(this.TimeElapsed); if (this.TimeElapsed >= this.Duration) { this.Stop() } }, Stop: function () { if (this.IntervalPointer) { this.Listener.OnTickEnd(); clearInterval(this.IntervalPointer); this.IntervalPointer = null } } }; function ieHoverFix(g, f) { var b = document.getElementById(g); var a = b.getElementsByTagName("ul"); for (j = 0; j < a.length; j++) { a[j].innerHTML = ('<iframe src="javascript:false;" scrolling="no" frameborder="0"></iframe>' + a[j].innerHTML); var c = a[j].firstChild; c.style.width = a[j].offsetWidth + "px"; c.style.height = a[j].offsetHeight + "px" } var e = b.getElementsByTagName("li"); for (var d = 0; d < e.length; d++) { if (e[d]) { e[d].onmouseover = function () { this.className += " sfhover" }; e[d].onmouseout = function () { this.className = this.className.replace(new RegExp("( ?|^)sfhover\\b"), "") } } } } function placeObject(c, d) { var a = findPosX(c.parentElement); var e = findPosY(c.parentElement); var b = c.parentElement.offsetWidth; if (d == "True") { c.parentElement.removeChild(c) } c.style.left = a; c.style.top = e; c.style.width = b; if (d == "True") { document.body.appendChild(c) } } function findPosX(a) { var b = 0; if (a.offsetParent) { while (a.offsetParent) { b += a.offsetLeft; a = a.offsetParent } } else { if (a.x) { b += a.x } } return b } function findPosY(b) { var a = 0; if (b.offsetParent) { while (b.offsetParent) { a += b.offsetTop; b = b.offsetParent } } else { if (b.y) { a += b.y } } return a };