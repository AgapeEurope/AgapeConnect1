'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Documents
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
	Partial Public Class DocumentsDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAP_Documents_Doc(instance As AP_Documents_Doc)
    End Sub
    Partial Private Sub UpdateAP_Documents_Doc(instance As AP_Documents_Doc)
    End Sub
    Partial Private Sub DeleteAP_Documents_Doc(instance As AP_Documents_Doc)
    End Sub
    Partial Private Sub InsertAP_Documents_Folder(instance As AP_Documents_Folder)
    End Sub
    Partial Private Sub UpdateAP_Documents_Folder(instance As AP_Documents_Folder)
    End Sub
    Partial Private Sub DeleteAP_Documents_Folder(instance As AP_Documents_Folder)
    End Sub
    Partial Private Sub InsertAP_Documents_TagMeta(instance As AP_Documents_TagMeta)
    End Sub
    Partial Private Sub UpdateAP_Documents_TagMeta(instance As AP_Documents_TagMeta)
    End Sub
    Partial Private Sub DeleteAP_Documents_TagMeta(instance As AP_Documents_TagMeta)
    End Sub
    Partial Private Sub InsertAP_Documents_Tag(instance As AP_Documents_Tag)
    End Sub
    Partial Private Sub UpdateAP_Documents_Tag(instance As AP_Documents_Tag)
    End Sub
    Partial Private Sub DeleteAP_Documents_Tag(instance As AP_Documents_Tag)
    End Sub
    Partial Private Sub InsertAP_Documents_Comment(instance As AP_Documents_Comment)
    End Sub
    Partial Private Sub UpdateAP_Documents_Comment(instance As AP_Documents_Comment)
    End Sub
    Partial Private Sub DeleteAP_Documents_Comment(instance As AP_Documents_Comment)
    End Sub
    Partial Private Sub InsertAP_Documents_Version(instance As AP_Documents_Version)
    End Sub
    Partial Private Sub UpdateAP_Documents_Version(instance As AP_Documents_Version)
    End Sub
    Partial Private Sub DeleteAP_Documents_Version(instance As AP_Documents_Version)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property AP_Documents_Docs() As System.Data.Linq.Table(Of AP_Documents_Doc)
			Get
				Return Me.GetTable(Of AP_Documents_Doc)
			End Get
		End Property
		
		Public ReadOnly Property AP_Documents_Folders() As System.Data.Linq.Table(Of AP_Documents_Folder)
			Get
				Return Me.GetTable(Of AP_Documents_Folder)
			End Get
		End Property
		
		Public ReadOnly Property AP_Documents_TagMetas() As System.Data.Linq.Table(Of AP_Documents_TagMeta)
			Get
				Return Me.GetTable(Of AP_Documents_TagMeta)
			End Get
		End Property
		
		Public ReadOnly Property AP_Documents_Tags() As System.Data.Linq.Table(Of AP_Documents_Tag)
			Get
				Return Me.GetTable(Of AP_Documents_Tag)
			End Get
		End Property
		
		Public ReadOnly Property AP_Documents_Comments() As System.Data.Linq.Table(Of AP_Documents_Comment)
			Get
				Return Me.GetTable(Of AP_Documents_Comment)
			End Get
		End Property
		
		Public ReadOnly Property AP_Documents_Versions() As System.Data.Linq.Table(Of AP_Documents_Version)
			Get
				Return Me.GetTable(Of AP_Documents_Version)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_Docs")>  _
	Partial Public Class AP_Documents_Doc
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DocId As Long
		
		Private _FolderId As Long
		
		Private _DisplayName As String
		
		Private _FileId As System.Nullable(Of Integer)
		
		Private _Author As String
		
		Private _Description As String
		
		Private _CustomIcon As System.Nullable(Of Integer)
		
		Private _Permissions As String
		
		Private _Keywords As String
		
		Private _VersionNumber As String
		
		Private _LinkType As String
		
		Private _LinkValue As String
		
		Private _AP_Documents_TagMetas As EntitySet(Of AP_Documents_TagMeta)
		
		Private _AP_Documents_Comments As EntitySet(Of AP_Documents_Comment)
		
		Private _AP_Documents_Versions As EntityRef(Of AP_Documents_Version)
		
		Private _AP_Documents_Folder As EntityRef(Of AP_Documents_Folder)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnFolderIdChanging(value As Long)
    End Sub
    Partial Private Sub OnFolderIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnFileIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFileIdChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCustomIconChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomIconChanged()
    End Sub
    Partial Private Sub OnPermissionsChanging(value As String)
    End Sub
    Partial Private Sub OnPermissionsChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnVersionNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVersionNumberChanged()
    End Sub
    Partial Private Sub OnLinkTypeChanging(value As String)
    End Sub
    Partial Private Sub OnLinkTypeChanged()
    End Sub
    Partial Private Sub OnLinkValueChanging(value As String)
    End Sub
    Partial Private Sub OnLinkValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_TagMetas = New EntitySet(Of AP_Documents_TagMeta)(AddressOf Me.attach_AP_Documents_TagMetas, AddressOf Me.detach_AP_Documents_TagMetas)
			Me._AP_Documents_Comments = New EntitySet(Of AP_Documents_Comment)(AddressOf Me.attach_AP_Documents_Comments, AddressOf Me.detach_AP_Documents_Comments)
			Me._AP_Documents_Versions = CType(Nothing, EntityRef(Of AP_Documents_Version))
			Me._AP_Documents_Folder = CType(Nothing, EntityRef(Of AP_Documents_Folder))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DocId() As Long
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FolderId", DbType:="BigInt NOT NULL")>  _
		Public Property FolderId() As Long
			Get
				Return Me._FolderId
			End Get
			Set
				If ((Me._FolderId = value)  _
							= false) Then
					If Me._AP_Documents_Folder.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFolderIdChanging(value)
					Me.SendPropertyChanging
					Me._FolderId = value
					Me.SendPropertyChanged("FolderId")
					Me.OnFolderIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property DisplayName() As String
			Get
				Return Me._DisplayName
			End Get
			Set
				If (String.Equals(Me._DisplayName, value) = false) Then
					Me.OnDisplayNameChanging(value)
					Me.SendPropertyChanging
					Me._DisplayName = value
					Me.SendPropertyChanged("DisplayName")
					Me.OnDisplayNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileId", DbType:="Int")>  _
		Public Property FileId() As System.Nullable(Of Integer)
			Get
				Return Me._FileId
			End Get
			Set
				If (Me._FileId.Equals(value) = false) Then
					Me.OnFileIdChanging(value)
					Me.SendPropertyChanging
					Me._FileId = value
					Me.SendPropertyChanged("FileId")
					Me.OnFileIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="NVarChar(100)")>  _
		Public Property Author() As String
			Get
				Return Me._Author
			End Get
			Set
				If (String.Equals(Me._Author, value) = false) Then
					Me.OnAuthorChanging(value)
					Me.SendPropertyChanging
					Me._Author = value
					Me.SendPropertyChanged("Author")
					Me.OnAuthorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomIcon", DbType:="Int")>  _
		Public Property CustomIcon() As System.Nullable(Of Integer)
			Get
				Return Me._CustomIcon
			End Get
			Set
				If (Me._CustomIcon.Equals(value) = false) Then
					Me.OnCustomIconChanging(value)
					Me.SendPropertyChanging
					Me._CustomIcon = value
					Me.SendPropertyChanged("CustomIcon")
					Me.OnCustomIconChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permissions", DbType:="NVarChar(200)")>  _
		Public Property Permissions() As String
			Get
				Return Me._Permissions
			End Get
			Set
				If (String.Equals(Me._Permissions, value) = false) Then
					Me.OnPermissionsChanging(value)
					Me.SendPropertyChanging
					Me._Permissions = value
					Me.SendPropertyChanged("Permissions")
					Me.OnPermissionsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="nvarchar(250)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNumber", DbType:="nvarchar(10)")>  _
		Public Property VersionNumber() As String
			Get
				Return Me._VersionNumber
			End Get
			Set
				If (String.Equals(Me._VersionNumber, value) = false) Then
					Me.OnVersionNumberChanging(value)
					Me.SendPropertyChanging
					Me._VersionNumber = value
					Me.SendPropertyChanged("VersionNumber")
					Me.OnVersionNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkType", DbType:="nvarchar(10)")>  _
		Public Property LinkType() As String
			Get
				Return Me._LinkType
			End Get
			Set
				If (String.Equals(Me._LinkType, value) = false) Then
					Me.OnLinkTypeChanging(value)
					Me.SendPropertyChanging
					Me._LinkType = value
					Me.SendPropertyChanged("LinkType")
					Me.OnLinkTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkValue", DbType:="nvarchar(Max)")>  _
		Public Property LinkValue() As String
			Get
				Return Me._LinkValue
			End Get
			Set
				If (String.Equals(Me._LinkValue, value) = false) Then
					Me.OnLinkValueChanging(value)
					Me.SendPropertyChanging
					Me._LinkValue = value
					Me.SendPropertyChanged("LinkValue")
					Me.OnLinkValueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_TagMeta", Storage:="_AP_Documents_TagMetas", ThisKey:="DocId", OtherKey:="DocId")>  _
		Public Property AP_Documents_TagMetas() As EntitySet(Of AP_Documents_TagMeta)
			Get
				Return Me._AP_Documents_TagMetas
			End Get
			Set
				Me._AP_Documents_TagMetas.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_Comment", Storage:="_AP_Documents_Comments", ThisKey:="DocId", OtherKey:="DocId")>  _
		Public Property AP_Documents_Comments() As EntitySet(Of AP_Documents_Comment)
			Get
				Return Me._AP_Documents_Comments
			End Get
			Set
				Me._AP_Documents_Comments.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_Version", Storage:="_AP_Documents_Versions", ThisKey:="FileId", OtherKey:="FileId", IsUnique:=true, IsForeignKey:=false)>  _
		Public Property AP_Documents_Versions() As AP_Documents_Version
			Get
				Return Me._AP_Documents_Versions.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Version = Me._AP_Documents_Versions.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Versions.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Versions.Entity = Nothing
						previousValue.AP_Documents_Doc = Nothing
					End If
					Me._AP_Documents_Versions.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.AP_Documents_Doc = Me
					End If
					Me.SendPropertyChanged("AP_Documents_Versions")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Folder_AP_Documents_Doc", Storage:="_AP_Documents_Folder", ThisKey:="FolderId", OtherKey:="FolderId", IsForeignKey:=true)>  _
		Public Property AP_Documents_Folder() As AP_Documents_Folder
			Get
				Return Me._AP_Documents_Folder.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Folder = Me._AP_Documents_Folder.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Folder.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Folder.Entity = Nothing
						previousValue.AP_Documents_Docs.Remove(Me)
					End If
					Me._AP_Documents_Folder.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_Documents_Docs.Add(Me)
						Me._FolderId = value.FolderId
					Else
						Me._FolderId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("AP_Documents_Folder")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_Documents_TagMetas(ByVal entity As AP_Documents_TagMeta)
			Me.SendPropertyChanging
			entity.AP_Documents_Doc = Me
		End Sub
		
		Private Sub detach_AP_Documents_TagMetas(ByVal entity As AP_Documents_TagMeta)
			Me.SendPropertyChanging
			entity.AP_Documents_Doc = Nothing
		End Sub
		
		Private Sub attach_AP_Documents_Comments(ByVal entity As AP_Documents_Comment)
			Me.SendPropertyChanging
			entity.AP_Documents_Doc = Me
		End Sub
		
		Private Sub detach_AP_Documents_Comments(ByVal entity As AP_Documents_Comment)
			Me.SendPropertyChanging
			entity.AP_Documents_Doc = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_Folders")>  _
	Partial Public Class AP_Documents_Folder
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FolderId As Long
		
		Private _Name As String
		
		Private _Description As String
		
		Private _ParentFolder As Long
		
		Private _PortalId As Integer
		
		Private _CustomIcon As System.Nullable(Of Integer)
		
		Private _Permission As String
		
		Private _AP_Documents_Docs As EntitySet(Of AP_Documents_Doc)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFolderIdChanging(value As Long)
    End Sub
    Partial Private Sub OnFolderIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnParentFolderChanging(value As Long)
    End Sub
    Partial Private Sub OnParentFolderChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnCustomIconChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomIconChanged()
    End Sub
    Partial Private Sub OnPermissionChanging(value As String)
    End Sub
    Partial Private Sub OnPermissionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_Docs = New EntitySet(Of AP_Documents_Doc)(AddressOf Me.attach_AP_Documents_Docs, AddressOf Me.detach_AP_Documents_Docs)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FolderId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FolderId() As Long
			Get
				Return Me._FolderId
			End Get
			Set
				If ((Me._FolderId = value)  _
							= false) Then
					Me.OnFolderIdChanging(value)
					Me.SendPropertyChanging
					Me._FolderId = value
					Me.SendPropertyChanged("FolderId")
					Me.OnFolderIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentFolder", DbType:="BigInt")>  _
		Public Property ParentFolder() As Long
			Get
				Return Me._ParentFolder
			End Get
			Set
				If ((Me._ParentFolder = value)  _
							= false) Then
					Me.OnParentFolderChanging(value)
					Me.SendPropertyChanging
					Me._ParentFolder = value
					Me.SendPropertyChanged("ParentFolder")
					Me.OnParentFolderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
		Public Property PortalId() As Integer
			Get
				Return Me._PortalId
			End Get
			Set
				If ((Me._PortalId = value)  _
							= false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomIcon", DbType:="Int")>  _
		Public Property CustomIcon() As System.Nullable(Of Integer)
			Get
				Return Me._CustomIcon
			End Get
			Set
				If (Me._CustomIcon.Equals(value) = false) Then
					Me.OnCustomIconChanging(value)
					Me.SendPropertyChanging
					Me._CustomIcon = value
					Me.SendPropertyChanged("CustomIcon")
					Me.OnCustomIconChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permission", DbType:="NVarChar(200)")>  _
		Public Property Permission() As String
			Get
				Return Me._Permission
			End Get
			Set
				If (String.Equals(Me._Permission, value) = false) Then
					Me.OnPermissionChanging(value)
					Me.SendPropertyChanging
					Me._Permission = value
					Me.SendPropertyChanged("Permission")
					Me.OnPermissionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Folder_AP_Documents_Doc", Storage:="_AP_Documents_Docs", ThisKey:="FolderId", OtherKey:="FolderId")>  _
		Public Property AP_Documents_Docs() As EntitySet(Of AP_Documents_Doc)
			Get
				Return Me._AP_Documents_Docs
			End Get
			Set
				Me._AP_Documents_Docs.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_Documents_Docs(ByVal entity As AP_Documents_Doc)
			Me.SendPropertyChanging
			entity.AP_Documents_Folder = Me
		End Sub
		
		Private Sub detach_AP_Documents_Docs(ByVal entity As AP_Documents_Doc)
			Me.SendPropertyChanging
			entity.AP_Documents_Folder = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_TagMeta")>  _
	Partial Public Class AP_Documents_TagMeta
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TagMetaId As Long
		
		Private _DocId As Long
		
		Private _TagId As Integer
		
		Private _AP_Documents_Doc As EntityRef(Of AP_Documents_Doc)
		
		Private _AP_Documents_Tag As EntityRef(Of AP_Documents_Tag)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagMetaIdChanging(value As Long)
    End Sub
    Partial Private Sub OnTagMetaIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_Doc = CType(Nothing, EntityRef(Of AP_Documents_Doc))
			Me._AP_Documents_Tag = CType(Nothing, EntityRef(Of AP_Documents_Tag))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagMetaId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property TagMetaId() As Long
			Get
				Return Me._TagMetaId
			End Get
			Set
				If ((Me._TagMetaId = value)  _
							= false) Then
					Me.OnTagMetaIdChanging(value)
					Me.SendPropertyChanging
					Me._TagMetaId = value
					Me.SendPropertyChanged("TagMetaId")
					Me.OnTagMetaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="BigInt NOT NULL")>  _
		Public Property DocId() As Long
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					If Me._AP_Documents_Doc.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagId", DbType:="Int NOT NULL")>  _
		Public Property TagId() As Integer
			Get
				Return Me._TagId
			End Get
			Set
				If ((Me._TagId = value)  _
							= false) Then
					If Me._AP_Documents_Tag.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnTagIdChanging(value)
					Me.SendPropertyChanging
					Me._TagId = value
					Me.SendPropertyChanged("TagId")
					Me.OnTagIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_TagMeta", Storage:="_AP_Documents_Doc", ThisKey:="DocId", OtherKey:="DocId", IsForeignKey:=true)>  _
		Public Property AP_Documents_Doc() As AP_Documents_Doc
			Get
				Return Me._AP_Documents_Doc.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Doc = Me._AP_Documents_Doc.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Doc.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Doc.Entity = Nothing
						previousValue.AP_Documents_TagMetas.Remove(Me)
					End If
					Me._AP_Documents_Doc.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_Documents_TagMetas.Add(Me)
						Me._DocId = value.DocId
					Else
						Me._DocId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("AP_Documents_Doc")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Tag_AP_Documents_TagMeta", Storage:="_AP_Documents_Tag", ThisKey:="TagId", OtherKey:="TagId", IsForeignKey:=true)>  _
		Public Property AP_Documents_Tag() As AP_Documents_Tag
			Get
				Return Me._AP_Documents_Tag.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Tag = Me._AP_Documents_Tag.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Tag.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Tag.Entity = Nothing
						previousValue.AP_Documents_TagMetas.Remove(Me)
					End If
					Me._AP_Documents_Tag.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_Documents_TagMetas.Add(Me)
						Me._TagId = value.TagId
					Else
						Me._TagId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_Documents_Tag")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_Tags")>  _
	Partial Public Class AP_Documents_Tag
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _TagId As Integer
		
		Private _TagName As String
		
		Private _PortalId As System.Nullable(Of Integer)
		
		Private _CustomIcon As System.Nullable(Of Integer)
		
		Private _AP_Documents_TagMetas As EntitySet(Of AP_Documents_TagMeta)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIdChanged()
    End Sub
    Partial Private Sub OnTagNameChanging(value As String)
    End Sub
    Partial Private Sub OnTagNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnCustomIconChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomIconChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_TagMetas = New EntitySet(Of AP_Documents_TagMeta)(AddressOf Me.attach_AP_Documents_TagMetas, AddressOf Me.detach_AP_Documents_TagMetas)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property TagId() As Integer
			Get
				Return Me._TagId
			End Get
			Set
				If ((Me._TagId = value)  _
							= false) Then
					Me.OnTagIdChanging(value)
					Me.SendPropertyChanging
					Me._TagId = value
					Me.SendPropertyChanged("TagId")
					Me.OnTagIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagName", DbType:="NVarChar(100)")>  _
		Public Property TagName() As String
			Get
				Return Me._TagName
			End Get
			Set
				If (String.Equals(Me._TagName, value) = false) Then
					Me.OnTagNameChanging(value)
					Me.SendPropertyChanging
					Me._TagName = value
					Me.SendPropertyChanged("TagName")
					Me.OnTagNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
		Public Property PortalId() As System.Nullable(Of Integer)
			Get
				Return Me._PortalId
			End Get
			Set
				If (Me._PortalId.Equals(value) = false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomIcon", DbType:="Int")>  _
		Public Property CustomIcon() As System.Nullable(Of Integer)
			Get
				Return Me._CustomIcon
			End Get
			Set
				If (Me._CustomIcon.Equals(value) = false) Then
					Me.OnCustomIconChanging(value)
					Me.SendPropertyChanging
					Me._CustomIcon = value
					Me.SendPropertyChanged("CustomIcon")
					Me.OnCustomIconChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Tag_AP_Documents_TagMeta", Storage:="_AP_Documents_TagMetas", ThisKey:="TagId", OtherKey:="TagId")>  _
		Public Property AP_Documents_TagMetas() As EntitySet(Of AP_Documents_TagMeta)
			Get
				Return Me._AP_Documents_TagMetas
			End Get
			Set
				Me._AP_Documents_TagMetas.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_Documents_TagMetas(ByVal entity As AP_Documents_TagMeta)
			Me.SendPropertyChanging
			entity.AP_Documents_Tag = Me
		End Sub
		
		Private Sub detach_AP_Documents_TagMetas(ByVal entity As AP_Documents_TagMeta)
			Me.SendPropertyChanging
			entity.AP_Documents_Tag = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_Comments")>  _
	Partial Public Class AP_Documents_Comment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CommentId As Long
		
		Private _DocId As Long
		
		Private _UserId As Integer
		
		Private _Comment As String
		
		Private _CreatedDate As System.Nullable(Of Date)
		
		Private _Display As Boolean
		
		Private _AP_Documents_Doc As EntityRef(Of AP_Documents_Doc)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentIdChanging(value As Long)
    End Sub
    Partial Private Sub OnCommentIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnDisplayChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDisplayChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_Doc = CType(Nothing, EntityRef(Of AP_Documents_Doc))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property CommentId() As Long
			Get
				Return Me._CommentId
			End Get
			Set
				If ((Me._CommentId = value)  _
							= false) Then
					Me.OnCommentIdChanging(value)
					Me.SendPropertyChanging
					Me._CommentId = value
					Me.SendPropertyChanged("CommentId")
					Me.OnCommentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="BigInt NOT NULL")>  _
		Public Property DocId() As Long
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					If Me._AP_Documents_Doc.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL")>  _
		Public Property UserId() As Integer
			Get
				Return Me._UserId
			End Get
			Set
				If ((Me._UserId = value)  _
							= false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(MAX)")>  _
		Public Property Comment() As String
			Get
				Return Me._Comment
			End Get
			Set
				If (String.Equals(Me._Comment, value) = false) Then
					Me.OnCommentChanging(value)
					Me.SendPropertyChanging
					Me._Comment = value
					Me.SendPropertyChanged("Comment")
					Me.OnCommentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
		Public Property CreatedDate() As System.Nullable(Of Date)
			Get
				Return Me._CreatedDate
			End Get
			Set
				If (Me._CreatedDate.Equals(value) = false) Then
					Me.OnCreatedDateChanging(value)
					Me.SendPropertyChanging
					Me._CreatedDate = value
					Me.SendPropertyChanged("CreatedDate")
					Me.OnCreatedDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Display", DbType:="Bit NOT NULL")>  _
		Public Property Display() As Boolean
			Get
				Return Me._Display
			End Get
			Set
				If ((Me._Display = value)  _
							= false) Then
					Me.OnDisplayChanging(value)
					Me.SendPropertyChanging
					Me._Display = value
					Me.SendPropertyChanged("Display")
					Me.OnDisplayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_Comment", Storage:="_AP_Documents_Doc", ThisKey:="DocId", OtherKey:="DocId", IsForeignKey:=true)>  _
		Public Property AP_Documents_Doc() As AP_Documents_Doc
			Get
				Return Me._AP_Documents_Doc.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Doc = Me._AP_Documents_Doc.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Doc.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Doc.Entity = Nothing
						previousValue.AP_Documents_Comments.Remove(Me)
					End If
					Me._AP_Documents_Doc.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_Documents_Comments.Add(Me)
						Me._DocId = value.DocId
					Else
						Me._DocId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("AP_Documents_Doc")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_Documents_Versions")>  _
	Partial Public Class AP_Documents_Version
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _VersionId As Long
		
		Private _DocId As Long
		
		Private _FileId As System.Nullable(Of Integer)
		
		Private _VersionNumber As String
		
		Private _DisplayName As String
		
		Private _AP_Documents_Doc As EntityRef(Of AP_Documents_Doc)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVersionIdChanging(value As Long)
    End Sub
    Partial Private Sub OnVersionIdChanged()
    End Sub
    Partial Private Sub OnDocIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDocIdChanged()
    End Sub
    Partial Private Sub OnFileIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFileIdChanged()
    End Sub
    Partial Private Sub OnVersionNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVersionNumberChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_Documents_Doc = CType(Nothing, EntityRef(Of AP_Documents_Doc))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property VersionId() As Long
			Get
				Return Me._VersionId
			End Get
			Set
				If ((Me._VersionId = value)  _
							= false) Then
					Me.OnVersionIdChanging(value)
					Me.SendPropertyChanging
					Me._VersionId = value
					Me.SendPropertyChanged("VersionId")
					Me.OnVersionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocId", DbType:="BigInt NOT NULL")>  _
		Public Property DocId() As Long
			Get
				Return Me._DocId
			End Get
			Set
				If ((Me._DocId = value)  _
							= false) Then
					Me.OnDocIdChanging(value)
					Me.SendPropertyChanging
					Me._DocId = value
					Me.SendPropertyChanged("DocId")
					Me.OnDocIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileId", DbType:="Int")>  _
		Public Property FileId() As System.Nullable(Of Integer)
			Get
				Return Me._FileId
			End Get
			Set
				If (Me._FileId.Equals(value) = false) Then
					If Me._AP_Documents_Doc.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFileIdChanging(value)
					Me.SendPropertyChanging
					Me._FileId = value
					Me.SendPropertyChanged("FileId")
					Me.OnFileIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNumber", DbType:="NVarChar(10)")>  _
		Public Property VersionNumber() As String
			Get
				Return Me._VersionNumber
			End Get
			Set
				If (String.Equals(Me._VersionNumber, value) = false) Then
					Me.OnVersionNumberChanging(value)
					Me.SendPropertyChanging
					Me._VersionNumber = value
					Me.SendPropertyChanged("VersionNumber")
					Me.OnVersionNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(100)")>  _
		Public Property DisplayName() As String
			Get
				Return Me._DisplayName
			End Get
			Set
				If (String.Equals(Me._DisplayName, value) = false) Then
					Me.OnDisplayNameChanging(value)
					Me.SendPropertyChanging
					Me._DisplayName = value
					Me.SendPropertyChanged("DisplayName")
					Me.OnDisplayNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_Documents_Doc_AP_Documents_Version", Storage:="_AP_Documents_Doc", ThisKey:="FileId", OtherKey:="FileId", IsForeignKey:=true)>  _
		Public Property AP_Documents_Doc() As AP_Documents_Doc
			Get
				Return Me._AP_Documents_Doc.Entity
			End Get
			Set
				Dim previousValue As AP_Documents_Doc = Me._AP_Documents_Doc.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_Documents_Doc.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_Documents_Doc.Entity = Nothing
						previousValue.AP_Documents_Versions = Nothing
					End If
					Me._AP_Documents_Doc.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_Documents_Versions = Me
						Me._FileId = value.FileId
					Else
						Me._FileId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("AP_Documents_Doc")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
