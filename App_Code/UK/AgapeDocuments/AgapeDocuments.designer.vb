'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace UK.AgapeDocuments
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AC-FR")>  _
	Partial Public Class AgapeDocumentsDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAgape_Main_AgapeDocument(instance As Agape_Main_AgapeDocument)
    End Sub
    Partial Private Sub UpdateAgape_Main_AgapeDocument(instance As Agape_Main_AgapeDocument)
    End Sub
    Partial Private Sub DeleteAgape_Main_AgapeDocument(instance As Agape_Main_AgapeDocument)
    End Sub
    Partial Private Sub InsertAgape_Main_AgapeDocuments_Comment(instance As Agape_Main_AgapeDocuments_Comment)
    End Sub
    Partial Private Sub UpdateAgape_Main_AgapeDocuments_Comment(instance As Agape_Main_AgapeDocuments_Comment)
    End Sub
    Partial Private Sub DeleteAgape_Main_AgapeDocuments_Comment(instance As Agape_Main_AgapeDocuments_Comment)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Agape_Main_AgapeDocuments() As System.Data.Linq.Table(Of Agape_Main_AgapeDocument)
			Get
				Return Me.GetTable(Of Agape_Main_AgapeDocument)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Main_AgapeDocuments_Comments() As System.Data.Linq.Table(Of Agape_Main_AgapeDocuments_Comment)
			Get
				Return Me.GetTable(Of Agape_Main_AgapeDocuments_Comment)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Main_AgapeDocuments")>  _
	Partial Public Class Agape_Main_AgapeDocument
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AgapeDocumentId As Long
		
		Private _DocTitle As String
		
		Private _DocDescription As String
		
		Private _ModuleId As System.Nullable(Of Integer)
		
		Private _PortalId As System.Nullable(Of Integer)
		
		Private _FileId As System.Nullable(Of Integer)
		
		Private _SortOrder As System.Nullable(Of Short)
		
		Private _Subtitle As String
		
		Private _URL As String
		
		Private _LinkType As System.Nullable(Of Char)
		
		Private _Agape_Main_AgapeDocuments_Comments As EntitySet(Of Agape_Main_AgapeDocuments_Comment)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAgapeDocumentIdChanging(value As Long)
    End Sub
    Partial Private Sub OnAgapeDocumentIdChanged()
    End Sub
    Partial Private Sub OnDocTitleChanging(value As String)
    End Sub
    Partial Private Sub OnDocTitleChanged()
    End Sub
    Partial Private Sub OnDocDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDocDescriptionChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnFileIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFileIdChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnSubtitleChanging(value As String)
    End Sub
    Partial Private Sub OnSubtitleChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnLinkTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnLinkTypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Main_AgapeDocuments_Comments = New EntitySet(Of Agape_Main_AgapeDocuments_Comment)(AddressOf Me.attach_Agape_Main_AgapeDocuments_Comments, AddressOf Me.detach_Agape_Main_AgapeDocuments_Comments)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgapeDocumentId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AgapeDocumentId() As Long
			Get
				Return Me._AgapeDocumentId
			End Get
			Set
				If ((Me._AgapeDocumentId = value)  _
							= false) Then
					Me.OnAgapeDocumentIdChanging(value)
					Me.SendPropertyChanging
					Me._AgapeDocumentId = value
					Me.SendPropertyChanged("AgapeDocumentId")
					Me.OnAgapeDocumentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocTitle", DbType:="NVarChar(127)")>  _
		Public Property DocTitle() As String
			Get
				Return Me._DocTitle
			End Get
			Set
				If (String.Equals(Me._DocTitle, value) = false) Then
					Me.OnDocTitleChanging(value)
					Me.SendPropertyChanging
					Me._DocTitle = value
					Me.SendPropertyChanged("DocTitle")
					Me.OnDocTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocDescription", DbType:="NVarChar(MAX)")>  _
		Public Property DocDescription() As String
			Get
				Return Me._DocDescription
			End Get
			Set
				If (String.Equals(Me._DocDescription, value) = false) Then
					Me.OnDocDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._DocDescription = value
					Me.SendPropertyChanged("DocDescription")
					Me.OnDocDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", DbType:="Int")>  _
		Public Property ModuleId() As System.Nullable(Of Integer)
			Get
				Return Me._ModuleId
			End Get
			Set
				If (Me._ModuleId.Equals(value) = false) Then
					Me.OnModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._ModuleId = value
					Me.SendPropertyChanged("ModuleId")
					Me.OnModuleIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
		Public Property PortalId() As System.Nullable(Of Integer)
			Get
				Return Me._PortalId
			End Get
			Set
				If (Me._PortalId.Equals(value) = false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileId", DbType:="Int")>  _
		Public Property FileId() As System.Nullable(Of Integer)
			Get
				Return Me._FileId
			End Get
			Set
				If (Me._FileId.Equals(value) = false) Then
					Me.OnFileIdChanging(value)
					Me.SendPropertyChanging
					Me._FileId = value
					Me.SendPropertyChanged("FileId")
					Me.OnFileIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="SmallInt")>  _
		Public Property SortOrder() As System.Nullable(Of Short)
			Get
				Return Me._SortOrder
			End Get
			Set
				If (Me._SortOrder.Equals(value) = false) Then
					Me.OnSortOrderChanging(value)
					Me.SendPropertyChanging
					Me._SortOrder = value
					Me.SendPropertyChanged("SortOrder")
					Me.OnSortOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subtitle", DbType:="NVarChar(127)")>  _
		Public Property Subtitle() As String
			Get
				Return Me._Subtitle
			End Get
			Set
				If (String.Equals(Me._Subtitle, value) = false) Then
					Me.OnSubtitleChanging(value)
					Me.SendPropertyChanging
					Me._Subtitle = value
					Me.SendPropertyChanged("Subtitle")
					Me.OnSubtitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="VarChar(250)")>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkType", DbType:="Char(1)")>  _
		Public Property LinkType() As System.Nullable(Of Char)
			Get
				Return Me._LinkType
			End Get
			Set
				If (Me._LinkType.Equals(value) = false) Then
					Me.OnLinkTypeChanging(value)
					Me.SendPropertyChanging
					Me._LinkType = value
					Me.SendPropertyChanged("LinkType")
					Me.OnLinkTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Main_AgapeDocument_Agape_Main_AgapeDocuments_Comment", Storage:="_Agape_Main_AgapeDocuments_Comments", ThisKey:="AgapeDocumentId", OtherKey:="AgapeDocumentId")>  _
		Public Property Agape_Main_AgapeDocuments_Comments() As EntitySet(Of Agape_Main_AgapeDocuments_Comment)
			Get
				Return Me._Agape_Main_AgapeDocuments_Comments
			End Get
			Set
				Me._Agape_Main_AgapeDocuments_Comments.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Main_AgapeDocuments_Comments(ByVal entity As Agape_Main_AgapeDocuments_Comment)
			Me.SendPropertyChanging
			entity.Agape_Main_AgapeDocument = Me
		End Sub
		
		Private Sub detach_Agape_Main_AgapeDocuments_Comments(ByVal entity As Agape_Main_AgapeDocuments_Comment)
			Me.SendPropertyChanging
			entity.Agape_Main_AgapeDocument = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Main_AgapeDocuments_Comments")>  _
	Partial Public Class Agape_Main_AgapeDocuments_Comment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CommentId As Long
		
		Private _AgapeDocumentId As System.Nullable(Of Long)
		
		Private _UserId As System.Nullable(Of Integer)
		
		Private _Comment As String
		
		Private _CreatedDate As System.Nullable(Of Date)
		
		Private _Agape_Main_AgapeDocument As EntityRef(Of Agape_Main_AgapeDocument)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentIdChanging(value As Long)
    End Sub
    Partial Private Sub OnCommentIdChanged()
    End Sub
    Partial Private Sub OnAgapeDocumentIdChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAgapeDocumentIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Main_AgapeDocument = CType(Nothing, EntityRef(Of Agape_Main_AgapeDocument))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property CommentId() As Long
			Get
				Return Me._CommentId
			End Get
			Set
				If ((Me._CommentId = value)  _
							= false) Then
					Me.OnCommentIdChanging(value)
					Me.SendPropertyChanging
					Me._CommentId = value
					Me.SendPropertyChanged("CommentId")
					Me.OnCommentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgapeDocumentId", DbType:="BigInt")>  _
		Public Property AgapeDocumentId() As System.Nullable(Of Long)
			Get
				Return Me._AgapeDocumentId
			End Get
			Set
				If (Me._AgapeDocumentId.Equals(value) = false) Then
					If Me._Agape_Main_AgapeDocument.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAgapeDocumentIdChanging(value)
					Me.SendPropertyChanging
					Me._AgapeDocumentId = value
					Me.SendPropertyChanged("AgapeDocumentId")
					Me.OnAgapeDocumentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
		Public Property UserId() As System.Nullable(Of Integer)
			Get
				Return Me._UserId
			End Get
			Set
				If (Me._UserId.Equals(value) = false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(MAX)")>  _
		Public Property Comment() As String
			Get
				Return Me._Comment
			End Get
			Set
				If (String.Equals(Me._Comment, value) = false) Then
					Me.OnCommentChanging(value)
					Me.SendPropertyChanging
					Me._Comment = value
					Me.SendPropertyChanged("Comment")
					Me.OnCommentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
		Public Property CreatedDate() As System.Nullable(Of Date)
			Get
				Return Me._CreatedDate
			End Get
			Set
				If (Me._CreatedDate.Equals(value) = false) Then
					Me.OnCreatedDateChanging(value)
					Me.SendPropertyChanging
					Me._CreatedDate = value
					Me.SendPropertyChanged("CreatedDate")
					Me.OnCreatedDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Main_AgapeDocument_Agape_Main_AgapeDocuments_Comment", Storage:="_Agape_Main_AgapeDocument", ThisKey:="AgapeDocumentId", OtherKey:="AgapeDocumentId", IsForeignKey:=true)>  _
		Public Property Agape_Main_AgapeDocument() As Agape_Main_AgapeDocument
			Get
				Return Me._Agape_Main_AgapeDocument.Entity
			End Get
			Set
				Dim previousValue As Agape_Main_AgapeDocument = Me._Agape_Main_AgapeDocument.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Main_AgapeDocument.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Main_AgapeDocument.Entity = Nothing
						previousValue.Agape_Main_AgapeDocuments_Comments.Remove(Me)
					End If
					Me._Agape_Main_AgapeDocument.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Main_AgapeDocuments_Comments.Add(Me)
						Me._AgapeDocumentId = value.AgapeDocumentId
					Else
						Me._AgapeDocumentId = CType(Nothing, Nullable(Of Long))
					End If
					Me.SendPropertyChanged("Agape_Main_AgapeDocument")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
