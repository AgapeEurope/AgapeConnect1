'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace UK.OnlineForm
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeBetaSVN")>  _
	Partial Public Class OnlineFormDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertUser(instance As User)
    End Sub
    Partial Private Sub UpdateUser(instance As User)
    End Sub
    Partial Private Sub DeleteUser(instance As User)
    End Sub
    Partial Private Sub InsertAgape_Public_OnlineForm_Question(instance As Agape_Public_OnlineForm_Question)
    End Sub
    Partial Private Sub UpdateAgape_Public_OnlineForm_Question(instance As Agape_Public_OnlineForm_Question)
    End Sub
    Partial Private Sub DeleteAgape_Public_OnlineForm_Question(instance As Agape_Public_OnlineForm_Question)
    End Sub
    Partial Private Sub InsertAgape_Public_OnlineForm_Answer(instance As Agape_Public_OnlineForm_Answer)
    End Sub
    Partial Private Sub UpdateAgape_Public_OnlineForm_Answer(instance As Agape_Public_OnlineForm_Answer)
    End Sub
    Partial Private Sub DeleteAgape_Public_OnlineForm_Answer(instance As Agape_Public_OnlineForm_Answer)
    End Sub
    Partial Private Sub InsertAgape_Public_OnlineForm_DDL(instance As Agape_Public_OnlineForm_DDL)
    End Sub
    Partial Private Sub UpdateAgape_Public_OnlineForm_DDL(instance As Agape_Public_OnlineForm_DDL)
    End Sub
    Partial Private Sub DeleteAgape_Public_OnlineForm_DDL(instance As Agape_Public_OnlineForm_DDL)
    End Sub
    Partial Private Sub InsertAgape_Public_OnlineForm(instance As Agape_Public_OnlineForm)
    End Sub
    Partial Private Sub UpdateAgape_Public_OnlineForm(instance As Agape_Public_OnlineForm)
    End Sub
    Partial Private Sub DeleteAgape_Public_OnlineForm(instance As Agape_Public_OnlineForm)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
			Get
				Return Me.GetTable(Of User)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Public_OnlineForm_Questions() As System.Data.Linq.Table(Of Agape_Public_OnlineForm_Question)
			Get
				Return Me.GetTable(Of Agape_Public_OnlineForm_Question)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Public_OnlineForm_Answers() As System.Data.Linq.Table(Of Agape_Public_OnlineForm_Answer)
			Get
				Return Me.GetTable(Of Agape_Public_OnlineForm_Answer)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Public_OnlineForm_DDLs() As System.Data.Linq.Table(Of Agape_Public_OnlineForm_DDL)
			Get
				Return Me.GetTable(Of Agape_Public_OnlineForm_DDL)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Public_OnlineForms() As System.Data.Linq.Table(Of Agape_Public_OnlineForm)
			Get
				Return Me.GetTable(Of Agape_Public_OnlineForm)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
	Partial Public Class User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserID As Integer
		
		Private _Username As String
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _IsSuperUser As Boolean
		
		Private _AffiliateId As System.Nullable(Of Integer)
		
		Private _Email As String
		
		Private _DisplayName As String
		
		Private _UpdatePassword As Boolean
		
		Private _Agape_Public_OnlineForm_Answers As EntitySet(Of Agape_Public_OnlineForm_Answer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIsSuperUserChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSuperUserChanged()
    End Sub
    Partial Private Sub OnAffiliateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAffiliateIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnUpdatePasswordChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUpdatePasswordChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Public_OnlineForm_Answers = New EntitySet(Of Agape_Public_OnlineForm_Answer)(AddressOf Me.attach_Agape_Public_OnlineForm_Answers, AddressOf Me.detach_Agape_Public_OnlineForm_Answers)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSuperUser", DbType:="Bit NOT NULL")>  _
		Public Property IsSuperUser() As Boolean
			Get
				Return Me._IsSuperUser
			End Get
			Set
				If ((Me._IsSuperUser = value)  _
							= false) Then
					Me.OnIsSuperUserChanging(value)
					Me.SendPropertyChanging
					Me._IsSuperUser = value
					Me.SendPropertyChanged("IsSuperUser")
					Me.OnIsSuperUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AffiliateId", DbType:="Int")>  _
		Public Property AffiliateId() As System.Nullable(Of Integer)
			Get
				Return Me._AffiliateId
			End Get
			Set
				If (Me._AffiliateId.Equals(value) = false) Then
					Me.OnAffiliateIdChanging(value)
					Me.SendPropertyChanging
					Me._AffiliateId = value
					Me.SendPropertyChanged("AffiliateId")
					Me.OnAffiliateIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
		Public Property DisplayName() As String
			Get
				Return Me._DisplayName
			End Get
			Set
				If (String.Equals(Me._DisplayName, value) = false) Then
					Me.OnDisplayNameChanging(value)
					Me.SendPropertyChanging
					Me._DisplayName = value
					Me.SendPropertyChanged("DisplayName")
					Me.OnDisplayNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatePassword", DbType:="Bit NOT NULL")>  _
		Public Property UpdatePassword() As Boolean
			Get
				Return Me._UpdatePassword
			End Get
			Set
				If ((Me._UpdatePassword = value)  _
							= false) Then
					Me.OnUpdatePasswordChanging(value)
					Me.SendPropertyChanging
					Me._UpdatePassword = value
					Me.SendPropertyChanged("UpdatePassword")
					Me.OnUpdatePasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Agape_Public_OnlineForm_Answer", Storage:="_Agape_Public_OnlineForm_Answers", ThisKey:="UserID", OtherKey:="UserId")>  _
		Public Property Agape_Public_OnlineForm_Answers() As EntitySet(Of Agape_Public_OnlineForm_Answer)
			Get
				Return Me._Agape_Public_OnlineForm_Answers
			End Get
			Set
				Me._Agape_Public_OnlineForm_Answers.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Public_OnlineForm_Answers(ByVal entity As Agape_Public_OnlineForm_Answer)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Agape_Public_OnlineForm_Answers(ByVal entity As Agape_Public_OnlineForm_Answer)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Public_OnlineForm_Questions")>  _
	Partial Public Class Agape_Public_OnlineForm_Question
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FormQuestionId As Integer
		
		Private _FormId As System.Nullable(Of Integer)
		
		Private _QuestionText As String
		
		Private _QuestionType As Byte
		
		Private _Required As Boolean
		
		Private _Agape_Public_OnlineForm_Answers As EntitySet(Of Agape_Public_OnlineForm_Answer)
		
		Private _Agape_Public_OnlineForm_DDLs As EntitySet(Of Agape_Public_OnlineForm_DDL)
		
		Private _Agape_Public_OnlineForm As EntityRef(Of Agape_Public_OnlineForm)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFormQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFormQuestionIdChanged()
    End Sub
    Partial Private Sub OnFormIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFormIdChanged()
    End Sub
    Partial Private Sub OnQuestionTextChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTextChanged()
    End Sub
    Partial Private Sub OnQuestionTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnQuestionTypeChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Public_OnlineForm_Answers = New EntitySet(Of Agape_Public_OnlineForm_Answer)(AddressOf Me.attach_Agape_Public_OnlineForm_Answers, AddressOf Me.detach_Agape_Public_OnlineForm_Answers)
			Me._Agape_Public_OnlineForm_DDLs = New EntitySet(Of Agape_Public_OnlineForm_DDL)(AddressOf Me.attach_Agape_Public_OnlineForm_DDLs, AddressOf Me.detach_Agape_Public_OnlineForm_DDLs)
			Me._Agape_Public_OnlineForm = CType(Nothing, EntityRef(Of Agape_Public_OnlineForm))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormQuestionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FormQuestionId() As Integer
			Get
				Return Me._FormQuestionId
			End Get
			Set
				If ((Me._FormQuestionId = value)  _
							= false) Then
					Me.OnFormQuestionIdChanging(value)
					Me.SendPropertyChanging
					Me._FormQuestionId = value
					Me.SendPropertyChanged("FormQuestionId")
					Me.OnFormQuestionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormId", DbType:="Int")>  _
		Public Property FormId() As System.Nullable(Of Integer)
			Get
				Return Me._FormId
			End Get
			Set
				If (Me._FormId.Equals(value) = false) Then
					If Me._Agape_Public_OnlineForm.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFormIdChanging(value)
					Me.SendPropertyChanging
					Me._FormId = value
					Me.SendPropertyChanged("FormId")
					Me.OnFormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionText", DbType:="NVarChar(MAX)")>  _
		Public Property QuestionText() As String
			Get
				Return Me._QuestionText
			End Get
			Set
				If (String.Equals(Me._QuestionText, value) = false) Then
					Me.OnQuestionTextChanging(value)
					Me.SendPropertyChanging
					Me._QuestionText = value
					Me.SendPropertyChanged("QuestionText")
					Me.OnQuestionTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionType", DbType:="TinyInt NOT NULL")>  _
		Public Property QuestionType() As Byte
			Get
				Return Me._QuestionType
			End Get
			Set
				If ((Me._QuestionType = value)  _
							= false) Then
					Me.OnQuestionTypeChanging(value)
					Me.SendPropertyChanging
					Me._QuestionType = value
					Me.SendPropertyChanged("QuestionType")
					Me.OnQuestionTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit NOT NULL")>  _
		Public Property Required() As Boolean
			Get
				Return Me._Required
			End Get
			Set
				If ((Me._Required = value)  _
							= false) Then
					Me.OnRequiredChanging(value)
					Me.SendPropertyChanging
					Me._Required = value
					Me.SendPropertyChanged("Required")
					Me.OnRequiredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Question_Agape_Public_OnlineForm_Answer", Storage:="_Agape_Public_OnlineForm_Answers", ThisKey:="FormQuestionId", OtherKey:="Questionid")>  _
		Public Property Agape_Public_OnlineForm_Answers() As EntitySet(Of Agape_Public_OnlineForm_Answer)
			Get
				Return Me._Agape_Public_OnlineForm_Answers
			End Get
			Set
				Me._Agape_Public_OnlineForm_Answers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Question_Agape_Public_OnlineForm_DDL", Storage:="_Agape_Public_OnlineForm_DDLs", ThisKey:="FormQuestionId", OtherKey:="QuestionId")>  _
		Public Property Agape_Public_OnlineForm_DDLs() As EntitySet(Of Agape_Public_OnlineForm_DDL)
			Get
				Return Me._Agape_Public_OnlineForm_DDLs
			End Get
			Set
				Me._Agape_Public_OnlineForm_DDLs.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Agape_Public_OnlineForm_Question", Storage:="_Agape_Public_OnlineForm", ThisKey:="FormId", OtherKey:="FormId", IsForeignKey:=true)>  _
		Public Property Agape_Public_OnlineForm() As Agape_Public_OnlineForm
			Get
				Return Me._Agape_Public_OnlineForm.Entity
			End Get
			Set
				Dim previousValue As Agape_Public_OnlineForm = Me._Agape_Public_OnlineForm.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Public_OnlineForm.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Public_OnlineForm.Entity = Nothing
						previousValue.Agape_Public_OnlineForm_Questions.Remove(Me)
					End If
					Me._Agape_Public_OnlineForm.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Public_OnlineForm_Questions.Add(Me)
						Me._FormId = value.FormId
					Else
						Me._FormId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Agape_Public_OnlineForm")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Public_OnlineForm_Answers(ByVal entity As Agape_Public_OnlineForm_Answer)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm_Question = Me
		End Sub
		
		Private Sub detach_Agape_Public_OnlineForm_Answers(ByVal entity As Agape_Public_OnlineForm_Answer)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm_Question = Nothing
		End Sub
		
		Private Sub attach_Agape_Public_OnlineForm_DDLs(ByVal entity As Agape_Public_OnlineForm_DDL)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm_Question = Me
		End Sub
		
		Private Sub detach_Agape_Public_OnlineForm_DDLs(ByVal entity As Agape_Public_OnlineForm_DDL)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm_Question = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Public_OnlineForm_Answers")>  _
	Partial Public Class Agape_Public_OnlineForm_Answer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AnswerId As Integer
		
		Private _FormId As System.Nullable(Of Integer)
		
		Private _Questionid As System.Nullable(Of Integer)
		
		Private _UserId As System.Nullable(Of Integer)
		
		Private _AnswerText As String
		
		Private _DateSubmitted As System.Nullable(Of Date)
		
		Private _UserIP As String
		
		Private _AnswerSet As System.Nullable(Of Integer)
		
		Private _Agape_Public_OnlineForm_Question As EntityRef(Of Agape_Public_OnlineForm_Question)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnswerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnswerIdChanged()
    End Sub
    Partial Private Sub OnFormIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFormIdChanged()
    End Sub
    Partial Private Sub OnQuestionidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuestionidChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerTextChanged()
    End Sub
    Partial Private Sub OnDateSubmittedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSubmittedChanged()
    End Sub
    Partial Private Sub OnUserIPChanging(value As String)
    End Sub
    Partial Private Sub OnUserIPChanged()
    End Sub
    Partial Private Sub OnAnswerSetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnswerSetChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Public_OnlineForm_Question = CType(Nothing, EntityRef(Of Agape_Public_OnlineForm_Question))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AnswerId() As Integer
			Get
				Return Me._AnswerId
			End Get
			Set
				If ((Me._AnswerId = value)  _
							= false) Then
					Me.OnAnswerIdChanging(value)
					Me.SendPropertyChanging
					Me._AnswerId = value
					Me.SendPropertyChanged("AnswerId")
					Me.OnAnswerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormId", DbType:="Int")>  _
		Public Property FormId() As System.Nullable(Of Integer)
			Get
				Return Me._FormId
			End Get
			Set
				If (Me._FormId.Equals(value) = false) Then
					Me.OnFormIdChanging(value)
					Me.SendPropertyChanging
					Me._FormId = value
					Me.SendPropertyChanged("FormId")
					Me.OnFormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Questionid", DbType:="Int")>  _
		Public Property Questionid() As System.Nullable(Of Integer)
			Get
				Return Me._Questionid
			End Get
			Set
				If (Me._Questionid.Equals(value) = false) Then
					If Me._Agape_Public_OnlineForm_Question.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnQuestionidChanging(value)
					Me.SendPropertyChanging
					Me._Questionid = value
					Me.SendPropertyChanged("Questionid")
					Me.OnQuestionidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
		Public Property UserId() As System.Nullable(Of Integer)
			Get
				Return Me._UserId
			End Get
			Set
				If (Me._UserId.Equals(value) = false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerText", DbType:="NVarChar(MAX)")>  _
		Public Property AnswerText() As String
			Get
				Return Me._AnswerText
			End Get
			Set
				If (String.Equals(Me._AnswerText, value) = false) Then
					Me.OnAnswerTextChanging(value)
					Me.SendPropertyChanging
					Me._AnswerText = value
					Me.SendPropertyChanged("AnswerText")
					Me.OnAnswerTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSubmitted", DbType:="SmallDateTime")>  _
		Public Property DateSubmitted() As System.Nullable(Of Date)
			Get
				Return Me._DateSubmitted
			End Get
			Set
				If (Me._DateSubmitted.Equals(value) = false) Then
					Me.OnDateSubmittedChanging(value)
					Me.SendPropertyChanging
					Me._DateSubmitted = value
					Me.SendPropertyChanged("DateSubmitted")
					Me.OnDateSubmittedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserIP", DbType:="VarChar(16)")>  _
		Public Property UserIP() As String
			Get
				Return Me._UserIP
			End Get
			Set
				If (String.Equals(Me._UserIP, value) = false) Then
					Me.OnUserIPChanging(value)
					Me.SendPropertyChanging
					Me._UserIP = value
					Me.SendPropertyChanged("UserIP")
					Me.OnUserIPChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerSet", DbType:="Int")>  _
		Public Property AnswerSet() As System.Nullable(Of Integer)
			Get
				Return Me._AnswerSet
			End Get
			Set
				If (Me._AnswerSet.Equals(value) = false) Then
					Me.OnAnswerSetChanging(value)
					Me.SendPropertyChanging
					Me._AnswerSet = value
					Me.SendPropertyChanged("AnswerSet")
					Me.OnAnswerSetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Question_Agape_Public_OnlineForm_Answer", Storage:="_Agape_Public_OnlineForm_Question", ThisKey:="Questionid", OtherKey:="FormQuestionId", IsForeignKey:=true)>  _
		Public Property Agape_Public_OnlineForm_Question() As Agape_Public_OnlineForm_Question
			Get
				Return Me._Agape_Public_OnlineForm_Question.Entity
			End Get
			Set
				Dim previousValue As Agape_Public_OnlineForm_Question = Me._Agape_Public_OnlineForm_Question.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Public_OnlineForm_Question.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Public_OnlineForm_Question.Entity = Nothing
						previousValue.Agape_Public_OnlineForm_Answers.Remove(Me)
					End If
					Me._Agape_Public_OnlineForm_Question.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Public_OnlineForm_Answers.Add(Me)
						Me._Questionid = value.FormQuestionId
					Else
						Me._Questionid = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Agape_Public_OnlineForm_Question")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Agape_Public_OnlineForm_Answer", Storage:="_User", ThisKey:="UserId", OtherKey:="UserID", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Agape_Public_OnlineForm_Answers.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Public_OnlineForm_Answers.Add(Me)
						Me._UserId = value.UserID
					Else
						Me._UserId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Public_OnlineForm_DDL")>  _
	Partial Public Class Agape_Public_OnlineForm_DDL
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DDLRowId As Integer
		
		Private _QuestionId As System.Nullable(Of Integer)
		
		Private _RowText As String
		
		Private _Agape_Public_OnlineForm_Question As EntityRef(Of Agape_Public_OnlineForm_Question)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDDLRowIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDDLRowIdChanged()
    End Sub
    Partial Private Sub OnQuestionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuestionIdChanged()
    End Sub
    Partial Private Sub OnRowTextChanging(value As String)
    End Sub
    Partial Private Sub OnRowTextChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Public_OnlineForm_Question = CType(Nothing, EntityRef(Of Agape_Public_OnlineForm_Question))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DDLRowId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DDLRowId() As Integer
			Get
				Return Me._DDLRowId
			End Get
			Set
				If ((Me._DDLRowId = value)  _
							= false) Then
					Me.OnDDLRowIdChanging(value)
					Me.SendPropertyChanging
					Me._DDLRowId = value
					Me.SendPropertyChanged("DDLRowId")
					Me.OnDDLRowIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionId", DbType:="Int")>  _
		Public Property QuestionId() As System.Nullable(Of Integer)
			Get
				Return Me._QuestionId
			End Get
			Set
				If (Me._QuestionId.Equals(value) = false) Then
					If Me._Agape_Public_OnlineForm_Question.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnQuestionIdChanging(value)
					Me.SendPropertyChanging
					Me._QuestionId = value
					Me.SendPropertyChanged("QuestionId")
					Me.OnQuestionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RowText", DbType:="NVarChar(150)")>  _
		Public Property RowText() As String
			Get
				Return Me._RowText
			End Get
			Set
				If (String.Equals(Me._RowText, value) = false) Then
					Me.OnRowTextChanging(value)
					Me.SendPropertyChanging
					Me._RowText = value
					Me.SendPropertyChanged("RowText")
					Me.OnRowTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Question_Agape_Public_OnlineForm_DDL", Storage:="_Agape_Public_OnlineForm_Question", ThisKey:="QuestionId", OtherKey:="FormQuestionId", IsForeignKey:=true)>  _
		Public Property Agape_Public_OnlineForm_Question() As Agape_Public_OnlineForm_Question
			Get
				Return Me._Agape_Public_OnlineForm_Question.Entity
			End Get
			Set
				Dim previousValue As Agape_Public_OnlineForm_Question = Me._Agape_Public_OnlineForm_Question.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Public_OnlineForm_Question.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Public_OnlineForm_Question.Entity = Nothing
						previousValue.Agape_Public_OnlineForm_DDLs.Remove(Me)
					End If
					Me._Agape_Public_OnlineForm_Question.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Public_OnlineForm_DDLs.Add(Me)
						Me._QuestionId = value.FormQuestionId
					Else
						Me._QuestionId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Agape_Public_OnlineForm_Question")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Public_OnlineForms")>  _
	Partial Public Class Agape_Public_OnlineForm
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FormId As Integer
		
		Private _ModuleId As System.Nullable(Of Integer)
		
		Private _Intro As String
		
		Private _FootNote As String
		
		Private _EmailTo As String
		
		Private _Ack As Boolean
		
		Private _AckText As String
		
		Private _ReqEmail As Boolean
		
		Private _RDSLoginName As String
		
		Private _RDSPassword As String
		
		Private _Agape_Public_OnlineForm_Questions As EntitySet(Of Agape_Public_OnlineForm_Question)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFormIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFormIdChanged()
    End Sub
    Partial Private Sub OnModuleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleIdChanged()
    End Sub
    Partial Private Sub OnIntroChanging(value As String)
    End Sub
    Partial Private Sub OnIntroChanged()
    End Sub
    Partial Private Sub OnFootNoteChanging(value As String)
    End Sub
    Partial Private Sub OnFootNoteChanged()
    End Sub
    Partial Private Sub OnEmailToChanging(value As String)
    End Sub
    Partial Private Sub OnEmailToChanged()
    End Sub
    Partial Private Sub OnAckChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAckChanged()
    End Sub
    Partial Private Sub OnAckTextChanging(value As String)
    End Sub
    Partial Private Sub OnAckTextChanged()
    End Sub
    Partial Private Sub OnReqEmailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReqEmailChanged()
    End Sub
    Partial Private Sub OnRDSLoginNameChanging(value As String)
    End Sub
    Partial Private Sub OnRDSLoginNameChanged()
    End Sub
    Partial Private Sub OnRDSPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnRDSPasswordChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Public_OnlineForm_Questions = New EntitySet(Of Agape_Public_OnlineForm_Question)(AddressOf Me.attach_Agape_Public_OnlineForm_Questions, AddressOf Me.detach_Agape_Public_OnlineForm_Questions)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FormId() As Integer
			Get
				Return Me._FormId
			End Get
			Set
				If ((Me._FormId = value)  _
							= false) Then
					Me.OnFormIdChanging(value)
					Me.SendPropertyChanging
					Me._FormId = value
					Me.SendPropertyChanged("FormId")
					Me.OnFormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleId", DbType:="Int")>  _
		Public Property ModuleId() As System.Nullable(Of Integer)
			Get
				Return Me._ModuleId
			End Get
			Set
				If (Me._ModuleId.Equals(value) = false) Then
					Me.OnModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._ModuleId = value
					Me.SendPropertyChanged("ModuleId")
					Me.OnModuleIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intro", DbType:="VarChar(MAX)")>  _
		Public Property Intro() As String
			Get
				Return Me._Intro
			End Get
			Set
				If (String.Equals(Me._Intro, value) = false) Then
					Me.OnIntroChanging(value)
					Me.SendPropertyChanging
					Me._Intro = value
					Me.SendPropertyChanged("Intro")
					Me.OnIntroChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FootNote", DbType:="VarChar(MAX)")>  _
		Public Property FootNote() As String
			Get
				Return Me._FootNote
			End Get
			Set
				If (String.Equals(Me._FootNote, value) = false) Then
					Me.OnFootNoteChanging(value)
					Me.SendPropertyChanging
					Me._FootNote = value
					Me.SendPropertyChanged("FootNote")
					Me.OnFootNoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailTo", DbType:="VarChar(70)")>  _
		Public Property EmailTo() As String
			Get
				Return Me._EmailTo
			End Get
			Set
				If (String.Equals(Me._EmailTo, value) = false) Then
					Me.OnEmailToChanging(value)
					Me.SendPropertyChanging
					Me._EmailTo = value
					Me.SendPropertyChanged("EmailTo")
					Me.OnEmailToChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ack", DbType:="Bit NOT NULL")>  _
		Public Property Ack() As Boolean
			Get
				Return Me._Ack
			End Get
			Set
				If ((Me._Ack = value)  _
							= false) Then
					Me.OnAckChanging(value)
					Me.SendPropertyChanging
					Me._Ack = value
					Me.SendPropertyChanged("Ack")
					Me.OnAckChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AckText", DbType:="VarChar(MAX)")>  _
		Public Property AckText() As String
			Get
				Return Me._AckText
			End Get
			Set
				If (String.Equals(Me._AckText, value) = false) Then
					Me.OnAckTextChanging(value)
					Me.SendPropertyChanging
					Me._AckText = value
					Me.SendPropertyChanged("AckText")
					Me.OnAckTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReqEmail", DbType:="Bit NOT NULL")>  _
		Public Property ReqEmail() As Boolean
			Get
				Return Me._ReqEmail
			End Get
			Set
				If ((Me._ReqEmail = value)  _
							= false) Then
					Me.OnReqEmailChanging(value)
					Me.SendPropertyChanging
					Me._ReqEmail = value
					Me.SendPropertyChanged("ReqEmail")
					Me.OnReqEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RDSLoginName", DbType:="VarChar(50)")>  _
		Public Property RDSLoginName() As String
			Get
				Return Me._RDSLoginName
			End Get
			Set
				If (String.Equals(Me._RDSLoginName, value) = false) Then
					Me.OnRDSLoginNameChanging(value)
					Me.SendPropertyChanging
					Me._RDSLoginName = value
					Me.SendPropertyChanged("RDSLoginName")
					Me.OnRDSLoginNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RDSPassword", DbType:="VarChar(50)")>  _
		Public Property RDSPassword() As String
			Get
				Return Me._RDSPassword
			End Get
			Set
				If (String.Equals(Me._RDSPassword, value) = false) Then
					Me.OnRDSPasswordChanging(value)
					Me.SendPropertyChanging
					Me._RDSPassword = value
					Me.SendPropertyChanged("RDSPassword")
					Me.OnRDSPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Public_OnlineForm_Agape_Public_OnlineForm_Question", Storage:="_Agape_Public_OnlineForm_Questions", ThisKey:="FormId", OtherKey:="FormId")>  _
		Public Property Agape_Public_OnlineForm_Questions() As EntitySet(Of Agape_Public_OnlineForm_Question)
			Get
				Return Me._Agape_Public_OnlineForm_Questions
			End Get
			Set
				Me._Agape_Public_OnlineForm_Questions.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Public_OnlineForm_Questions(ByVal entity As Agape_Public_OnlineForm_Question)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm = Me
		End Sub
		
		Private Sub detach_Agape_Public_OnlineForm_Questions(ByVal entity As Agape_Public_OnlineForm_Question)
			Me.SendPropertyChanging
			entity.Agape_Public_OnlineForm = Nothing
		End Sub
	End Class
End Namespace
