'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace GCX
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="agapeukcopy")>  _
	Partial Public Class GCXDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAgape_GCX_Proxy(instance As Agape_GCX_Proxy)
    End Sub
    Partial Private Sub UpdateAgape_GCX_Proxy(instance As Agape_GCX_Proxy)
    End Sub
    Partial Private Sub DeleteAgape_GCX_Proxy(instance As Agape_GCX_Proxy)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Agape_GCX_Proxies() As System.Data.Linq.Table(Of Agape_GCX_Proxy)
			Get
				Return Me.GetTable(Of Agape_GCX_Proxy)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_GCX_Proxy")>  _
	Partial Public Class Agape_GCX_Proxy
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _GCXID As Long
		
		Private _PGTIOU As String
		
		Private _PGTID As String
		
		Private _Created As System.Nullable(Of Date)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGCXIDChanging(value As Long)
    End Sub
    Partial Private Sub OnGCXIDChanged()
    End Sub
    Partial Private Sub OnPGTIOUChanging(value As String)
    End Sub
    Partial Private Sub OnPGTIOUChanged()
    End Sub
    Partial Private Sub OnPGTIDChanging(value As String)
    End Sub
    Partial Private Sub OnPGTIDChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GCXID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property GCXID() As Long
			Get
				Return Me._GCXID
			End Get
			Set
				If ((Me._GCXID = value)  _
							= false) Then
					Me.OnGCXIDChanging(value)
					Me.SendPropertyChanging
					Me._GCXID = value
					Me.SendPropertyChanged("GCXID")
					Me.OnGCXIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGTIOU", DbType:="VarChar(MAX)")>  _
		Public Property PGTIOU() As String
			Get
				Return Me._PGTIOU
			End Get
			Set
				If (String.Equals(Me._PGTIOU, value) = false) Then
					Me.OnPGTIOUChanging(value)
					Me.SendPropertyChanging
					Me._PGTIOU = value
					Me.SendPropertyChanged("PGTIOU")
					Me.OnPGTIOUChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGTID", DbType:="VarChar(MAX)")>  _
		Public Property PGTID() As String
			Get
				Return Me._PGTID
			End Get
			Set
				If (String.Equals(Me._PGTID, value) = false) Then
					Me.OnPGTIDChanging(value)
					Me.SendPropertyChanging
					Me._PGTID = value
					Me.SendPropertyChanged("PGTID")
					Me.OnPGTIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime")>  _
		Public Property Created() As System.Nullable(Of Date)
			Get
				Return Me._Created
			End Get
			Set
				If (Me._Created.Equals(value) = false) Then
					Me.OnCreatedChanging(value)
					Me.SendPropertyChanging
					Me._Created = value
					Me.SendPropertyChanged("Created")
					Me.OnCreatedChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
