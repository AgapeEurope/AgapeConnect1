'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34011
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Billboard
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AC-FR")>  _
	Partial Public Class BillboardDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAgape_Billboard_Photo(instance As Agape_Billboard_Photo)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Photo(instance As Agape_Billboard_Photo)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Photo(instance As Agape_Billboard_Photo)
    End Sub
    Partial Private Sub InsertAgape_Billboard_TempPhoto(instance As Agape_Billboard_TempPhoto)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_TempPhoto(instance As Agape_Billboard_TempPhoto)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_TempPhoto(instance As Agape_Billboard_TempPhoto)
    End Sub
    Partial Private Sub InsertUser(instance As User)
    End Sub
    Partial Private Sub UpdateUser(instance As User)
    End Sub
    Partial Private Sub DeleteUser(instance As User)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Link(instance As Agape_Billboard_Link)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Link(instance As Agape_Billboard_Link)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Link(instance As Agape_Billboard_Link)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Comment(instance As Agape_Billboard_Comment)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Comment(instance As Agape_Billboard_Comment)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Comment(instance As Agape_Billboard_Comment)
    End Sub
    Partial Private Sub InsertRole(instance As Role)
    End Sub
    Partial Private Sub UpdateRole(instance As Role)
    End Sub
    Partial Private Sub DeleteRole(instance As Role)
    End Sub
    Partial Private Sub InsertUserRole(instance As UserRole)
    End Sub
    Partial Private Sub UpdateUserRole(instance As UserRole)
    End Sub
    Partial Private Sub DeleteUserRole(instance As UserRole)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Community(instance As Agape_Billboard_Community)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Community(instance As Agape_Billboard_Community)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Community(instance As Agape_Billboard_Community)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Feature_Type(instance As Agape_Billboard_Feature_Type)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Feature_Type(instance As Agape_Billboard_Feature_Type)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Feature_Type(instance As Agape_Billboard_Feature_Type)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Test(instance As Agape_Billboard_Test)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Test(instance As Agape_Billboard_Test)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Test(instance As Agape_Billboard_Test)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Feature(instance As Agape_Billboard_Feature)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Feature(instance As Agape_Billboard_Feature)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Feature(instance As Agape_Billboard_Feature)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Announcement(instance As Agape_Billboard_Announcement)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Announcement(instance As Agape_Billboard_Announcement)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Announcement(instance As Agape_Billboard_Announcement)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Article(instance As Agape_Billboard_Article)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Article(instance As Agape_Billboard_Article)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Article(instance As Agape_Billboard_Article)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Send(instance As Agape_Billboard_Send)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Send(instance As Agape_Billboard_Send)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Send(instance As Agape_Billboard_Send)
    End Sub
    Partial Private Sub InsertAgape_Billboard_Prayer(instance As Agape_Billboard_Prayer)
    End Sub
    Partial Private Sub UpdateAgape_Billboard_Prayer(instance As Agape_Billboard_Prayer)
    End Sub
    Partial Private Sub DeleteAgape_Billboard_Prayer(instance As Agape_Billboard_Prayer)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Agape_Billboard_Photos() As System.Data.Linq.Table(Of Agape_Billboard_Photo)
			Get
				Return Me.GetTable(Of Agape_Billboard_Photo)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_TempPhotos() As System.Data.Linq.Table(Of Agape_Billboard_TempPhoto)
			Get
				Return Me.GetTable(Of Agape_Billboard_TempPhoto)
			End Get
		End Property
		
		Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
			Get
				Return Me.GetTable(Of User)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Links() As System.Data.Linq.Table(Of Agape_Billboard_Link)
			Get
				Return Me.GetTable(Of Agape_Billboard_Link)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Comments() As System.Data.Linq.Table(Of Agape_Billboard_Comment)
			Get
				Return Me.GetTable(Of Agape_Billboard_Comment)
			End Get
		End Property
		
		Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
			Get
				Return Me.GetTable(Of Role)
			End Get
		End Property
		
		Public ReadOnly Property UserRoles() As System.Data.Linq.Table(Of UserRole)
			Get
				Return Me.GetTable(Of UserRole)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Communities() As System.Data.Linq.Table(Of Agape_Billboard_Community)
			Get
				Return Me.GetTable(Of Agape_Billboard_Community)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Feature_Types() As System.Data.Linq.Table(Of Agape_Billboard_Feature_Type)
			Get
				Return Me.GetTable(Of Agape_Billboard_Feature_Type)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Tests() As System.Data.Linq.Table(Of Agape_Billboard_Test)
			Get
				Return Me.GetTable(Of Agape_Billboard_Test)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Features() As System.Data.Linq.Table(Of Agape_Billboard_Feature)
			Get
				Return Me.GetTable(Of Agape_Billboard_Feature)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Announcements() As System.Data.Linq.Table(Of Agape_Billboard_Announcement)
			Get
				Return Me.GetTable(Of Agape_Billboard_Announcement)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Articles() As System.Data.Linq.Table(Of Agape_Billboard_Article)
			Get
				Return Me.GetTable(Of Agape_Billboard_Article)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Sends() As System.Data.Linq.Table(Of Agape_Billboard_Send)
			Get
				Return Me.GetTable(Of Agape_Billboard_Send)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Globals() As System.Data.Linq.Table(Of Agape_Billboard_Global)
			Get
				Return Me.GetTable(Of Agape_Billboard_Global)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Billboard_Prayers() As System.Data.Linq.Table(Of Agape_Billboard_Prayer)
			Get
				Return Me.GetTable(Of Agape_Billboard_Prayer)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Photo")>  _
	Partial Public Class Agape_Billboard_Photo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardPhotoId As Integer
		
		Private _PhotoData As System.Data.Linq.Binary
		
		Private _Agape_Billboard_Features As EntitySet(Of Agape_Billboard_Feature)
		
		Private _Agape_Billboard_Articles As EntitySet(Of Agape_Billboard_Article)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanged()
    End Sub
    Partial Private Sub OnPhotoDataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoDataChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Billboard_Features = New EntitySet(Of Agape_Billboard_Feature)(AddressOf Me.attach_Agape_Billboard_Features, AddressOf Me.detach_Agape_Billboard_Features)
			Me._Agape_Billboard_Articles = New EntitySet(Of Agape_Billboard_Article)(AddressOf Me.attach_Agape_Billboard_Articles, AddressOf Me.detach_Agape_Billboard_Articles)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardPhotoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardPhotoId() As Integer
			Get
				Return Me._BillboardPhotoId
			End Get
			Set
				If ((Me._BillboardPhotoId = value)  _
							= false) Then
					Me.OnBillboardPhotoIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardPhotoId = value
					Me.SendPropertyChanged("BillboardPhotoId")
					Me.OnBillboardPhotoIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoData", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PhotoData() As System.Data.Linq.Binary
			Get
				Return Me._PhotoData
			End Get
			Set
				If (Object.Equals(Me._PhotoData, value) = false) Then
					Me.OnPhotoDataChanging(value)
					Me.SendPropertyChanging
					Me._PhotoData = value
					Me.SendPropertyChanged("PhotoData")
					Me.OnPhotoDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Billboard_Photo_Agape_Billboard_Feature", Storage:="_Agape_Billboard_Features", ThisKey:="BillboardPhotoId", OtherKey:="BillboardPhotoId")>  _
		Public Property Agape_Billboard_Features() As EntitySet(Of Agape_Billboard_Feature)
			Get
				Return Me._Agape_Billboard_Features
			End Get
			Set
				Me._Agape_Billboard_Features.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Billboard_Photo_Agape_Billboard_Article", Storage:="_Agape_Billboard_Articles", ThisKey:="BillboardPhotoId", OtherKey:="BillboardPhotoId")>  _
		Public Property Agape_Billboard_Articles() As EntitySet(Of Agape_Billboard_Article)
			Get
				Return Me._Agape_Billboard_Articles
			End Get
			Set
				Me._Agape_Billboard_Articles.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Billboard_Features(ByVal entity As Agape_Billboard_Feature)
			Me.SendPropertyChanging
			entity.Agape_Billboard_Photo = Me
		End Sub
		
		Private Sub detach_Agape_Billboard_Features(ByVal entity As Agape_Billboard_Feature)
			Me.SendPropertyChanging
			entity.Agape_Billboard_Photo = Nothing
		End Sub
		
		Private Sub attach_Agape_Billboard_Articles(ByVal entity As Agape_Billboard_Article)
			Me.SendPropertyChanging
			entity.Agape_Billboard_Photo = Me
		End Sub
		
		Private Sub detach_Agape_Billboard_Articles(ByVal entity As Agape_Billboard_Article)
			Me.SendPropertyChanging
			entity.Agape_Billboard_Photo = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_TempPhoto")>  _
	Partial Public Class Agape_Billboard_TempPhoto
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardTempPhotoId As Integer
		
		Private _UserId As System.Nullable(Of Integer)
		
		Private _TempPhotoData As System.Data.Linq.Binary
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardTempPhotoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardTempPhotoIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnTempPhotoDataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnTempPhotoDataChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardTempPhotoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardTempPhotoId() As Integer
			Get
				Return Me._BillboardTempPhotoId
			End Get
			Set
				If ((Me._BillboardTempPhotoId = value)  _
							= false) Then
					Me.OnBillboardTempPhotoIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardTempPhotoId = value
					Me.SendPropertyChanged("BillboardTempPhotoId")
					Me.OnBillboardTempPhotoIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
		Public Property UserId() As System.Nullable(Of Integer)
			Get
				Return Me._UserId
			End Get
			Set
				If (Me._UserId.Equals(value) = false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempPhotoData", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property TempPhotoData() As System.Data.Linq.Binary
			Get
				Return Me._TempPhotoData
			End Get
			Set
				If (Object.Equals(Me._TempPhotoData, value) = false) Then
					Me.OnTempPhotoDataChanging(value)
					Me.SendPropertyChanging
					Me._TempPhotoData = value
					Me.SendPropertyChanged("TempPhotoData")
					Me.OnTempPhotoDataChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
	Partial Public Class User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserID As Integer
		
		Private _Username As String
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _IsSuperUser As Boolean
		
		Private _AffiliateId As System.Nullable(Of Integer)
		
		Private _Email As String
		
		Private _DisplayName As String
		
		Private _UpdatePassword As Boolean
		
		Private _UserRoles As EntitySet(Of UserRole)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIsSuperUserChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSuperUserChanged()
    End Sub
    Partial Private Sub OnAffiliateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAffiliateIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnUpdatePasswordChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUpdatePasswordChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._UserRoles = New EntitySet(Of UserRole)(AddressOf Me.attach_UserRoles, AddressOf Me.detach_UserRoles)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSuperUser", DbType:="Bit NOT NULL")>  _
		Public Property IsSuperUser() As Boolean
			Get
				Return Me._IsSuperUser
			End Get
			Set
				If ((Me._IsSuperUser = value)  _
							= false) Then
					Me.OnIsSuperUserChanging(value)
					Me.SendPropertyChanging
					Me._IsSuperUser = value
					Me.SendPropertyChanged("IsSuperUser")
					Me.OnIsSuperUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AffiliateId", DbType:="Int")>  _
		Public Property AffiliateId() As System.Nullable(Of Integer)
			Get
				Return Me._AffiliateId
			End Get
			Set
				If (Me._AffiliateId.Equals(value) = false) Then
					Me.OnAffiliateIdChanging(value)
					Me.SendPropertyChanging
					Me._AffiliateId = value
					Me.SendPropertyChanged("AffiliateId")
					Me.OnAffiliateIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
		Public Property DisplayName() As String
			Get
				Return Me._DisplayName
			End Get
			Set
				If (String.Equals(Me._DisplayName, value) = false) Then
					Me.OnDisplayNameChanging(value)
					Me.SendPropertyChanging
					Me._DisplayName = value
					Me.SendPropertyChanged("DisplayName")
					Me.OnDisplayNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatePassword", DbType:="Bit NOT NULL")>  _
		Public Property UpdatePassword() As Boolean
			Get
				Return Me._UpdatePassword
			End Get
			Set
				If ((Me._UpdatePassword = value)  _
							= false) Then
					Me.OnUpdatePasswordChanging(value)
					Me.SendPropertyChanging
					Me._UpdatePassword = value
					Me.SendPropertyChanged("UpdatePassword")
					Me.OnUpdatePasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserRole", Storage:="_UserRoles", ThisKey:="UserID", OtherKey:="UserID")>  _
		Public Property UserRoles() As EntitySet(Of UserRole)
			Get
				Return Me._UserRoles
			End Get
			Set
				Me._UserRoles.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_UserRoles(ByVal entity As UserRole)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_UserRoles(ByVal entity As UserRole)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Link")>  _
	Partial Public Class Agape_Billboard_Link
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardLinkId As Integer
		
		Private _LinkTitle As String
		
		Private _LinkURL As String
		
		Private _LinkDesc As String
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Sent As System.Nullable(Of Boolean)
		
		Private _Current As System.Nullable(Of Boolean)
		
		Private _Author As System.Nullable(Of Integer)
		
		Private _LinkDate As System.Nullable(Of Date)
		
		Private _ViewOrder As System.Nullable(Of Short)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardLinkIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardLinkIdChanged()
    End Sub
    Partial Private Sub OnLinkTitleChanging(value As String)
    End Sub
    Partial Private Sub OnLinkTitleChanged()
    End Sub
    Partial Private Sub OnLinkURLChanging(value As String)
    End Sub
    Partial Private Sub OnLinkURLChanged()
    End Sub
    Partial Private Sub OnLinkDescChanging(value As String)
    End Sub
    Partial Private Sub OnLinkDescChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnCurrentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnLinkDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLinkDateChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardLinkId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardLinkId() As Integer
			Get
				Return Me._BillboardLinkId
			End Get
			Set
				If ((Me._BillboardLinkId = value)  _
							= false) Then
					Me.OnBillboardLinkIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardLinkId = value
					Me.SendPropertyChanged("BillboardLinkId")
					Me.OnBillboardLinkIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkTitle", DbType:="NVarChar(100)")>  _
		Public Property LinkTitle() As String
			Get
				Return Me._LinkTitle
			End Get
			Set
				If (String.Equals(Me._LinkTitle, value) = false) Then
					Me.OnLinkTitleChanging(value)
					Me.SendPropertyChanging
					Me._LinkTitle = value
					Me.SendPropertyChanged("LinkTitle")
					Me.OnLinkTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
		Public Property LinkURL() As String
			Get
				Return Me._LinkURL
			End Get
			Set
				If (String.Equals(Me._LinkURL, value) = false) Then
					Me.OnLinkURLChanging(value)
					Me.SendPropertyChanging
					Me._LinkURL = value
					Me.SendPropertyChanged("LinkURL")
					Me.OnLinkURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkDesc", DbType:="NVarChar(500)")>  _
		Public Property LinkDesc() As String
			Get
				Return Me._LinkDesc
			End Get
			Set
				If (String.Equals(Me._LinkDesc, value) = false) Then
					Me.OnLinkDescChanging(value)
					Me.SendPropertyChanging
					Me._LinkDesc = value
					Me.SendPropertyChanged("LinkDesc")
					Me.OnLinkDescChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Current]", Storage:="_Current", DbType:="Bit")>  _
		Public Property Current() As System.Nullable(Of Boolean)
			Get
				Return Me._Current
			End Get
			Set
				If (Me._Current.Equals(value) = false) Then
					Me.OnCurrentChanging(value)
					Me.SendPropertyChanging
					Me._Current = value
					Me.SendPropertyChanged("Current")
					Me.OnCurrentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="Int")>  _
		Public Property Author() As System.Nullable(Of Integer)
			Get
				Return Me._Author
			End Get
			Set
				If (Me._Author.Equals(value) = false) Then
					Me.OnAuthorChanging(value)
					Me.SendPropertyChanging
					Me._Author = value
					Me.SendPropertyChanged("Author")
					Me.OnAuthorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkDate", DbType:="SmallDateTime")>  _
		Public Property LinkDate() As System.Nullable(Of Date)
			Get
				Return Me._LinkDate
			End Get
			Set
				If (Me._LinkDate.Equals(value) = false) Then
					Me.OnLinkDateChanging(value)
					Me.SendPropertyChanging
					Me._LinkDate = value
					Me.SendPropertyChanged("LinkDate")
					Me.OnLinkDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="SmallInt")>  _
		Public Property ViewOrder() As System.Nullable(Of Short)
			Get
				Return Me._ViewOrder
			End Get
			Set
				If (Me._ViewOrder.Equals(value) = false) Then
					Me.OnViewOrderChanging(value)
					Me.SendPropertyChanging
					Me._ViewOrder = value
					Me.SendPropertyChanged("ViewOrder")
					Me.OnViewOrderChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Comment")>  _
	Partial Public Class Agape_Billboard_Comment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardCommentId As Integer
		
		Private _AuthorId As System.Nullable(Of Integer)
		
		Private _CommentText As String
		
		Private _CommentType As System.Nullable(Of Byte)
		
		Private _Abuse As System.Nullable(Of Boolean)
		
		Private _CommentDate As System.Nullable(Of Date)
		
		Private _ArticleId As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardCommentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardCommentIdChanged()
    End Sub
    Partial Private Sub OnAuthorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorIdChanged()
    End Sub
    Partial Private Sub OnCommentTextChanging(value As String)
    End Sub
    Partial Private Sub OnCommentTextChanged()
    End Sub
    Partial Private Sub OnCommentTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnCommentTypeChanged()
    End Sub
    Partial Private Sub OnAbuseChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAbuseChanged()
    End Sub
    Partial Private Sub OnCommentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCommentDateChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardCommentId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardCommentId() As Integer
			Get
				Return Me._BillboardCommentId
			End Get
			Set
				If ((Me._BillboardCommentId = value)  _
							= false) Then
					Me.OnBillboardCommentIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardCommentId = value
					Me.SendPropertyChanged("BillboardCommentId")
					Me.OnBillboardCommentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorId", DbType:="Int")>  _
		Public Property AuthorId() As System.Nullable(Of Integer)
			Get
				Return Me._AuthorId
			End Get
			Set
				If (Me._AuthorId.Equals(value) = false) Then
					Me.OnAuthorIdChanging(value)
					Me.SendPropertyChanging
					Me._AuthorId = value
					Me.SendPropertyChanged("AuthorId")
					Me.OnAuthorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentText", DbType:="VarChar(200)")>  _
		Public Property CommentText() As String
			Get
				Return Me._CommentText
			End Get
			Set
				If (String.Equals(Me._CommentText, value) = false) Then
					Me.OnCommentTextChanging(value)
					Me.SendPropertyChanging
					Me._CommentText = value
					Me.SendPropertyChanged("CommentText")
					Me.OnCommentTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentType", DbType:="TinyInt")>  _
		Public Property CommentType() As System.Nullable(Of Byte)
			Get
				Return Me._CommentType
			End Get
			Set
				If (Me._CommentType.Equals(value) = false) Then
					Me.OnCommentTypeChanging(value)
					Me.SendPropertyChanging
					Me._CommentType = value
					Me.SendPropertyChanged("CommentType")
					Me.OnCommentTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abuse", DbType:="Bit")>  _
		Public Property Abuse() As System.Nullable(Of Boolean)
			Get
				Return Me._Abuse
			End Get
			Set
				If (Me._Abuse.Equals(value) = false) Then
					Me.OnAbuseChanging(value)
					Me.SendPropertyChanging
					Me._Abuse = value
					Me.SendPropertyChanged("Abuse")
					Me.OnAbuseChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDate", DbType:="Date")>  _
		Public Property CommentDate() As System.Nullable(Of Date)
			Get
				Return Me._CommentDate
			End Get
			Set
				If (Me._CommentDate.Equals(value) = false) Then
					Me.OnCommentDateChanging(value)
					Me.SendPropertyChanging
					Me._CommentDate = value
					Me.SendPropertyChanged("CommentDate")
					Me.OnCommentDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int")>  _
		Public Property ArticleId() As System.Nullable(Of Integer)
			Get
				Return Me._ArticleId
			End Get
			Set
				If (Me._ArticleId.Equals(value) = false) Then
					Me.OnArticleIdChanging(value)
					Me.SendPropertyChanging
					Me._ArticleId = value
					Me.SendPropertyChanged("ArticleId")
					Me.OnArticleIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Roles")>  _
	Partial Public Class Role
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RoleID As Integer
		
		Private _PortalID As Integer
		
		Private _RoleName As String
		
		Private _Description As String
		
		Private _ServiceFee As System.Nullable(Of Decimal)
		
		Private _BillingFrequency As System.Nullable(Of Char)
		
		Private _TrialPeriod As System.Nullable(Of Integer)
		
		Private _TrialFrequency As System.Nullable(Of Char)
		
		Private _BillingPeriod As System.Nullable(Of Integer)
		
		Private _TrialFee As System.Nullable(Of Decimal)
		
		Private _IsPublic As Boolean
		
		Private _AutoAssignment As Boolean
		
		Private _RoleGroupID As System.Nullable(Of Integer)
		
		Private _RSVPCode As String
		
		Private _IconFile As String
		
		Private _UserRoles As EntitySet(Of UserRole)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnServiceFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnServiceFeeChanged()
    End Sub
    Partial Private Sub OnBillingFrequencyChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBillingFrequencyChanged()
    End Sub
    Partial Private Sub OnTrialPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTrialPeriodChanged()
    End Sub
    Partial Private Sub OnTrialFrequencyChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnTrialFrequencyChanged()
    End Sub
    Partial Private Sub OnBillingPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBillingPeriodChanged()
    End Sub
    Partial Private Sub OnTrialFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTrialFeeChanged()
    End Sub
    Partial Private Sub OnIsPublicChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPublicChanged()
    End Sub
    Partial Private Sub OnAutoAssignmentChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAutoAssignmentChanged()
    End Sub
    Partial Private Sub OnRoleGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRoleGroupIDChanged()
    End Sub
    Partial Private Sub OnRSVPCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRSVPCodeChanged()
    End Sub
    Partial Private Sub OnIconFileChanging(value As String)
    End Sub
    Partial Private Sub OnIconFileChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._UserRoles = New EntitySet(Of UserRole)(AddressOf Me.attach_UserRoles, AddressOf Me.detach_UserRoles)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int NOT NULL")>  _
		Public Property PortalID() As Integer
			Get
				Return Me._PortalID
			End Get
			Set
				If ((Me._PortalID = value)  _
							= false) Then
					Me.OnPortalIDChanging(value)
					Me.SendPropertyChanging
					Me._PortalID = value
					Me.SendPropertyChanged("PortalID")
					Me.OnPortalIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property RoleName() As String
			Get
				Return Me._RoleName
			End Get
			Set
				If (String.Equals(Me._RoleName, value) = false) Then
					Me.OnRoleNameChanging(value)
					Me.SendPropertyChanging
					Me._RoleName = value
					Me.SendPropertyChanged("RoleName")
					Me.OnRoleNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFee", DbType:="Money")>  _
		Public Property ServiceFee() As System.Nullable(Of Decimal)
			Get
				Return Me._ServiceFee
			End Get
			Set
				If (Me._ServiceFee.Equals(value) = false) Then
					Me.OnServiceFeeChanging(value)
					Me.SendPropertyChanging
					Me._ServiceFee = value
					Me.SendPropertyChanged("ServiceFee")
					Me.OnServiceFeeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingFrequency", DbType:="Char(1)")>  _
		Public Property BillingFrequency() As System.Nullable(Of Char)
			Get
				Return Me._BillingFrequency
			End Get
			Set
				If (Me._BillingFrequency.Equals(value) = false) Then
					Me.OnBillingFrequencyChanging(value)
					Me.SendPropertyChanging
					Me._BillingFrequency = value
					Me.SendPropertyChanged("BillingFrequency")
					Me.OnBillingFrequencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrialPeriod", DbType:="Int")>  _
		Public Property TrialPeriod() As System.Nullable(Of Integer)
			Get
				Return Me._TrialPeriod
			End Get
			Set
				If (Me._TrialPeriod.Equals(value) = false) Then
					Me.OnTrialPeriodChanging(value)
					Me.SendPropertyChanging
					Me._TrialPeriod = value
					Me.SendPropertyChanged("TrialPeriod")
					Me.OnTrialPeriodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrialFrequency", DbType:="Char(1)")>  _
		Public Property TrialFrequency() As System.Nullable(Of Char)
			Get
				Return Me._TrialFrequency
			End Get
			Set
				If (Me._TrialFrequency.Equals(value) = false) Then
					Me.OnTrialFrequencyChanging(value)
					Me.SendPropertyChanging
					Me._TrialFrequency = value
					Me.SendPropertyChanged("TrialFrequency")
					Me.OnTrialFrequencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingPeriod", DbType:="Int")>  _
		Public Property BillingPeriod() As System.Nullable(Of Integer)
			Get
				Return Me._BillingPeriod
			End Get
			Set
				If (Me._BillingPeriod.Equals(value) = false) Then
					Me.OnBillingPeriodChanging(value)
					Me.SendPropertyChanging
					Me._BillingPeriod = value
					Me.SendPropertyChanged("BillingPeriod")
					Me.OnBillingPeriodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrialFee", DbType:="Money")>  _
		Public Property TrialFee() As System.Nullable(Of Decimal)
			Get
				Return Me._TrialFee
			End Get
			Set
				If (Me._TrialFee.Equals(value) = false) Then
					Me.OnTrialFeeChanging(value)
					Me.SendPropertyChanging
					Me._TrialFee = value
					Me.SendPropertyChanged("TrialFee")
					Me.OnTrialFeeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPublic", DbType:="Bit NOT NULL")>  _
		Public Property IsPublic() As Boolean
			Get
				Return Me._IsPublic
			End Get
			Set
				If ((Me._IsPublic = value)  _
							= false) Then
					Me.OnIsPublicChanging(value)
					Me.SendPropertyChanging
					Me._IsPublic = value
					Me.SendPropertyChanged("IsPublic")
					Me.OnIsPublicChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AutoAssignment", DbType:="Bit NOT NULL")>  _
		Public Property AutoAssignment() As Boolean
			Get
				Return Me._AutoAssignment
			End Get
			Set
				If ((Me._AutoAssignment = value)  _
							= false) Then
					Me.OnAutoAssignmentChanging(value)
					Me.SendPropertyChanging
					Me._AutoAssignment = value
					Me.SendPropertyChanged("AutoAssignment")
					Me.OnAutoAssignmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleGroupID", DbType:="Int")>  _
		Public Property RoleGroupID() As System.Nullable(Of Integer)
			Get
				Return Me._RoleGroupID
			End Get
			Set
				If (Me._RoleGroupID.Equals(value) = false) Then
					Me.OnRoleGroupIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleGroupID = value
					Me.SendPropertyChanged("RoleGroupID")
					Me.OnRoleGroupIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RSVPCode", DbType:="NVarChar(50)")>  _
		Public Property RSVPCode() As String
			Get
				Return Me._RSVPCode
			End Get
			Set
				If (String.Equals(Me._RSVPCode, value) = false) Then
					Me.OnRSVPCodeChanging(value)
					Me.SendPropertyChanging
					Me._RSVPCode = value
					Me.SendPropertyChanged("RSVPCode")
					Me.OnRSVPCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconFile", DbType:="NVarChar(100)")>  _
		Public Property IconFile() As String
			Get
				Return Me._IconFile
			End Get
			Set
				If (String.Equals(Me._IconFile, value) = false) Then
					Me.OnIconFileChanging(value)
					Me.SendPropertyChanging
					Me._IconFile = value
					Me.SendPropertyChanged("IconFile")
					Me.OnIconFileChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UserRole", Storage:="_UserRoles", ThisKey:="RoleID", OtherKey:="RoleID")>  _
		Public Property UserRoles() As EntitySet(Of UserRole)
			Get
				Return Me._UserRoles
			End Get
			Set
				Me._UserRoles.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_UserRoles(ByVal entity As UserRole)
			Me.SendPropertyChanging
			entity.Role = Me
		End Sub
		
		Private Sub detach_UserRoles(ByVal entity As UserRole)
			Me.SendPropertyChanging
			entity.Role = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserRoles")>  _
	Partial Public Class UserRole
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserRoleID As Integer
		
		Private _UserID As Integer
		
		Private _RoleID As Integer
		
		Private _ExpiryDate As System.Nullable(Of Date)
		
		Private _IsTrialUsed As System.Nullable(Of Boolean)
		
		Private _EffectiveDate As System.Nullable(Of Date)
		
		Private _Role As EntityRef(Of Role)
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserRoleIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnIsTrialUsedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsTrialUsedChanged()
    End Sub
    Partial Private Sub OnEffectiveDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEffectiveDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Role = CType(Nothing, EntityRef(Of Role))
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserRoleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property UserRoleID() As Integer
			Get
				Return Me._UserRoleID
			End Get
			Set
				If ((Me._UserRoleID = value)  _
							= false) Then
					Me.OnUserRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._UserRoleID = value
					Me.SendPropertyChanged("UserRoleID")
					Me.OnUserRoleIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					If Me._Role.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="DateTime")>  _
		Public Property ExpiryDate() As System.Nullable(Of Date)
			Get
				Return Me._ExpiryDate
			End Get
			Set
				If (Me._ExpiryDate.Equals(value) = false) Then
					Me.OnExpiryDateChanging(value)
					Me.SendPropertyChanging
					Me._ExpiryDate = value
					Me.SendPropertyChanged("ExpiryDate")
					Me.OnExpiryDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsTrialUsed", DbType:="Bit")>  _
		Public Property IsTrialUsed() As System.Nullable(Of Boolean)
			Get
				Return Me._IsTrialUsed
			End Get
			Set
				If (Me._IsTrialUsed.Equals(value) = false) Then
					Me.OnIsTrialUsedChanging(value)
					Me.SendPropertyChanging
					Me._IsTrialUsed = value
					Me.SendPropertyChanged("IsTrialUsed")
					Me.OnIsTrialUsedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="DateTime")>  _
		Public Property EffectiveDate() As System.Nullable(Of Date)
			Get
				Return Me._EffectiveDate
			End Get
			Set
				If (Me._EffectiveDate.Equals(value) = false) Then
					Me.OnEffectiveDateChanging(value)
					Me.SendPropertyChanging
					Me._EffectiveDate = value
					Me.SendPropertyChanged("EffectiveDate")
					Me.OnEffectiveDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UserRole", Storage:="_Role", ThisKey:="RoleID", OtherKey:="RoleID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
		Public Property Role() As Role
			Get
				Return Me._Role.Entity
			End Get
			Set
				Dim previousValue As Role = Me._Role.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Role.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Role.Entity = Nothing
						previousValue.UserRoles.Remove(Me)
					End If
					Me._Role.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UserRoles.Add(Me)
						Me._RoleID = value.RoleID
					Else
						Me._RoleID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Role")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserRole", Storage:="_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.UserRoles.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.UserRoles.Add(Me)
						Me._UserID = value.UserID
					Else
						Me._UserID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Community")>  _
	Partial Public Class Agape_Billboard_Community
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardCommId As Integer
		
		Private _AuthorId As System.Nullable(Of Integer)
		
		Private _Text As String
		
		Private _DateSub As System.Nullable(Of Date)
		
		Private _ReplyId As System.Nullable(Of Integer)
		
		Private _Sent As System.Nullable(Of Boolean)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardCommIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardCommIdChanged()
    End Sub
    Partial Private Sub OnAuthorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorIdChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnDateSubChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSubChanged()
    End Sub
    Partial Private Sub OnReplyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReplyIdChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardCommId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardCommId() As Integer
			Get
				Return Me._BillboardCommId
			End Get
			Set
				If ((Me._BillboardCommId = value)  _
							= false) Then
					Me.OnBillboardCommIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardCommId = value
					Me.SendPropertyChanged("BillboardCommId")
					Me.OnBillboardCommIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorId", DbType:="Int")>  _
		Public Property AuthorId() As System.Nullable(Of Integer)
			Get
				Return Me._AuthorId
			End Get
			Set
				If (Me._AuthorId.Equals(value) = false) Then
					Me.OnAuthorIdChanging(value)
					Me.SendPropertyChanging
					Me._AuthorId = value
					Me.SendPropertyChanged("AuthorId")
					Me.OnAuthorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(300)")>  _
		Public Property Text() As String
			Get
				Return Me._Text
			End Get
			Set
				If (String.Equals(Me._Text, value) = false) Then
					Me.OnTextChanging(value)
					Me.SendPropertyChanging
					Me._Text = value
					Me.SendPropertyChanged("Text")
					Me.OnTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSub", DbType:="Date")>  _
		Public Property DateSub() As System.Nullable(Of Date)
			Get
				Return Me._DateSub
			End Get
			Set
				If (Me._DateSub.Equals(value) = false) Then
					Me.OnDateSubChanging(value)
					Me.SendPropertyChanging
					Me._DateSub = value
					Me.SendPropertyChanged("DateSub")
					Me.OnDateSubChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReplyId", DbType:="Int")>  _
		Public Property ReplyId() As System.Nullable(Of Integer)
			Get
				Return Me._ReplyId
			End Get
			Set
				If (Me._ReplyId.Equals(value) = false) Then
					Me.OnReplyIdChanging(value)
					Me.SendPropertyChanging
					Me._ReplyId = value
					Me.SendPropertyChanged("ReplyId")
					Me.OnReplyIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Feature_Type")>  _
	Partial Public Class Agape_Billboard_Feature_Type
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FeatureTypeId As Integer
		
		Private _TypeName As String
		
		Private _TypeNumber As System.Nullable(Of Short)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFeatureTypeIdChanged()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnTypeNumberChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnTypeNumberChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FeatureTypeId() As Integer
			Get
				Return Me._FeatureTypeId
			End Get
			Set
				If ((Me._FeatureTypeId = value)  _
							= false) Then
					Me.OnFeatureTypeIdChanging(value)
					Me.SendPropertyChanging
					Me._FeatureTypeId = value
					Me.SendPropertyChanged("FeatureTypeId")
					Me.OnFeatureTypeIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeName", DbType:="NVarChar(200)")>  _
		Public Property TypeName() As String
			Get
				Return Me._TypeName
			End Get
			Set
				If (String.Equals(Me._TypeName, value) = false) Then
					Me.OnTypeNameChanging(value)
					Me.SendPropertyChanging
					Me._TypeName = value
					Me.SendPropertyChanged("TypeName")
					Me.OnTypeNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeNumber", DbType:="SmallInt")>  _
		Public Property TypeNumber() As System.Nullable(Of Short)
			Get
				Return Me._TypeNumber
			End Get
			Set
				If (Me._TypeNumber.Equals(value) = false) Then
					Me.OnTypeNumberChanging(value)
					Me.SendPropertyChanging
					Me._TypeNumber = value
					Me.SendPropertyChanged("TypeNumber")
					Me.OnTypeNumberChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Test")>  _
	Partial Public Class Agape_Billboard_Test
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardTestId As Byte
		
		Private _BillboardTest As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardTestIdChanging(value As Byte)
    End Sub
    Partial Private Sub OnBillboardTestIdChanged()
    End Sub
    Partial Private Sub OnBillboardTestChanging(value As String)
    End Sub
    Partial Private Sub OnBillboardTestChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardTestId", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property BillboardTestId() As Byte
			Get
				Return Me._BillboardTestId
			End Get
			Set
				If ((Me._BillboardTestId = value)  _
							= false) Then
					Me.OnBillboardTestIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardTestId = value
					Me.SendPropertyChanged("BillboardTestId")
					Me.OnBillboardTestIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardTest", DbType:="NVarChar(MAX)")>  _
		Public Property BillboardTest() As String
			Get
				Return Me._BillboardTest
			End Get
			Set
				If (String.Equals(Me._BillboardTest, value) = false) Then
					Me.OnBillboardTestChanging(value)
					Me.SendPropertyChanging
					Me._BillboardTest = value
					Me.SendPropertyChanged("BillboardTest")
					Me.OnBillboardTestChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Feature")>  _
	Partial Public Class Agape_Billboard_Feature
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardFeatureId As Integer
		
		Private _BillboardPhotoId As Integer
		
		Private _Headline As String
		
		Private _StoryText As String
		
		Private _StoryDate As System.Nullable(Of Date)
		
		Private _Current As System.Nullable(Of Boolean)
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Sent As System.Nullable(Of Boolean)
		
		Private _FeatType As System.Nullable(Of Short)
		
		Private _Next As System.Nullable(Of Boolean)
		
		Private _Agape_Billboard_Photo As EntityRef(Of Agape_Billboard_Photo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardFeatureIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardFeatureIdChanged()
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanged()
    End Sub
    Partial Private Sub OnHeadlineChanging(value As String)
    End Sub
    Partial Private Sub OnHeadlineChanged()
    End Sub
    Partial Private Sub OnStoryTextChanging(value As String)
    End Sub
    Partial Private Sub OnStoryTextChanged()
    End Sub
    Partial Private Sub OnStoryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStoryDateChanged()
    End Sub
    Partial Private Sub OnCurrentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnFeatTypeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFeatTypeChanged()
    End Sub
    Partial Private Sub OnNextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNextChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Billboard_Photo = CType(Nothing, EntityRef(Of Agape_Billboard_Photo))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardFeatureId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardFeatureId() As Integer
			Get
				Return Me._BillboardFeatureId
			End Get
			Set
				If ((Me._BillboardFeatureId = value)  _
							= false) Then
					Me.OnBillboardFeatureIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardFeatureId = value
					Me.SendPropertyChanged("BillboardFeatureId")
					Me.OnBillboardFeatureIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardPhotoId", DbType:="Int NOT NULL")>  _
		Public Property BillboardPhotoId() As Integer
			Get
				Return Me._BillboardPhotoId
			End Get
			Set
				If ((Me._BillboardPhotoId = value)  _
							= false) Then
					If Me._Agape_Billboard_Photo.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBillboardPhotoIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardPhotoId = value
					Me.SendPropertyChanged("BillboardPhotoId")
					Me.OnBillboardPhotoIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Headline", DbType:="NVarChar(150)")>  _
		Public Property Headline() As String
			Get
				Return Me._Headline
			End Get
			Set
				If (String.Equals(Me._Headline, value) = false) Then
					Me.OnHeadlineChanging(value)
					Me.SendPropertyChanging
					Me._Headline = value
					Me.SendPropertyChanged("Headline")
					Me.OnHeadlineChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoryText", DbType:="NVarChar(MAX)")>  _
		Public Property StoryText() As String
			Get
				Return Me._StoryText
			End Get
			Set
				If (String.Equals(Me._StoryText, value) = false) Then
					Me.OnStoryTextChanging(value)
					Me.SendPropertyChanging
					Me._StoryText = value
					Me.SendPropertyChanged("StoryText")
					Me.OnStoryTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoryDate", DbType:="Date")>  _
		Public Property StoryDate() As System.Nullable(Of Date)
			Get
				Return Me._StoryDate
			End Get
			Set
				If (Me._StoryDate.Equals(value) = false) Then
					Me.OnStoryDateChanging(value)
					Me.SendPropertyChanging
					Me._StoryDate = value
					Me.SendPropertyChanged("StoryDate")
					Me.OnStoryDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Current]", Storage:="_Current", DbType:="Bit")>  _
		Public Property Current() As System.Nullable(Of Boolean)
			Get
				Return Me._Current
			End Get
			Set
				If (Me._Current.Equals(value) = false) Then
					Me.OnCurrentChanging(value)
					Me.SendPropertyChanging
					Me._Current = value
					Me.SendPropertyChanged("Current")
					Me.OnCurrentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatType", DbType:="SmallInt")>  _
		Public Property FeatType() As System.Nullable(Of Short)
			Get
				Return Me._FeatType
			End Get
			Set
				If (Me._FeatType.Equals(value) = false) Then
					Me.OnFeatTypeChanging(value)
					Me.SendPropertyChanging
					Me._FeatType = value
					Me.SendPropertyChanged("FeatType")
					Me.OnFeatTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Next", Storage:="_Next", DbType:="Bit")>  _
		Public Property [Next]() As System.Nullable(Of Boolean)
			Get
				Return Me._Next
			End Get
			Set
				If (Me._Next.Equals(value) = false) Then
					Me.OnNextChanging(value)
					Me.SendPropertyChanging
					Me._Next = value
					Me.SendPropertyChanged("[Next]")
					Me.OnNextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Billboard_Photo_Agape_Billboard_Feature", Storage:="_Agape_Billboard_Photo", ThisKey:="BillboardPhotoId", OtherKey:="BillboardPhotoId", IsForeignKey:=true)>  _
		Public Property Agape_Billboard_Photo() As Agape_Billboard_Photo
			Get
				Return Me._Agape_Billboard_Photo.Entity
			End Get
			Set
				Dim previousValue As Agape_Billboard_Photo = Me._Agape_Billboard_Photo.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Billboard_Photo.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Billboard_Photo.Entity = Nothing
						previousValue.Agape_Billboard_Features.Remove(Me)
					End If
					Me._Agape_Billboard_Photo.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Billboard_Features.Add(Me)
						Me._BillboardPhotoId = value.BillboardPhotoId
					Else
						Me._BillboardPhotoId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Agape_Billboard_Photo")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Announcement")>  _
	Partial Public Class Agape_Billboard_Announcement
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AnnouncementId As Integer
		
		Private _AnnouncementTitle As String
		
		Private _AnnouncementText As String
		
		Private _AnnouncementDate As System.Nullable(Of Date)
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Current As System.Nullable(Of Boolean)
		
		Private _ViewOrder As System.Nullable(Of Short)
		
		Private _Sent As System.Nullable(Of Boolean)
		
		Private _Uploader As System.Nullable(Of Integer)
		
		Private _FileAttach As String
		
		Private _FileSize As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnnouncementIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnnouncementIdChanged()
    End Sub
    Partial Private Sub OnAnnouncementTitleChanging(value As String)
    End Sub
    Partial Private Sub OnAnnouncementTitleChanged()
    End Sub
    Partial Private Sub OnAnnouncementTextChanging(value As String)
    End Sub
    Partial Private Sub OnAnnouncementTextChanged()
    End Sub
    Partial Private Sub OnAnnouncementDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAnnouncementDateChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnCurrentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnUploaderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUploaderChanged()
    End Sub
    Partial Private Sub OnFileAttachChanging(value As String)
    End Sub
    Partial Private Sub OnFileAttachChanged()
    End Sub
    Partial Private Sub OnFileSizeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFileSizeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnouncementId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AnnouncementId() As Integer
			Get
				Return Me._AnnouncementId
			End Get
			Set
				If ((Me._AnnouncementId = value)  _
							= false) Then
					Me.OnAnnouncementIdChanging(value)
					Me.SendPropertyChanging
					Me._AnnouncementId = value
					Me.SendPropertyChanged("AnnouncementId")
					Me.OnAnnouncementIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnouncementTitle", DbType:="NVarChar(150)")>  _
		Public Property AnnouncementTitle() As String
			Get
				Return Me._AnnouncementTitle
			End Get
			Set
				If (String.Equals(Me._AnnouncementTitle, value) = false) Then
					Me.OnAnnouncementTitleChanging(value)
					Me.SendPropertyChanging
					Me._AnnouncementTitle = value
					Me.SendPropertyChanged("AnnouncementTitle")
					Me.OnAnnouncementTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnouncementText", DbType:="NVarChar(500)")>  _
		Public Property AnnouncementText() As String
			Get
				Return Me._AnnouncementText
			End Get
			Set
				If (String.Equals(Me._AnnouncementText, value) = false) Then
					Me.OnAnnouncementTextChanging(value)
					Me.SendPropertyChanging
					Me._AnnouncementText = value
					Me.SendPropertyChanged("AnnouncementText")
					Me.OnAnnouncementTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnouncementDate", DbType:="Date")>  _
		Public Property AnnouncementDate() As System.Nullable(Of Date)
			Get
				Return Me._AnnouncementDate
			End Get
			Set
				If (Me._AnnouncementDate.Equals(value) = false) Then
					Me.OnAnnouncementDateChanging(value)
					Me.SendPropertyChanging
					Me._AnnouncementDate = value
					Me.SendPropertyChanged("AnnouncementDate")
					Me.OnAnnouncementDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Current]", Storage:="_Current", DbType:="Bit")>  _
		Public Property Current() As System.Nullable(Of Boolean)
			Get
				Return Me._Current
			End Get
			Set
				If (Me._Current.Equals(value) = false) Then
					Me.OnCurrentChanging(value)
					Me.SendPropertyChanging
					Me._Current = value
					Me.SendPropertyChanged("Current")
					Me.OnCurrentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="SmallInt")>  _
		Public Property ViewOrder() As System.Nullable(Of Short)
			Get
				Return Me._ViewOrder
			End Get
			Set
				If (Me._ViewOrder.Equals(value) = false) Then
					Me.OnViewOrderChanging(value)
					Me.SendPropertyChanging
					Me._ViewOrder = value
					Me.SendPropertyChanged("ViewOrder")
					Me.OnViewOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uploader", DbType:="Int")>  _
		Public Property Uploader() As System.Nullable(Of Integer)
			Get
				Return Me._Uploader
			End Get
			Set
				If (Me._Uploader.Equals(value) = false) Then
					Me.OnUploaderChanging(value)
					Me.SendPropertyChanging
					Me._Uploader = value
					Me.SendPropertyChanged("Uploader")
					Me.OnUploaderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileAttach", DbType:="NVarChar(300)")>  _
		Public Property FileAttach() As String
			Get
				Return Me._FileAttach
			End Get
			Set
				If (String.Equals(Me._FileAttach, value) = false) Then
					Me.OnFileAttachChanging(value)
					Me.SendPropertyChanging
					Me._FileAttach = value
					Me.SendPropertyChanged("FileAttach")
					Me.OnFileAttachChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileSize", DbType:="Int")>  _
		Public Property FileSize() As System.Nullable(Of Integer)
			Get
				Return Me._FileSize
			End Get
			Set
				If (Me._FileSize.Equals(value) = false) Then
					Me.OnFileSizeChanging(value)
					Me.SendPropertyChanging
					Me._FileSize = value
					Me.SendPropertyChanged("FileSize")
					Me.OnFileSizeChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Article")>  _
	Partial Public Class Agape_Billboard_Article
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillbaordArticleId As Integer
		
		Private _BillboardPhotoId As System.Nullable(Of Integer)
		
		Private _Headline As String
		
		Private _StoryText As String
		
		Private _StoryDate As System.Nullable(Of Date)
		
		Private _Author As System.Nullable(Of Integer)
		
		Private _Current As System.Nullable(Of Boolean)
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Sent As System.Nullable(Of Boolean)
		
		Private _AuthorName As String
		
		Private _Agape_Billboard_Photo As EntityRef(Of Agape_Billboard_Photo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillbaordArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillbaordArticleIdChanged()
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBillboardPhotoIdChanged()
    End Sub
    Partial Private Sub OnHeadlineChanging(value As String)
    End Sub
    Partial Private Sub OnHeadlineChanged()
    End Sub
    Partial Private Sub OnStoryTextChanging(value As String)
    End Sub
    Partial Private Sub OnStoryTextChanged()
    End Sub
    Partial Private Sub OnStoryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStoryDateChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnCurrentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnAuthorNameChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Billboard_Photo = CType(Nothing, EntityRef(Of Agape_Billboard_Photo))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillbaordArticleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillbaordArticleId() As Integer
			Get
				Return Me._BillbaordArticleId
			End Get
			Set
				If ((Me._BillbaordArticleId = value)  _
							= false) Then
					Me.OnBillbaordArticleIdChanging(value)
					Me.SendPropertyChanging
					Me._BillbaordArticleId = value
					Me.SendPropertyChanged("BillbaordArticleId")
					Me.OnBillbaordArticleIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardPhotoId", DbType:="Int")>  _
		Public Property BillboardPhotoId() As System.Nullable(Of Integer)
			Get
				Return Me._BillboardPhotoId
			End Get
			Set
				If (Me._BillboardPhotoId.Equals(value) = false) Then
					If Me._Agape_Billboard_Photo.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBillboardPhotoIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardPhotoId = value
					Me.SendPropertyChanged("BillboardPhotoId")
					Me.OnBillboardPhotoIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Headline", DbType:="NVarChar(150)")>  _
		Public Property Headline() As String
			Get
				Return Me._Headline
			End Get
			Set
				If (String.Equals(Me._Headline, value) = false) Then
					Me.OnHeadlineChanging(value)
					Me.SendPropertyChanging
					Me._Headline = value
					Me.SendPropertyChanged("Headline")
					Me.OnHeadlineChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoryText", DbType:="NVarChar(MAX)")>  _
		Public Property StoryText() As String
			Get
				Return Me._StoryText
			End Get
			Set
				If (String.Equals(Me._StoryText, value) = false) Then
					Me.OnStoryTextChanging(value)
					Me.SendPropertyChanging
					Me._StoryText = value
					Me.SendPropertyChanged("StoryText")
					Me.OnStoryTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoryDate", DbType:="SmallDateTime")>  _
		Public Property StoryDate() As System.Nullable(Of Date)
			Get
				Return Me._StoryDate
			End Get
			Set
				If (Me._StoryDate.Equals(value) = false) Then
					Me.OnStoryDateChanging(value)
					Me.SendPropertyChanging
					Me._StoryDate = value
					Me.SendPropertyChanged("StoryDate")
					Me.OnStoryDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="Int")>  _
		Public Property Author() As System.Nullable(Of Integer)
			Get
				Return Me._Author
			End Get
			Set
				If (Me._Author.Equals(value) = false) Then
					Me.OnAuthorChanging(value)
					Me.SendPropertyChanging
					Me._Author = value
					Me.SendPropertyChanged("Author")
					Me.OnAuthorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Current]", Storage:="_Current", DbType:="Bit")>  _
		Public Property Current() As System.Nullable(Of Boolean)
			Get
				Return Me._Current
			End Get
			Set
				If (Me._Current.Equals(value) = false) Then
					Me.OnCurrentChanging(value)
					Me.SendPropertyChanging
					Me._Current = value
					Me.SendPropertyChanged("Current")
					Me.OnCurrentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorName", DbType:="NVarChar(200)")>  _
		Public Property AuthorName() As String
			Get
				Return Me._AuthorName
			End Get
			Set
				If (String.Equals(Me._AuthorName, value) = false) Then
					Me.OnAuthorNameChanging(value)
					Me.SendPropertyChanging
					Me._AuthorName = value
					Me.SendPropertyChanged("AuthorName")
					Me.OnAuthorNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Billboard_Photo_Agape_Billboard_Article", Storage:="_Agape_Billboard_Photo", ThisKey:="BillboardPhotoId", OtherKey:="BillboardPhotoId", IsForeignKey:=true)>  _
		Public Property Agape_Billboard_Photo() As Agape_Billboard_Photo
			Get
				Return Me._Agape_Billboard_Photo.Entity
			End Get
			Set
				Dim previousValue As Agape_Billboard_Photo = Me._Agape_Billboard_Photo.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Billboard_Photo.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Billboard_Photo.Entity = Nothing
						previousValue.Agape_Billboard_Articles.Remove(Me)
					End If
					Me._Agape_Billboard_Photo.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Billboard_Articles.Add(Me)
						Me._BillboardPhotoId = value.BillboardPhotoId
					Else
						Me._BillboardPhotoId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Agape_Billboard_Photo")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Send")>  _
	Partial Public Class Agape_Billboard_Send
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardSendId As Long
		
		Private _SendDate As System.Nullable(Of Date)
		
		Private _ErrorSend As String
		
		Private _EmailSent As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardSendIdChanging(value As Long)
    End Sub
    Partial Private Sub OnBillboardSendIdChanged()
    End Sub
    Partial Private Sub OnSendDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSendDateChanged()
    End Sub
    Partial Private Sub OnErrorSendChanging(value As String)
    End Sub
    Partial Private Sub OnErrorSendChanged()
    End Sub
    Partial Private Sub OnEmailSentChanging(value As String)
    End Sub
    Partial Private Sub OnEmailSentChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardSendId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardSendId() As Long
			Get
				Return Me._BillboardSendId
			End Get
			Set
				If ((Me._BillboardSendId = value)  _
							= false) Then
					Me.OnBillboardSendIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardSendId = value
					Me.SendPropertyChanged("BillboardSendId")
					Me.OnBillboardSendIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendDate", DbType:="Date")>  _
		Public Property SendDate() As System.Nullable(Of Date)
			Get
				Return Me._SendDate
			End Get
			Set
				If (Me._SendDate.Equals(value) = false) Then
					Me.OnSendDateChanging(value)
					Me.SendPropertyChanging
					Me._SendDate = value
					Me.SendPropertyChanged("SendDate")
					Me.OnSendDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorSend", DbType:="NVarChar(500)")>  _
		Public Property ErrorSend() As String
			Get
				Return Me._ErrorSend
			End Get
			Set
				If (String.Equals(Me._ErrorSend, value) = false) Then
					Me.OnErrorSendChanging(value)
					Me.SendPropertyChanging
					Me._ErrorSend = value
					Me.SendPropertyChanged("ErrorSend")
					Me.OnErrorSendChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailSent", DbType:="NVarChar(MAX)")>  _
		Public Property EmailSent() As String
			Get
				Return Me._EmailSent
			End Get
			Set
				If (String.Equals(Me._EmailSent, value) = false) Then
					Me.OnEmailSentChanging(value)
					Me.SendPropertyChanging
					Me._EmailSent = value
					Me.SendPropertyChanged("EmailSent")
					Me.OnEmailSentChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Global")>  _
	Partial Public Class Agape_Billboard_Global
		
		Private _BillArtTabId As System.Nullable(Of Integer)
		
		Private _BillFeatTabId As System.Nullable(Of Integer)
		
		Private _BillMainTabId As System.Nullable(Of Integer)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillArtTabId", DbType:="Int")>  _
		Public Property BillArtTabId() As System.Nullable(Of Integer)
			Get
				Return Me._BillArtTabId
			End Get
			Set
				If (Me._BillArtTabId.Equals(value) = false) Then
					Me._BillArtTabId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillFeatTabId", DbType:="Int")>  _
		Public Property BillFeatTabId() As System.Nullable(Of Integer)
			Get
				Return Me._BillFeatTabId
			End Get
			Set
				If (Me._BillFeatTabId.Equals(value) = false) Then
					Me._BillFeatTabId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillMainTabId", DbType:="Int")>  _
		Public Property BillMainTabId() As System.Nullable(Of Integer)
			Get
				Return Me._BillMainTabId
			End Get
			Set
				If (Me._BillMainTabId.Equals(value) = false) Then
					Me._BillMainTabId = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Billboard_Prayer")>  _
	Partial Public Class Agape_Billboard_Prayer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _BillboardPrayerId As Long
		
		Private _PrayerTitle As String
		
		Private _PrayerText As String
		
		Private _SubmittedBy As System.Nullable(Of Integer)
		
		Private _SubmittedDate As System.Nullable(Of Date)
		
		Private _PortalId As System.Nullable(Of Integer)
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Sent As System.Nullable(Of Boolean)
		
		Private _Current As System.Nullable(Of Boolean)
		
		Private _SubBehalf As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBillboardPrayerIdChanging(value As Long)
    End Sub
    Partial Private Sub OnBillboardPrayerIdChanged()
    End Sub
    Partial Private Sub OnPrayerTitleChanging(value As String)
    End Sub
    Partial Private Sub OnPrayerTitleChanged()
    End Sub
    Partial Private Sub OnPrayerTextChanging(value As String)
    End Sub
    Partial Private Sub OnPrayerTextChanged()
    End Sub
    Partial Private Sub OnSubmittedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubmittedByChanged()
    End Sub
    Partial Private Sub OnSubmittedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSubmittedDateChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnCurrentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentChanged()
    End Sub
    Partial Private Sub OnSubBehalfChanging(value As String)
    End Sub
    Partial Private Sub OnSubBehalfChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillboardPrayerId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property BillboardPrayerId() As Long
			Get
				Return Me._BillboardPrayerId
			End Get
			Set
				If ((Me._BillboardPrayerId = value)  _
							= false) Then
					Me.OnBillboardPrayerIdChanging(value)
					Me.SendPropertyChanging
					Me._BillboardPrayerId = value
					Me.SendPropertyChanged("BillboardPrayerId")
					Me.OnBillboardPrayerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrayerTitle", DbType:="NVarChar(200)")>  _
		Public Property PrayerTitle() As String
			Get
				Return Me._PrayerTitle
			End Get
			Set
				If (String.Equals(Me._PrayerTitle, value) = false) Then
					Me.OnPrayerTitleChanging(value)
					Me.SendPropertyChanging
					Me._PrayerTitle = value
					Me.SendPropertyChanged("PrayerTitle")
					Me.OnPrayerTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrayerText", DbType:="NVarChar(MAX)")>  _
		Public Property PrayerText() As String
			Get
				Return Me._PrayerText
			End Get
			Set
				If (String.Equals(Me._PrayerText, value) = false) Then
					Me.OnPrayerTextChanging(value)
					Me.SendPropertyChanging
					Me._PrayerText = value
					Me.SendPropertyChanged("PrayerText")
					Me.OnPrayerTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedBy", DbType:="Int")>  _
		Public Property SubmittedBy() As System.Nullable(Of Integer)
			Get
				Return Me._SubmittedBy
			End Get
			Set
				If (Me._SubmittedBy.Equals(value) = false) Then
					Me.OnSubmittedByChanging(value)
					Me.SendPropertyChanging
					Me._SubmittedBy = value
					Me.SendPropertyChanged("SubmittedBy")
					Me.OnSubmittedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedDate", DbType:="DateTime")>  _
		Public Property SubmittedDate() As System.Nullable(Of Date)
			Get
				Return Me._SubmittedDate
			End Get
			Set
				If (Me._SubmittedDate.Equals(value) = false) Then
					Me.OnSubmittedDateChanging(value)
					Me.SendPropertyChanging
					Me._SubmittedDate = value
					Me.SendPropertyChanged("SubmittedDate")
					Me.OnSubmittedDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
		Public Property PortalId() As System.Nullable(Of Integer)
			Get
				Return Me._PortalId
			End Get
			Set
				If (Me._PortalId.Equals(value) = false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
		Public Property Sent() As System.Nullable(Of Boolean)
			Get
				Return Me._Sent
			End Get
			Set
				If (Me._Sent.Equals(value) = false) Then
					Me.OnSentChanging(value)
					Me.SendPropertyChanging
					Me._Sent = value
					Me.SendPropertyChanged("Sent")
					Me.OnSentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Current]", Storage:="_Current", DbType:="Bit")>  _
		Public Property Current() As System.Nullable(Of Boolean)
			Get
				Return Me._Current
			End Get
			Set
				If (Me._Current.Equals(value) = false) Then
					Me.OnCurrentChanging(value)
					Me.SendPropertyChanging
					Me._Current = value
					Me.SendPropertyChanged("Current")
					Me.OnCurrentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubBehalf", DbType:="NVarChar(200)")>  _
		Public Property SubBehalf() As String
			Get
				Return Me._SubBehalf
			End Get
			Set
				If (String.Equals(Me._SubBehalf, value) = false) Then
					Me.OnSubBehalfChanging(value)
					Me.SendPropertyChanging
					Me._SubBehalf = value
					Me.SendPropertyChanged("SubBehalf")
					Me.OnSubBehalfChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
