'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace MPD
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
	Partial Public Class MPDDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
    Partial Private Sub UpdateAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
    Partial Private Sub DeleteAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
    Partial Private Sub InsertAP_mpdCalc_Section(instance As AP_mpdCalc_Section)
    End Sub
    Partial Private Sub UpdateAP_mpdCalc_Section(instance As AP_mpdCalc_Section)
    End Sub
    Partial Private Sub DeleteAP_mpdCalc_Section(instance As AP_mpdCalc_Section)
    End Sub
    Partial Private Sub InsertAP_mpdCalc_Question(instance As AP_mpdCalc_Question)
    End Sub
    Partial Private Sub UpdateAP_mpdCalc_Question(instance As AP_mpdCalc_Question)
    End Sub
    Partial Private Sub DeleteAP_mpdCalc_Question(instance As AP_mpdCalc_Question)
    End Sub
    Partial Private Sub InsertAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
    Partial Private Sub UpdateAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
    Partial Private Sub DeleteAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
    Partial Private Sub InsertAP_mpdCalc_Answer(instance As AP_mpdCalc_Answer)
    End Sub
    Partial Private Sub UpdateAP_mpdCalc_Answer(instance As AP_mpdCalc_Answer)
    End Sub
    Partial Private Sub DeleteAP_mpdCalc_Answer(instance As AP_mpdCalc_Answer)
    End Sub
    Partial Private Sub InsertAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
    Partial Private Sub UpdateAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
    Partial Private Sub DeleteAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
    Partial Private Sub InsertAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
    Partial Private Sub UpdateAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
    Partial Private Sub DeleteAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
    Partial Private Sub InsertAp_mpd_User(instance As Ap_mpd_User)
    End Sub
    Partial Private Sub UpdateAp_mpd_User(instance As Ap_mpd_User)
    End Sub
    Partial Private Sub DeleteAp_mpd_User(instance As Ap_mpd_User)
    End Sub
    Partial Private Sub Insertministry_system(instance As ministry_system)
    End Sub
    Partial Private Sub Updateministry_system(instance As ministry_system)
    End Sub
    Partial Private Sub Deleteministry_system(instance As ministry_system)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property AP_mpdCalc_Definitions() As System.Data.Linq.Table(Of AP_mpdCalc_Definition)
			Get
				Return Me.GetTable(Of AP_mpdCalc_Definition)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpdCalc_Sections() As System.Data.Linq.Table(Of AP_mpdCalc_Section)
			Get
				Return Me.GetTable(Of AP_mpdCalc_Section)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpdCalc_Questions() As System.Data.Linq.Table(Of AP_mpdCalc_Question)
			Get
				Return Me.GetTable(Of AP_mpdCalc_Question)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpdCalc_StaffBudgets() As System.Data.Linq.Table(Of AP_mpdCalc_StaffBudget)
			Get
				Return Me.GetTable(Of AP_mpdCalc_StaffBudget)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpdCalc_Answers() As System.Data.Linq.Table(Of AP_mpdCalc_Answer)
			Get
				Return Me.GetTable(Of AP_mpdCalc_Answer)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpd_Countries() As System.Data.Linq.Table(Of AP_mpd_Country)
			Get
				Return Me.GetTable(Of AP_mpd_Country)
			End Get
		End Property
		
		Public ReadOnly Property AP_mpd_UserAccountInfos() As System.Data.Linq.Table(Of AP_mpd_UserAccountInfo)
			Get
				Return Me.GetTable(Of AP_mpd_UserAccountInfo)
			End Get
		End Property
		
		Public ReadOnly Property Ap_mpd_Users() As System.Data.Linq.Table(Of Ap_mpd_User)
			Get
				Return Me.GetTable(Of Ap_mpd_User)
			End Get
		End Property
		
		Public ReadOnly Property ministry_systems() As System.Data.Linq.Table(Of ministry_system)
			Get
				Return Me.GetTable(Of ministry_system)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Definition")>  _
	Partial Public Class AP_mpdCalc_Definition
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _mpdDefId As Integer
		
		Private _TabModuleId As Integer
		
		Private _PortalId As Integer
		
		Private _ActiveFromYear As Short
		
		Private _AssessmentRate As Double
		
		Private _ShowComplience As Boolean
		
		Private _Complience As String
		
		Private _FirstBudgetPeriod As System.Nullable(Of Byte)
		
		Private _StaffTypes As String
		
		Private _Compensation As String
		
		Private _Assessment As String
		
		Private _DefaultAccount As String
		
		Private _AuthUser As System.Nullable(Of Integer)
		
		Private _AuthAuthUser As System.Nullable(Of Integer)
		
		Private _AP_mpdCalc_Sections As EntitySet(Of AP_mpdCalc_Section)
		
		Private _AP_mpdCalc_StaffBudgets As EntitySet(Of AP_mpdCalc_StaffBudget)
		
		Private _AP_mpd_Countries As EntityRef(Of AP_mpd_Country)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    Partial Private Sub OnTabModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTabModuleIdChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnActiveFromYearChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveFromYearChanged()
    End Sub
    Partial Private Sub OnAssessmentRateChanging(value As Double)
    End Sub
    Partial Private Sub OnAssessmentRateChanged()
    End Sub
    Partial Private Sub OnShowComplienceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowComplienceChanged()
    End Sub
    Partial Private Sub OnComplienceChanging(value As String)
    End Sub
    Partial Private Sub OnComplienceChanged()
    End Sub
    Partial Private Sub OnFirstBudgetPeriodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnFirstBudgetPeriodChanged()
    End Sub
    Partial Private Sub OnStaffTypesChanging(value As String)
    End Sub
    Partial Private Sub OnStaffTypesChanged()
    End Sub
    Partial Private Sub OnCompensationChanging(value As String)
    End Sub
    Partial Private Sub OnCompensationChanged()
    End Sub
    Partial Private Sub OnAssessmentChanging(value As String)
    End Sub
    Partial Private Sub OnAssessmentChanged()
    End Sub
    Partial Private Sub OnDefaultAccountChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultAccountChanged()
    End Sub
    Partial Private Sub OnAuthUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthUserChanged()
    End Sub
    Partial Private Sub OnAuthAuthUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthAuthUserChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpdCalc_Sections = New EntitySet(Of AP_mpdCalc_Section)(AddressOf Me.attach_AP_mpdCalc_Sections, AddressOf Me.detach_AP_mpdCalc_Sections)
			Me._AP_mpdCalc_StaffBudgets = New EntitySet(Of AP_mpdCalc_StaffBudget)(AddressOf Me.attach_AP_mpdCalc_StaffBudgets, AddressOf Me.detach_AP_mpdCalc_StaffBudgets)
			Me._AP_mpd_Countries = CType(Nothing, EntityRef(Of AP_mpd_Country))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property mpdDefId() As Integer
			Get
				Return Me._mpdDefId
			End Get
			Set
				If ((Me._mpdDefId = value)  _
							= false) Then
					Me.OnmpdDefIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdDefId = value
					Me.SendPropertyChanged("mpdDefId")
					Me.OnmpdDefIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabModuleId", DbType:="Int NOT NULL")>  _
		Public Property TabModuleId() As Integer
			Get
				Return Me._TabModuleId
			End Get
			Set
				If ((Me._TabModuleId = value)  _
							= false) Then
					Me.OnTabModuleIdChanging(value)
					Me.SendPropertyChanging
					Me._TabModuleId = value
					Me.SendPropertyChanged("TabModuleId")
					Me.OnTabModuleIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
		Public Property PortalId() As Integer
			Get
				Return Me._PortalId
			End Get
			Set
				If ((Me._PortalId = value)  _
							= false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActiveFromYear", DbType:="SmallInt NOT NULL")>  _
		Public Property ActiveFromYear() As Short
			Get
				Return Me._ActiveFromYear
			End Get
			Set
				If ((Me._ActiveFromYear = value)  _
							= false) Then
					Me.OnActiveFromYearChanging(value)
					Me.SendPropertyChanging
					Me._ActiveFromYear = value
					Me.SendPropertyChanged("ActiveFromYear")
					Me.OnActiveFromYearChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssessmentRate", DbType:="Float NOT NULL")>  _
		Public Property AssessmentRate() As Double
			Get
				Return Me._AssessmentRate
			End Get
			Set
				If ((Me._AssessmentRate = value)  _
							= false) Then
					Me.OnAssessmentRateChanging(value)
					Me.SendPropertyChanging
					Me._AssessmentRate = value
					Me.SendPropertyChanged("AssessmentRate")
					Me.OnAssessmentRateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowComplience", DbType:="Bit NOT NULL")>  _
		Public Property ShowComplience() As Boolean
			Get
				Return Me._ShowComplience
			End Get
			Set
				If ((Me._ShowComplience = value)  _
							= false) Then
					Me.OnShowComplienceChanging(value)
					Me.SendPropertyChanging
					Me._ShowComplience = value
					Me.SendPropertyChanged("ShowComplience")
					Me.OnShowComplienceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complience", DbType:="NVarChar(MAX)")>  _
		Public Property Complience() As String
			Get
				Return Me._Complience
			End Get
			Set
				If (String.Equals(Me._Complience, value) = false) Then
					Me.OnComplienceChanging(value)
					Me.SendPropertyChanging
					Me._Complience = value
					Me.SendPropertyChanged("Complience")
					Me.OnComplienceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstBudgetPeriod", DbType:="TinyInt")>  _
		Public Property FirstBudgetPeriod() As System.Nullable(Of Byte)
			Get
				Return Me._FirstBudgetPeriod
			End Get
			Set
				If (Me._FirstBudgetPeriod.Equals(value) = false) Then
					Me.OnFirstBudgetPeriodChanging(value)
					Me.SendPropertyChanging
					Me._FirstBudgetPeriod = value
					Me.SendPropertyChanged("FirstBudgetPeriod")
					Me.OnFirstBudgetPeriodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypes", DbType:="VarChar(100)")>  _
		Public Property StaffTypes() As String
			Get
				Return Me._StaffTypes
			End Get
			Set
				If (String.Equals(Me._StaffTypes, value) = false) Then
					Me.OnStaffTypesChanging(value)
					Me.SendPropertyChanging
					Me._StaffTypes = value
					Me.SendPropertyChanged("StaffTypes")
					Me.OnStaffTypesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compensation", DbType:="NVarChar(MAX)")>  _
		Public Property Compensation() As String
			Get
				Return Me._Compensation
			End Get
			Set
				If (String.Equals(Me._Compensation, value) = false) Then
					Me.OnCompensationChanging(value)
					Me.SendPropertyChanging
					Me._Compensation = value
					Me.SendPropertyChanged("Compensation")
					Me.OnCompensationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assessment", DbType:="NVarChar(MAX)")>  _
		Public Property Assessment() As String
			Get
				Return Me._Assessment
			End Get
			Set
				If (String.Equals(Me._Assessment, value) = false) Then
					Me.OnAssessmentChanging(value)
					Me.SendPropertyChanging
					Me._Assessment = value
					Me.SendPropertyChanged("Assessment")
					Me.OnAssessmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultAccount", DbType:="NVarChar(20)")>  _
		Public Property DefaultAccount() As String
			Get
				Return Me._DefaultAccount
			End Get
			Set
				If (String.Equals(Me._DefaultAccount, value) = false) Then
					Me.OnDefaultAccountChanging(value)
					Me.SendPropertyChanging
					Me._DefaultAccount = value
					Me.SendPropertyChanged("DefaultAccount")
					Me.OnDefaultAccountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthUser", DbType:="Int")>  _
		Public Property AuthUser() As System.Nullable(Of Integer)
			Get
				Return Me._AuthUser
			End Get
			Set
				If (Me._AuthUser.Equals(value) = false) Then
					Me.OnAuthUserChanging(value)
					Me.SendPropertyChanging
					Me._AuthUser = value
					Me.SendPropertyChanged("AuthUser")
					Me.OnAuthUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthAuthUser", DbType:="Int")>  _
		Public Property AuthAuthUser() As System.Nullable(Of Integer)
			Get
				Return Me._AuthAuthUser
			End Get
			Set
				If (Me._AuthAuthUser.Equals(value) = false) Then
					Me.OnAuthAuthUserChanging(value)
					Me.SendPropertyChanging
					Me._AuthAuthUser = value
					Me.SendPropertyChanged("AuthAuthUser")
					Me.OnAuthAuthUserChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_Section", Storage:="_AP_mpdCalc_Sections", ThisKey:="mpdDefId", OtherKey:="mpdDefId")>  _
		Public Property AP_mpdCalc_Sections() As EntitySet(Of AP_mpdCalc_Section)
			Get
				Return Me._AP_mpdCalc_Sections
			End Get
			Set
				Me._AP_mpdCalc_Sections.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_StaffBudgets", ThisKey:="mpdDefId", OtherKey:="DefinitionId")>  _
		Public Property AP_mpdCalc_StaffBudgets() As EntitySet(Of AP_mpdCalc_StaffBudget)
			Get
				Return Me._AP_mpdCalc_StaffBudgets
			End Get
			Set
				Me._AP_mpdCalc_StaffBudgets.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpd_Countries", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsUnique:=true, IsForeignKey:=false)>  _
		Public Property AP_mpd_Countries() As AP_mpd_Country
			Get
				Return Me._AP_mpd_Countries.Entity
			End Get
			Set
				Dim previousValue As AP_mpd_Country = Me._AP_mpd_Countries.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpd_Countries.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpd_Countries.Entity = Nothing
						previousValue.AP_mpdCalc_Definition = Nothing
					End If
					Me._AP_mpd_Countries.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.AP_mpdCalc_Definition = Me
					End If
					Me.SendPropertyChanged("AP_mpd_Countries")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_mpdCalc_Sections(ByVal entity As AP_mpdCalc_Section)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Definition = Me
		End Sub
		
		Private Sub detach_AP_mpdCalc_Sections(ByVal entity As AP_mpdCalc_Section)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Definition = Nothing
		End Sub
		
		Private Sub attach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Definition = Me
		End Sub
		
		Private Sub detach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Definition = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Section")>  _
	Partial Public Class AP_mpdCalc_Section
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SectionId As Integer
		
		Private _Number As Short
		
		Private _Name As String
		
		Private _TotalMode As String
		
		Private _mpdDefId As Integer
		
		Private _AP_mpdCalc_Questions As EntitySet(Of AP_mpdCalc_Question)
		
		Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSectionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionIdChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As Short)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTotalModeChanging(value As String)
    End Sub
    Partial Private Sub OnTotalModeChanged()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpdCalc_Questions = New EntitySet(Of AP_mpdCalc_Question)(AddressOf Me.attach_AP_mpdCalc_Questions, AddressOf Me.detach_AP_mpdCalc_Questions)
			Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property SectionId() As Integer
			Get
				Return Me._SectionId
			End Get
			Set
				If ((Me._SectionId = value)  _
							= false) Then
					Me.OnSectionIdChanging(value)
					Me.SendPropertyChanging
					Me._SectionId = value
					Me.SendPropertyChanged("SectionId")
					Me.OnSectionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="SmallInt NOT NULL")>  _
		Public Property Number() As Short
			Get
				Return Me._Number
			End Get
			Set
				If ((Me._Number = value)  _
							= false) Then
					Me.OnNumberChanging(value)
					Me.SendPropertyChanging
					Me._Number = value
					Me.SendPropertyChanged("Number")
					Me.OnNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(120) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalMode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property TotalMode() As String
			Get
				Return Me._TotalMode
			End Get
			Set
				If (String.Equals(Me._TotalMode, value) = false) Then
					Me.OnTotalModeChanging(value)
					Me.SendPropertyChanging
					Me._TotalMode = value
					Me.SendPropertyChanged("TotalMode")
					Me.OnTotalModeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", DbType:="Int NOT NULL")>  _
		Public Property mpdDefId() As Integer
			Get
				Return Me._mpdDefId
			End Get
			Set
				If ((Me._mpdDefId = value)  _
							= false) Then
					If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmpdDefIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdDefId = value
					Me.SendPropertyChanged("mpdDefId")
					Me.OnmpdDefIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Section_AP_mpdCalc_Question", Storage:="_AP_mpdCalc_Questions", ThisKey:="SectionId", OtherKey:="SectionId")>  _
		Public Property AP_mpdCalc_Questions() As EntitySet(Of AP_mpdCalc_Question)
			Get
				Return Me._AP_mpdCalc_Questions
			End Get
			Set
				Me._AP_mpdCalc_Questions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_Section", Storage:="_AP_mpdCalc_Definition", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
			Get
				Return Me._AP_mpdCalc_Definition.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_Definition.Entity = Nothing
						previousValue.AP_mpdCalc_Sections.Remove(Me)
					End If
					Me._AP_mpdCalc_Definition.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpdCalc_Sections.Add(Me)
						Me._mpdDefId = value.mpdDefId
					Else
						Me._mpdDefId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_mpdCalc_Definition")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_mpdCalc_Questions(ByVal entity As AP_mpdCalc_Question)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Section = Me
		End Sub
		
		Private Sub detach_AP_mpdCalc_Questions(ByVal entity As AP_mpdCalc_Question)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Section = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Question")>  _
	Partial Public Class AP_mpdCalc_Question
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _QuestionId As Long
		
		Private _SectionId As Integer
		
		Private _QuestionNumber As Short
		
		Private _Name As String
		
		Private _Type As String
		
		Private _Min As String
		
		Private _Max As String
		
		Private _Formula As String
		
		Private _Help As String
		
		Private _AccountCode As String
		
		Private _Rate1 As System.Nullable(Of Double)
		
		Private _Threshold1 As System.Nullable(Of Decimal)
		
		Private _Rate2 As System.Nullable(Of Double)
		
		Private _Threshold2 As System.Nullable(Of Decimal)
		
		Private _Rate3 As System.Nullable(Of Double)
		
		Private _Threshold3 As System.Nullable(Of Decimal)
		
		Private _Rate4 As System.Nullable(Of Double)
		
		Private _Fixed As System.Nullable(Of Decimal)
		
		Private _TaxSystem As String
		
		Private _AP_mpdCalc_Answers As EntitySet(Of AP_mpdCalc_Answer)
		
		Private _AP_mpdCalc_Section As EntityRef(Of AP_mpdCalc_Section)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuestionIdChanging(value As Long)
    End Sub
    Partial Private Sub OnQuestionIdChanged()
    End Sub
    Partial Private Sub OnSectionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectionIdChanged()
    End Sub
    Partial Private Sub OnQuestionNumberChanging(value As Short)
    End Sub
    Partial Private Sub OnQuestionNumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnMinChanging(value As String)
    End Sub
    Partial Private Sub OnMinChanged()
    End Sub
    Partial Private Sub OnMaxChanging(value As String)
    End Sub
    Partial Private Sub OnMaxChanged()
    End Sub
    Partial Private Sub OnFormulaChanging(value As String)
    End Sub
    Partial Private Sub OnFormulaChanged()
    End Sub
    Partial Private Sub OnHelpChanging(value As String)
    End Sub
    Partial Private Sub OnHelpChanged()
    End Sub
    Partial Private Sub OnAccountCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAccountCodeChanged()
    End Sub
    Partial Private Sub OnRate1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRate1Changed()
    End Sub
    Partial Private Sub OnThreshold1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnThreshold1Changed()
    End Sub
    Partial Private Sub OnRate2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRate2Changed()
    End Sub
    Partial Private Sub OnThreshold2Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnThreshold2Changed()
    End Sub
    Partial Private Sub OnRate3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRate3Changed()
    End Sub
    Partial Private Sub OnThreshold3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnThreshold3Changed()
    End Sub
    Partial Private Sub OnRate4Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRate4Changed()
    End Sub
    Partial Private Sub OnFixedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFixedChanged()
    End Sub
    Partial Private Sub OnTaxSystemChanging(value As String)
    End Sub
    Partial Private Sub OnTaxSystemChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpdCalc_Answers = New EntitySet(Of AP_mpdCalc_Answer)(AddressOf Me.attach_AP_mpdCalc_Answers, AddressOf Me.detach_AP_mpdCalc_Answers)
			Me._AP_mpdCalc_Section = CType(Nothing, EntityRef(Of AP_mpdCalc_Section))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property QuestionId() As Long
			Get
				Return Me._QuestionId
			End Get
			Set
				If ((Me._QuestionId = value)  _
							= false) Then
					Me.OnQuestionIdChanging(value)
					Me.SendPropertyChanging
					Me._QuestionId = value
					Me.SendPropertyChanged("QuestionId")
					Me.OnQuestionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionId", DbType:="Int NOT NULL")>  _
		Public Property SectionId() As Integer
			Get
				Return Me._SectionId
			End Get
			Set
				If ((Me._SectionId = value)  _
							= false) Then
					If Me._AP_mpdCalc_Section.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSectionIdChanging(value)
					Me.SendPropertyChanging
					Me._SectionId = value
					Me.SendPropertyChanged("SectionId")
					Me.OnSectionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionNumber", DbType:="SmallInt NOT NULL")>  _
		Public Property QuestionNumber() As Short
			Get
				Return Me._QuestionNumber
			End Get
			Set
				If ((Me._QuestionNumber = value)  _
							= false) Then
					Me.OnQuestionNumberChanging(value)
					Me.SendPropertyChanging
					Me._QuestionNumber = value
					Me.SendPropertyChanged("QuestionNumber")
					Me.OnQuestionNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(120) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Type() As String
			Get
				Return Me._Type
			End Get
			Set
				If (String.Equals(Me._Type, value) = false) Then
					Me.OnTypeChanging(value)
					Me.SendPropertyChanging
					Me._Type = value
					Me.SendPropertyChanged("Type")
					Me.OnTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Min", DbType:="NVarChar(400) NOT NULL", CanBeNull:=false)>  _
		Public Property Min() As String
			Get
				Return Me._Min
			End Get
			Set
				If (String.Equals(Me._Min, value) = false) Then
					Me.OnMinChanging(value)
					Me.SendPropertyChanging
					Me._Min = value
					Me.SendPropertyChanged("Min")
					Me.OnMinChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Max", DbType:="NVarChar(400)")>  _
		Public Property Max() As String
			Get
				Return Me._Max
			End Get
			Set
				If (String.Equals(Me._Max, value) = false) Then
					Me.OnMaxChanging(value)
					Me.SendPropertyChanging
					Me._Max = value
					Me.SendPropertyChanged("Max")
					Me.OnMaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Formula", DbType:="NVarChar(MAX)")>  _
		Public Property Formula() As String
			Get
				Return Me._Formula
			End Get
			Set
				If (String.Equals(Me._Formula, value) = false) Then
					Me.OnFormulaChanging(value)
					Me.SendPropertyChanging
					Me._Formula = value
					Me.SendPropertyChanged("Formula")
					Me.OnFormulaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Help", DbType:="NVarChar(MAX)")>  _
		Public Property Help() As String
			Get
				Return Me._Help
			End Get
			Set
				If (String.Equals(Me._Help, value) = false) Then
					Me.OnHelpChanging(value)
					Me.SendPropertyChanging
					Me._Help = value
					Me.SendPropertyChanged("Help")
					Me.OnHelpChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountCode", DbType:="NVarChar(20)")>  _
		Public Property AccountCode() As String
			Get
				Return Me._AccountCode
			End Get
			Set
				If (String.Equals(Me._AccountCode, value) = false) Then
					Me.OnAccountCodeChanging(value)
					Me.SendPropertyChanging
					Me._AccountCode = value
					Me.SendPropertyChanged("AccountCode")
					Me.OnAccountCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate1", DbType:="Float")>  _
		Public Property Rate1() As System.Nullable(Of Double)
			Get
				Return Me._Rate1
			End Get
			Set
				If (Me._Rate1.Equals(value) = false) Then
					Me.OnRate1Changing(value)
					Me.SendPropertyChanging
					Me._Rate1 = value
					Me.SendPropertyChanged("Rate1")
					Me.OnRate1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Threshold1", DbType:="Money")>  _
		Public Property Threshold1() As System.Nullable(Of Decimal)
			Get
				Return Me._Threshold1
			End Get
			Set
				If (Me._Threshold1.Equals(value) = false) Then
					Me.OnThreshold1Changing(value)
					Me.SendPropertyChanging
					Me._Threshold1 = value
					Me.SendPropertyChanged("Threshold1")
					Me.OnThreshold1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate2", DbType:="Float")>  _
		Public Property Rate2() As System.Nullable(Of Double)
			Get
				Return Me._Rate2
			End Get
			Set
				If (Me._Rate2.Equals(value) = false) Then
					Me.OnRate2Changing(value)
					Me.SendPropertyChanging
					Me._Rate2 = value
					Me.SendPropertyChanged("Rate2")
					Me.OnRate2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Threshold2", DbType:="Money")>  _
		Public Property Threshold2() As System.Nullable(Of Decimal)
			Get
				Return Me._Threshold2
			End Get
			Set
				If (Me._Threshold2.Equals(value) = false) Then
					Me.OnThreshold2Changing(value)
					Me.SendPropertyChanging
					Me._Threshold2 = value
					Me.SendPropertyChanged("Threshold2")
					Me.OnThreshold2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate3", DbType:="Float")>  _
		Public Property Rate3() As System.Nullable(Of Double)
			Get
				Return Me._Rate3
			End Get
			Set
				If (Me._Rate3.Equals(value) = false) Then
					Me.OnRate3Changing(value)
					Me.SendPropertyChanging
					Me._Rate3 = value
					Me.SendPropertyChanged("Rate3")
					Me.OnRate3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Threshold3", DbType:="Money")>  _
		Public Property Threshold3() As System.Nullable(Of Decimal)
			Get
				Return Me._Threshold3
			End Get
			Set
				If (Me._Threshold3.Equals(value) = false) Then
					Me.OnThreshold3Changing(value)
					Me.SendPropertyChanging
					Me._Threshold3 = value
					Me.SendPropertyChanged("Threshold3")
					Me.OnThreshold3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate4", DbType:="Float")>  _
		Public Property Rate4() As System.Nullable(Of Double)
			Get
				Return Me._Rate4
			End Get
			Set
				If (Me._Rate4.Equals(value) = false) Then
					Me.OnRate4Changing(value)
					Me.SendPropertyChanging
					Me._Rate4 = value
					Me.SendPropertyChanged("Rate4")
					Me.OnRate4Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fixed", DbType:="Money")>  _
		Public Property Fixed() As System.Nullable(Of Decimal)
			Get
				Return Me._Fixed
			End Get
			Set
				If (Me._Fixed.Equals(value) = false) Then
					Me.OnFixedChanging(value)
					Me.SendPropertyChanging
					Me._Fixed = value
					Me.SendPropertyChanged("Fixed")
					Me.OnFixedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxSystem", DbType:="NVarChar(20)")>  _
		Public Property TaxSystem() As String
			Get
				Return Me._TaxSystem
			End Get
			Set
				If (String.Equals(Me._TaxSystem, value) = false) Then
					Me.OnTaxSystemChanging(value)
					Me.SendPropertyChanging
					Me._TaxSystem = value
					Me.SendPropertyChanged("TaxSystem")
					Me.OnTaxSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Question_AP_mpdCalc_Answer", Storage:="_AP_mpdCalc_Answers", ThisKey:="QuestionId", OtherKey:="QuestionId")>  _
		Public Property AP_mpdCalc_Answers() As EntitySet(Of AP_mpdCalc_Answer)
			Get
				Return Me._AP_mpdCalc_Answers
			End Get
			Set
				Me._AP_mpdCalc_Answers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Section_AP_mpdCalc_Question", Storage:="_AP_mpdCalc_Section", ThisKey:="SectionId", OtherKey:="SectionId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_Section() As AP_mpdCalc_Section
			Get
				Return Me._AP_mpdCalc_Section.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_Section = Me._AP_mpdCalc_Section.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_Section.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_Section.Entity = Nothing
						previousValue.AP_mpdCalc_Questions.Remove(Me)
					End If
					Me._AP_mpdCalc_Section.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpdCalc_Questions.Add(Me)
						Me._SectionId = value.SectionId
					Else
						Me._SectionId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_mpdCalc_Section")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_mpdCalc_Answers(ByVal entity As AP_mpdCalc_Answer)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Question = Me
		End Sub
		
		Private Sub detach_AP_mpdCalc_Answers(ByVal entity As AP_mpdCalc_Answer)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_Question = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_StaffBudget")>  _
	Partial Public Class AP_mpdCalc_StaffBudget
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StaffBudgetId As Integer
		
		Private _StaffId As Integer
		
		Private _DefinitionId As Integer
		
		Private _BudgetYearStart As Short
		
		Private _SubmittedOn As System.Nullable(Of Date)
		
		Private _ApprovedBy As System.Nullable(Of Integer)
		
		Private _ApprovedOn As System.Nullable(Of Date)
		
		Private _ProcessedBy As System.Nullable(Of Integer)
		
		Private _ProcessedOn As System.Nullable(Of Date)
		
		Private _Status As Short
		
		Private _CurrentSupportLevel As System.Nullable(Of Decimal)
		
		Private _TotalBudget As System.Nullable(Of Decimal)
		
		Private _BudgetPeriodStart As String
		
		Private _Compensation As Decimal
		
		Private _ToRaise As Decimal
		
		Private _ApproveCode As String
		
		Private _AP_mpdCalc_Answers As EntitySet(Of AP_mpdCalc_Answer)
		
		Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffBudgetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffBudgetIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDefinitionIdChanged()
    End Sub
    Partial Private Sub OnBudgetYearStartChanging(value As Short)
    End Sub
    Partial Private Sub OnBudgetYearStartChanged()
    End Sub
    Partial Private Sub OnSubmittedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSubmittedOnChanged()
    End Sub
    Partial Private Sub OnApprovedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovedByChanged()
    End Sub
    Partial Private Sub OnApprovedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovedOnChanged()
    End Sub
    Partial Private Sub OnProcessedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProcessedByChanged()
    End Sub
    Partial Private Sub OnProcessedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnProcessedOnChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Short)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanged()
    End Sub
    Partial Private Sub OnTotalBudgetChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalBudgetChanged()
    End Sub
    Partial Private Sub OnBudgetPeriodStartChanging(value As String)
    End Sub
    Partial Private Sub OnBudgetPeriodStartChanged()
    End Sub
    Partial Private Sub OnCompensationChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCompensationChanged()
    End Sub
    Partial Private Sub OnToRaiseChanging(value As Decimal)
    End Sub
    Partial Private Sub OnToRaiseChanged()
    End Sub
    Partial Private Sub OnApproveCodeChanging(value As String)
    End Sub
    Partial Private Sub OnApproveCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpdCalc_Answers = New EntitySet(Of AP_mpdCalc_Answer)(AddressOf Me.attach_AP_mpdCalc_Answers, AddressOf Me.detach_AP_mpdCalc_Answers)
			Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffBudgetId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property StaffBudgetId() As Integer
			Get
				Return Me._StaffBudgetId
			End Get
			Set
				If ((Me._StaffBudgetId = value)  _
							= false) Then
					Me.OnStaffBudgetIdChanging(value)
					Me.SendPropertyChanging
					Me._StaffBudgetId = value
					Me.SendPropertyChanged("StaffBudgetId")
					Me.OnStaffBudgetIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")>  _
		Public Property StaffId() As Integer
			Get
				Return Me._StaffId
			End Get
			Set
				If ((Me._StaffId = value)  _
							= false) Then
					Me.OnStaffIdChanging(value)
					Me.SendPropertyChanging
					Me._StaffId = value
					Me.SendPropertyChanged("StaffId")
					Me.OnStaffIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefinitionId", DbType:="Int NOT NULL")>  _
		Public Property DefinitionId() As Integer
			Get
				Return Me._DefinitionId
			End Get
			Set
				If ((Me._DefinitionId = value)  _
							= false) Then
					If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDefinitionIdChanging(value)
					Me.SendPropertyChanging
					Me._DefinitionId = value
					Me.SendPropertyChanged("DefinitionId")
					Me.OnDefinitionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetYearStart", DbType:="SmallInt NOT NULL")>  _
		Public Property BudgetYearStart() As Short
			Get
				Return Me._BudgetYearStart
			End Get
			Set
				If ((Me._BudgetYearStart = value)  _
							= false) Then
					Me.OnBudgetYearStartChanging(value)
					Me.SendPropertyChanging
					Me._BudgetYearStart = value
					Me.SendPropertyChanged("BudgetYearStart")
					Me.OnBudgetYearStartChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedOn", DbType:="DateTime")>  _
		Public Property SubmittedOn() As System.Nullable(Of Date)
			Get
				Return Me._SubmittedOn
			End Get
			Set
				If (Me._SubmittedOn.Equals(value) = false) Then
					Me.OnSubmittedOnChanging(value)
					Me.SendPropertyChanging
					Me._SubmittedOn = value
					Me.SendPropertyChanged("SubmittedOn")
					Me.OnSubmittedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedBy", DbType:="Int")>  _
		Public Property ApprovedBy() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovedBy
			End Get
			Set
				If (Me._ApprovedBy.Equals(value) = false) Then
					Me.OnApprovedByChanging(value)
					Me.SendPropertyChanging
					Me._ApprovedBy = value
					Me.SendPropertyChanged("ApprovedBy")
					Me.OnApprovedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedOn", DbType:="DateTime")>  _
		Public Property ApprovedOn() As System.Nullable(Of Date)
			Get
				Return Me._ApprovedOn
			End Get
			Set
				If (Me._ApprovedOn.Equals(value) = false) Then
					Me.OnApprovedOnChanging(value)
					Me.SendPropertyChanging
					Me._ApprovedOn = value
					Me.SendPropertyChanged("ApprovedOn")
					Me.OnApprovedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedBy", DbType:="Int")>  _
		Public Property ProcessedBy() As System.Nullable(Of Integer)
			Get
				Return Me._ProcessedBy
			End Get
			Set
				If (Me._ProcessedBy.Equals(value) = false) Then
					Me.OnProcessedByChanging(value)
					Me.SendPropertyChanging
					Me._ProcessedBy = value
					Me.SendPropertyChanged("ProcessedBy")
					Me.OnProcessedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedOn", DbType:="DateTime")>  _
		Public Property ProcessedOn() As System.Nullable(Of Date)
			Get
				Return Me._ProcessedOn
			End Get
			Set
				If (Me._ProcessedOn.Equals(value) = false) Then
					Me.OnProcessedOnChanging(value)
					Me.SendPropertyChanging
					Me._ProcessedOn = value
					Me.SendPropertyChanged("ProcessedOn")
					Me.OnProcessedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="SmallInt NOT NULL")>  _
		Public Property Status() As Short
			Get
				Return Me._Status
			End Get
			Set
				If ((Me._Status = value)  _
							= false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentSupportLevel", DbType:="Money")>  _
		Public Property CurrentSupportLevel() As System.Nullable(Of Decimal)
			Get
				Return Me._CurrentSupportLevel
			End Get
			Set
				If (Me._CurrentSupportLevel.Equals(value) = false) Then
					Me.OnCurrentSupportLevelChanging(value)
					Me.SendPropertyChanging
					Me._CurrentSupportLevel = value
					Me.SendPropertyChanged("CurrentSupportLevel")
					Me.OnCurrentSupportLevelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBudget", DbType:="Money")>  _
		Public Property TotalBudget() As System.Nullable(Of Decimal)
			Get
				Return Me._TotalBudget
			End Get
			Set
				If (Me._TotalBudget.Equals(value) = false) Then
					Me.OnTotalBudgetChanging(value)
					Me.SendPropertyChanging
					Me._TotalBudget = value
					Me.SendPropertyChanged("TotalBudget")
					Me.OnTotalBudgetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetPeriodStart", DbType:="VarChar(6)")>  _
		Public Property BudgetPeriodStart() As String
			Get
				Return Me._BudgetPeriodStart
			End Get
			Set
				If (String.Equals(Me._BudgetPeriodStart, value) = false) Then
					Me.OnBudgetPeriodStartChanging(value)
					Me.SendPropertyChanging
					Me._BudgetPeriodStart = value
					Me.SendPropertyChanged("BudgetPeriodStart")
					Me.OnBudgetPeriodStartChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compensation", DbType:="Money NOT NULL")>  _
		Public Property Compensation() As Decimal
			Get
				Return Me._Compensation
			End Get
			Set
				If ((Me._Compensation = value)  _
							= false) Then
					Me.OnCompensationChanging(value)
					Me.SendPropertyChanging
					Me._Compensation = value
					Me.SendPropertyChanged("Compensation")
					Me.OnCompensationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToRaise", DbType:="Money NOT NULL")>  _
		Public Property ToRaise() As Decimal
			Get
				Return Me._ToRaise
			End Get
			Set
				If ((Me._ToRaise = value)  _
							= false) Then
					Me.OnToRaiseChanging(value)
					Me.SendPropertyChanging
					Me._ToRaise = value
					Me.SendPropertyChanged("ToRaise")
					Me.OnToRaiseChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveCode", DbType:="NVarChar(50)")>  _
		Public Property ApproveCode() As String
			Get
				Return Me._ApproveCode
			End Get
			Set
				If (String.Equals(Me._ApproveCode, value) = false) Then
					Me.OnApproveCodeChanging(value)
					Me.SendPropertyChanging
					Me._ApproveCode = value
					Me.SendPropertyChanged("ApproveCode")
					Me.OnApproveCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_StaffBudget_AP_mpdCalc_Answer", Storage:="_AP_mpdCalc_Answers", ThisKey:="StaffBudgetId", OtherKey:="StaffBudgetId")>  _
		Public Property AP_mpdCalc_Answers() As EntitySet(Of AP_mpdCalc_Answer)
			Get
				Return Me._AP_mpdCalc_Answers
			End Get
			Set
				Me._AP_mpdCalc_Answers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_Definition", ThisKey:="DefinitionId", OtherKey:="mpdDefId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
			Get
				Return Me._AP_mpdCalc_Definition.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_Definition.Entity = Nothing
						previousValue.AP_mpdCalc_StaffBudgets.Remove(Me)
					End If
					Me._AP_mpdCalc_Definition.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpdCalc_StaffBudgets.Add(Me)
						Me._DefinitionId = value.mpdDefId
					Else
						Me._DefinitionId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_mpdCalc_Definition")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_mpdCalc_Answers(ByVal entity As AP_mpdCalc_Answer)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_StaffBudget = Me
		End Sub
		
		Private Sub detach_AP_mpdCalc_Answers(ByVal entity As AP_mpdCalc_Answer)
			Me.SendPropertyChanging
			entity.AP_mpdCalc_StaffBudget = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Answer")>  _
	Partial Public Class AP_mpdCalc_Answer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AnswerId As Long
		
		Private _QuestionId As Long
		
		Private _StaffBudgetId As Integer
		
		Private _Value As System.Nullable(Of Decimal)
		
		Private _Name As String
		
		Private _Tax As System.Nullable(Of Decimal)
		
		Private _AP_mpdCalc_Question As EntityRef(Of AP_mpdCalc_Question)
		
		Private _AP_mpdCalc_StaffBudget As EntityRef(Of AP_mpdCalc_StaffBudget)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnswerIdChanging(value As Long)
    End Sub
    Partial Private Sub OnAnswerIdChanged()
    End Sub
    Partial Private Sub OnQuestionIdChanging(value As Long)
    End Sub
    Partial Private Sub OnQuestionIdChanged()
    End Sub
    Partial Private Sub OnStaffBudgetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffBudgetIdChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTaxChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpdCalc_Question = CType(Nothing, EntityRef(Of AP_mpdCalc_Question))
			Me._AP_mpdCalc_StaffBudget = CType(Nothing, EntityRef(Of AP_mpdCalc_StaffBudget))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnswerId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AnswerId() As Long
			Get
				Return Me._AnswerId
			End Get
			Set
				If ((Me._AnswerId = value)  _
							= false) Then
					Me.OnAnswerIdChanging(value)
					Me.SendPropertyChanging
					Me._AnswerId = value
					Me.SendPropertyChanged("AnswerId")
					Me.OnAnswerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionId", DbType:="BigInt NOT NULL")>  _
		Public Property QuestionId() As Long
			Get
				Return Me._QuestionId
			End Get
			Set
				If ((Me._QuestionId = value)  _
							= false) Then
					If Me._AP_mpdCalc_Question.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnQuestionIdChanging(value)
					Me.SendPropertyChanging
					Me._QuestionId = value
					Me.SendPropertyChanged("QuestionId")
					Me.OnQuestionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffBudgetId", DbType:="Int NOT NULL")>  _
		Public Property StaffBudgetId() As Integer
			Get
				Return Me._StaffBudgetId
			End Get
			Set
				If ((Me._StaffBudgetId = value)  _
							= false) Then
					If Me._AP_mpdCalc_StaffBudget.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnStaffBudgetIdChanging(value)
					Me.SendPropertyChanging
					Me._StaffBudgetId = value
					Me.SendPropertyChanged("StaffBudgetId")
					Me.OnStaffBudgetIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
		Public Property Value() As System.Nullable(Of Decimal)
			Get
				Return Me._Value
			End Get
			Set
				If (Me._Value.Equals(value) = false) Then
					Me.OnValueChanging(value)
					Me.SendPropertyChanging
					Me._Value = value
					Me.SendPropertyChanged("Value")
					Me.OnValueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(120)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tax", DbType:="Money")>  _
		Public Property Tax() As System.Nullable(Of Decimal)
			Get
				Return Me._Tax
			End Get
			Set
				If (Me._Tax.Equals(value) = false) Then
					Me.OnTaxChanging(value)
					Me.SendPropertyChanging
					Me._Tax = value
					Me.SendPropertyChanged("Tax")
					Me.OnTaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Question_AP_mpdCalc_Answer", Storage:="_AP_mpdCalc_Question", ThisKey:="QuestionId", OtherKey:="QuestionId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_Question() As AP_mpdCalc_Question
			Get
				Return Me._AP_mpdCalc_Question.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_Question = Me._AP_mpdCalc_Question.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_Question.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_Question.Entity = Nothing
						previousValue.AP_mpdCalc_Answers.Remove(Me)
					End If
					Me._AP_mpdCalc_Question.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpdCalc_Answers.Add(Me)
						Me._QuestionId = value.QuestionId
					Else
						Me._QuestionId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("AP_mpdCalc_Question")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_StaffBudget_AP_mpdCalc_Answer", Storage:="_AP_mpdCalc_StaffBudget", ThisKey:="StaffBudgetId", OtherKey:="StaffBudgetId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_StaffBudget() As AP_mpdCalc_StaffBudget
			Get
				Return Me._AP_mpdCalc_StaffBudget.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_StaffBudget = Me._AP_mpdCalc_StaffBudget.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_StaffBudget.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_StaffBudget.Entity = Nothing
						previousValue.AP_mpdCalc_Answers.Remove(Me)
					End If
					Me._AP_mpdCalc_StaffBudget.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpdCalc_Answers.Add(Me)
						Me._StaffBudgetId = value.StaffBudgetId
					Else
						Me._StaffBudgetId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_mpdCalc_StaffBudget")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_Country")>  _
	Partial Public Class AP_mpd_Country
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _mpdCountryId As Integer
		
		Private _isoCode As String
		
		Private _name As String
		
		Private _portalId As System.Nullable(Of Integer)
		
		Private _lastUpdated As System.Nullable(Of Date)
		
		Private _compensationAccounts As String
		
		Private _foreighIncomeAccounts As String
		
		Private _mpdDefId As System.Nullable(Of Integer)
		
		Private _AvgSupport12 As System.Nullable(Of Decimal)
		
		Private _AvgSupport3 As System.Nullable(Of Decimal)
		
		Private _AvgSupport1 As System.Nullable(Of Decimal)
		
		Private _SplitLocal As System.Nullable(Of Double)
		
		Private _SplitForeign As System.Nullable(Of Double)
		
		Private _SplitSubsidy As System.Nullable(Of Double)
		
		Private _FullCount As Integer
		
		Private _HighCount As Integer
		
		Private _LowCount As Integer
		
		Private _VeryLowCount As Integer
		
		Private _BudgetAccuracy As System.Nullable(Of Double)
		
		Private _NoBudgetCount As Integer
		
		Private _gr_ministry_id As System.Nullable(Of Integer)
		
		Private _Ap_mpd_Users As EntitySet(Of Ap_mpd_User)
		
		Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnisoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnisoCodeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnportalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnportalIdChanged()
    End Sub
    Partial Private Sub OnlastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastUpdatedChanged()
    End Sub
    Partial Private Sub OncompensationAccountsChanging(value As String)
    End Sub
    Partial Private Sub OncompensationAccountsChanged()
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanging(value As String)
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanged()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    Partial Private Sub OnAvgSupport12Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport12Changed()
    End Sub
    Partial Private Sub OnAvgSupport3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport3Changed()
    End Sub
    Partial Private Sub OnAvgSupport1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport1Changed()
    End Sub
    Partial Private Sub OnSplitLocalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitLocalChanged()
    End Sub
    Partial Private Sub OnSplitForeignChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitForeignChanged()
    End Sub
    Partial Private Sub OnSplitSubsidyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitSubsidyChanged()
    End Sub
    Partial Private Sub OnFullCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFullCountChanged()
    End Sub
    Partial Private Sub OnHighCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnHighCountChanged()
    End Sub
    Partial Private Sub OnLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnLowCountChanged()
    End Sub
    Partial Private Sub OnVeryLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnVeryLowCountChanged()
    End Sub
    Partial Private Sub OnBudgetAccuracyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnBudgetAccuracyChanged()
    End Sub
    Partial Private Sub OnNoBudgetCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnNoBudgetCountChanged()
    End Sub
    Partial Private Sub Ongr_ministry_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ongr_ministry_idChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Ap_mpd_Users = New EntitySet(Of Ap_mpd_User)(AddressOf Me.attach_Ap_mpd_Users, AddressOf Me.detach_Ap_mpd_Users)
			Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property mpdCountryId() As Integer
			Get
				Return Me._mpdCountryId
			End Get
			Set
				If ((Me._mpdCountryId = value)  _
							= false) Then
					Me.OnmpdCountryIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdCountryId = value
					Me.SendPropertyChanged("mpdCountryId")
					Me.OnmpdCountryIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isoCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property isoCode() As String
			Get
				Return Me._isoCode
			End Get
			Set
				If (String.Equals(Me._isoCode, value) = false) Then
					Me.OnisoCodeChanging(value)
					Me.SendPropertyChanging
					Me._isoCode = value
					Me.SendPropertyChanged("isoCode")
					Me.OnisoCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
		Public Property name() As String
			Get
				Return Me._name
			End Get
			Set
				If (String.Equals(Me._name, value) = false) Then
					Me.OnnameChanging(value)
					Me.SendPropertyChanging
					Me._name = value
					Me.SendPropertyChanged("name")
					Me.OnnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalId", DbType:="Int")>  _
		Public Property portalId() As System.Nullable(Of Integer)
			Get
				Return Me._portalId
			End Get
			Set
				If (Me._portalId.Equals(value) = false) Then
					Me.OnportalIdChanging(value)
					Me.SendPropertyChanging
					Me._portalId = value
					Me.SendPropertyChanged("portalId")
					Me.OnportalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastUpdated", DbType:="SmallDateTime")>  _
		Public Property lastUpdated() As System.Nullable(Of Date)
			Get
				Return Me._lastUpdated
			End Get
			Set
				If (Me._lastUpdated.Equals(value) = false) Then
					Me.OnlastUpdatedChanging(value)
					Me.SendPropertyChanging
					Me._lastUpdated = value
					Me.SendPropertyChanged("lastUpdated")
					Me.OnlastUpdatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensationAccounts", DbType:="NVarChar(50)")>  _
		Public Property compensationAccounts() As String
			Get
				Return Me._compensationAccounts
			End Get
			Set
				If (String.Equals(Me._compensationAccounts, value) = false) Then
					Me.OncompensationAccountsChanging(value)
					Me.SendPropertyChanging
					Me._compensationAccounts = value
					Me.SendPropertyChanged("compensationAccounts")
					Me.OncompensationAccountsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreighIncomeAccounts", DbType:="NVarChar(50)")>  _
		Public Property foreighIncomeAccounts() As String
			Get
				Return Me._foreighIncomeAccounts
			End Get
			Set
				If (String.Equals(Me._foreighIncomeAccounts, value) = false) Then
					Me.OnforeighIncomeAccountsChanging(value)
					Me.SendPropertyChanging
					Me._foreighIncomeAccounts = value
					Me.SendPropertyChanged("foreighIncomeAccounts")
					Me.OnforeighIncomeAccountsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", DbType:="Int")>  _
		Public Property mpdDefId() As System.Nullable(Of Integer)
			Get
				Return Me._mpdDefId
			End Get
			Set
				If (Me._mpdDefId.Equals(value) = false) Then
					If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmpdDefIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdDefId = value
					Me.SendPropertyChanged("mpdDefId")
					Me.OnmpdDefIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport12", DbType:="Money")>  _
		Public Property AvgSupport12() As System.Nullable(Of Decimal)
			Get
				Return Me._AvgSupport12
			End Get
			Set
				If (Me._AvgSupport12.Equals(value) = false) Then
					Me.OnAvgSupport12Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupport12 = value
					Me.SendPropertyChanged("AvgSupport12")
					Me.OnAvgSupport12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport3", DbType:="Money")>  _
		Public Property AvgSupport3() As System.Nullable(Of Decimal)
			Get
				Return Me._AvgSupport3
			End Get
			Set
				If (Me._AvgSupport3.Equals(value) = false) Then
					Me.OnAvgSupport3Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupport3 = value
					Me.SendPropertyChanged("AvgSupport3")
					Me.OnAvgSupport3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport1", DbType:="Money")>  _
		Public Property AvgSupport1() As System.Nullable(Of Decimal)
			Get
				Return Me._AvgSupport1
			End Get
			Set
				If (Me._AvgSupport1.Equals(value) = false) Then
					Me.OnAvgSupport1Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupport1 = value
					Me.SendPropertyChanged("AvgSupport1")
					Me.OnAvgSupport1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitLocal", DbType:="Float")>  _
		Public Property SplitLocal() As System.Nullable(Of Double)
			Get
				Return Me._SplitLocal
			End Get
			Set
				If (Me._SplitLocal.Equals(value) = false) Then
					Me.OnSplitLocalChanging(value)
					Me.SendPropertyChanging
					Me._SplitLocal = value
					Me.SendPropertyChanged("SplitLocal")
					Me.OnSplitLocalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitForeign", DbType:="Float")>  _
		Public Property SplitForeign() As System.Nullable(Of Double)
			Get
				Return Me._SplitForeign
			End Get
			Set
				If (Me._SplitForeign.Equals(value) = false) Then
					Me.OnSplitForeignChanging(value)
					Me.SendPropertyChanging
					Me._SplitForeign = value
					Me.SendPropertyChanged("SplitForeign")
					Me.OnSplitForeignChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitSubsidy", DbType:="Float")>  _
		Public Property SplitSubsidy() As System.Nullable(Of Double)
			Get
				Return Me._SplitSubsidy
			End Get
			Set
				If (Me._SplitSubsidy.Equals(value) = false) Then
					Me.OnSplitSubsidyChanging(value)
					Me.SendPropertyChanging
					Me._SplitSubsidy = value
					Me.SendPropertyChanged("SplitSubsidy")
					Me.OnSplitSubsidyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullCount", DbType:="Int NOT NULL")>  _
		Public Property FullCount() As Integer
			Get
				Return Me._FullCount
			End Get
			Set
				If ((Me._FullCount = value)  _
							= false) Then
					Me.OnFullCountChanging(value)
					Me.SendPropertyChanging
					Me._FullCount = value
					Me.SendPropertyChanged("FullCount")
					Me.OnFullCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HighCount", DbType:="Int NOT NULL")>  _
		Public Property HighCount() As Integer
			Get
				Return Me._HighCount
			End Get
			Set
				If ((Me._HighCount = value)  _
							= false) Then
					Me.OnHighCountChanging(value)
					Me.SendPropertyChanging
					Me._HighCount = value
					Me.SendPropertyChanged("HighCount")
					Me.OnHighCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LowCount", DbType:="Int NOT NULL")>  _
		Public Property LowCount() As Integer
			Get
				Return Me._LowCount
			End Get
			Set
				If ((Me._LowCount = value)  _
							= false) Then
					Me.OnLowCountChanging(value)
					Me.SendPropertyChanging
					Me._LowCount = value
					Me.SendPropertyChanged("LowCount")
					Me.OnLowCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VeryLowCount", DbType:="Int NOT NULL")>  _
		Public Property VeryLowCount() As Integer
			Get
				Return Me._VeryLowCount
			End Get
			Set
				If ((Me._VeryLowCount = value)  _
							= false) Then
					Me.OnVeryLowCountChanging(value)
					Me.SendPropertyChanging
					Me._VeryLowCount = value
					Me.SendPropertyChanged("VeryLowCount")
					Me.OnVeryLowCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetAccuracy", DbType:="Float")>  _
		Public Property BudgetAccuracy() As System.Nullable(Of Double)
			Get
				Return Me._BudgetAccuracy
			End Get
			Set
				If (Me._BudgetAccuracy.Equals(value) = false) Then
					Me.OnBudgetAccuracyChanging(value)
					Me.SendPropertyChanging
					Me._BudgetAccuracy = value
					Me.SendPropertyChanged("BudgetAccuracy")
					Me.OnBudgetAccuracyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoBudgetCount", DbType:="Int NOT NULL")>  _
		Public Property NoBudgetCount() As Integer
			Get
				Return Me._NoBudgetCount
			End Get
			Set
				If ((Me._NoBudgetCount = value)  _
							= false) Then
					Me.OnNoBudgetCountChanging(value)
					Me.SendPropertyChanging
					Me._NoBudgetCount = value
					Me.SendPropertyChanged("NoBudgetCount")
					Me.OnNoBudgetCountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_ministry_id", DbType:="Int")>  _
		Public Property gr_ministry_id() As System.Nullable(Of Integer)
			Get
				Return Me._gr_ministry_id
			End Get
			Set
				If (Me._gr_ministry_id.Equals(value) = false) Then
					Me.Ongr_ministry_idChanging(value)
					Me.SendPropertyChanging
					Me._gr_ministry_id = value
					Me.SendPropertyChanged("gr_ministry_id")
					Me.Ongr_ministry_idChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_Ap_mpd_User", Storage:="_Ap_mpd_Users", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId")>  _
		Public Property Ap_mpd_Users() As EntitySet(Of Ap_mpd_User)
			Get
				Return Me._Ap_mpd_Users
			End Get
			Set
				Me._Ap_mpd_Users.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpdCalc_Definition", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsForeignKey:=true)>  _
		Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
			Get
				Return Me._AP_mpdCalc_Definition.Entity
			End Get
			Set
				Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpdCalc_Definition.Entity = Nothing
						previousValue.AP_mpd_Countries = Nothing
					End If
					Me._AP_mpdCalc_Definition.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpd_Countries = Me
						Me._mpdDefId = value.mpdDefId
					Else
						Me._mpdDefId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("AP_mpdCalc_Definition")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Ap_mpd_Users(ByVal entity As Ap_mpd_User)
			Me.SendPropertyChanging
			entity.AP_mpd_Country = Me
		End Sub
		
		Private Sub detach_Ap_mpd_Users(ByVal entity As Ap_mpd_User)
			Me.SendPropertyChanging
			entity.AP_mpd_Country = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_UserAccountInfo")>  _
	Partial Public Class AP_mpd_UserAccountInfo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _mpdUserAccountInfo As Long
		
		Private _mpdCountryId As Integer
		
		Private _staffId As Integer
		
		Private _period As String
		
		Private _income As Decimal
		
		Private _expense As Decimal
		
		Private _balance As Decimal
		
		Private _foreignIncome As Decimal
		
		Private _compensation As Decimal
		
		Private _mpdUserId As System.Nullable(Of Long)
		
		Private _expBudget As Decimal
		
		Private _toRaiseBudget As Decimal
		
		Private _Ap_mpd_User As EntityRef(Of Ap_mpd_User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanging(value As Long)
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanged()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnstaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnstaffIdChanged()
    End Sub
    Partial Private Sub OnperiodChanging(value As String)
    End Sub
    Partial Private Sub OnperiodChanged()
    End Sub
    Partial Private Sub OnincomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnincomeChanged()
    End Sub
    Partial Private Sub OnexpenseChanging(value As Decimal)
    End Sub
    Partial Private Sub OnexpenseChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    Partial Private Sub OnforeignIncomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnforeignIncomeChanged()
    End Sub
    Partial Private Sub OncompensationChanging(value As Decimal)
    End Sub
    Partial Private Sub OncompensationChanged()
    End Sub
    Partial Private Sub OnmpdUserIdChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnmpdUserIdChanged()
    End Sub
    Partial Private Sub OnexpBudgetChanging(value As Decimal)
    End Sub
    Partial Private Sub OnexpBudgetChanged()
    End Sub
    Partial Private Sub OntoRaiseBudgetChanging(value As Decimal)
    End Sub
    Partial Private Sub OntoRaiseBudgetChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Ap_mpd_User = CType(Nothing, EntityRef(Of Ap_mpd_User))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdUserAccountInfo", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property mpdUserAccountInfo() As Long
			Get
				Return Me._mpdUserAccountInfo
			End Get
			Set
				If ((Me._mpdUserAccountInfo = value)  _
							= false) Then
					Me.OnmpdUserAccountInfoChanging(value)
					Me.SendPropertyChanging
					Me._mpdUserAccountInfo = value
					Me.SendPropertyChanged("mpdUserAccountInfo")
					Me.OnmpdUserAccountInfoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", DbType:="Int NOT NULL")>  _
		Public Property mpdCountryId() As Integer
			Get
				Return Me._mpdCountryId
			End Get
			Set
				If ((Me._mpdCountryId = value)  _
							= false) Then
					Me.OnmpdCountryIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdCountryId = value
					Me.SendPropertyChanged("mpdCountryId")
					Me.OnmpdCountryIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffId", DbType:="Int NOT NULL")>  _
		Public Property staffId() As Integer
			Get
				Return Me._staffId
			End Get
			Set
				If ((Me._staffId = value)  _
							= false) Then
					Me.OnstaffIdChanging(value)
					Me.SendPropertyChanging
					Me._staffId = value
					Me.SendPropertyChanged("staffId")
					Me.OnstaffIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period", DbType:="Char(6) NOT NULL", CanBeNull:=false)>  _
		Public Property period() As String
			Get
				Return Me._period
			End Get
			Set
				If (String.Equals(Me._period, value) = false) Then
					Me.OnperiodChanging(value)
					Me.SendPropertyChanging
					Me._period = value
					Me.SendPropertyChanged("period")
					Me.OnperiodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income", DbType:="Money NOT NULL")>  _
		Public Property income() As Decimal
			Get
				Return Me._income
			End Get
			Set
				If ((Me._income = value)  _
							= false) Then
					Me.OnincomeChanging(value)
					Me.SendPropertyChanging
					Me._income = value
					Me.SendPropertyChanged("income")
					Me.OnincomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expense", DbType:="Money NOT NULL")>  _
		Public Property expense() As Decimal
			Get
				Return Me._expense
			End Get
			Set
				If ((Me._expense = value)  _
							= false) Then
					Me.OnexpenseChanging(value)
					Me.SendPropertyChanging
					Me._expense = value
					Me.SendPropertyChanged("expense")
					Me.OnexpenseChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Money NOT NULL")>  _
		Public Property balance() As Decimal
			Get
				Return Me._balance
			End Get
			Set
				If ((Me._balance = value)  _
							= false) Then
					Me.OnbalanceChanging(value)
					Me.SendPropertyChanging
					Me._balance = value
					Me.SendPropertyChanged("balance")
					Me.OnbalanceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreignIncome", DbType:="Money NOT NULL")>  _
		Public Property foreignIncome() As Decimal
			Get
				Return Me._foreignIncome
			End Get
			Set
				If ((Me._foreignIncome = value)  _
							= false) Then
					Me.OnforeignIncomeChanging(value)
					Me.SendPropertyChanging
					Me._foreignIncome = value
					Me.SendPropertyChanged("foreignIncome")
					Me.OnforeignIncomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensation", DbType:="Money NOT NULL")>  _
		Public Property compensation() As Decimal
			Get
				Return Me._compensation
			End Get
			Set
				If ((Me._compensation = value)  _
							= false) Then
					Me.OncompensationChanging(value)
					Me.SendPropertyChanging
					Me._compensation = value
					Me.SendPropertyChanged("compensation")
					Me.OncompensationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdUserId", DbType:="BigInt")>  _
		Public Property mpdUserId() As System.Nullable(Of Long)
			Get
				Return Me._mpdUserId
			End Get
			Set
				If (Me._mpdUserId.Equals(value) = false) Then
					If Me._Ap_mpd_User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmpdUserIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdUserId = value
					Me.SendPropertyChanged("mpdUserId")
					Me.OnmpdUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expBudget", DbType:="Money NOT NULL")>  _
		Public Property expBudget() As Decimal
			Get
				Return Me._expBudget
			End Get
			Set
				If ((Me._expBudget = value)  _
							= false) Then
					Me.OnexpBudgetChanging(value)
					Me.SendPropertyChanging
					Me._expBudget = value
					Me.SendPropertyChanged("expBudget")
					Me.OnexpBudgetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_toRaiseBudget", DbType:="Money NOT NULL")>  _
		Public Property toRaiseBudget() As Decimal
			Get
				Return Me._toRaiseBudget
			End Get
			Set
				If ((Me._toRaiseBudget = value)  _
							= false) Then
					Me.OntoRaiseBudgetChanging(value)
					Me.SendPropertyChanging
					Me._toRaiseBudget = value
					Me.SendPropertyChanged("toRaiseBudget")
					Me.OntoRaiseBudgetChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ap_mpd_User_AP_mpd_UserAccountInfo", Storage:="_Ap_mpd_User", ThisKey:="mpdUserId", OtherKey:="AP_mpd_UserId", IsForeignKey:=true)>  _
		Public Property Ap_mpd_User() As Ap_mpd_User
			Get
				Return Me._Ap_mpd_User.Entity
			End Get
			Set
				Dim previousValue As Ap_mpd_User = Me._Ap_mpd_User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Ap_mpd_User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Ap_mpd_User.Entity = Nothing
						previousValue.AP_mpd_UserAccountInfos.Remove(Me)
					End If
					Me._Ap_mpd_User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AP_mpd_UserAccountInfos.Add(Me)
						Me._mpdUserId = value.AP_mpd_UserId
					Else
						Me._mpdUserId = CType(Nothing, Nullable(Of Long))
					End If
					Me.SendPropertyChanged("Ap_mpd_User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ap_mpd_User")>  _
	Partial Public Class Ap_mpd_User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _AP_mpd_UserId As Long
		
		Private _StaffId As System.Nullable(Of Integer)
		
		Private _mpdCountryId As Integer
		
		Private _AvgIncome12 As Decimal
		
		Private _AvgIncome3 As Decimal
		
		Private _AvgIncome1 As Decimal
		
		Private _SplitLocal As Double
		
		Private _SplitForeign As Double
		
		Private _SplitSubsidy As System.Nullable(Of Double)
		
		Private _AvgExpenses As Decimal
		
		Private _Name As String
		
		Private _gr_person_id As String
		
		Private _Email As String
		
		Private _Phone As String
		
		Private _Key_GUID As String
		
		Private _AvgSupLevel12 As Double
		
		Private _AvgSupLevel3 As Double
		
		Private _AvgSupLevel1 As Double
		
		Private _LocalIncome12 As Decimal
		
		Private _ForeignIncome12 As Decimal
		
		Private _SubsidyIncome12 As Decimal
		
		Private _AvgExpenseBudget12 As Decimal
		
		Private _AvgMPDBudget12 As Decimal
		
		Private _AvgIncome As Decimal
		
		Private _AP_mpd_UserAccountInfos As EntitySet(Of AP_mpd_UserAccountInfo)
		
		Private _AP_mpd_Country As EntityRef(Of AP_mpd_Country)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAP_mpd_UserIdChanging(value As Long)
    End Sub
    Partial Private Sub OnAP_mpd_UserIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnAvgIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome12Changed()
    End Sub
    Partial Private Sub OnAvgIncome3Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome3Changed()
    End Sub
    Partial Private Sub OnAvgIncome1Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome1Changed()
    End Sub
    Partial Private Sub OnSplitLocalChanging(value As Double)
    End Sub
    Partial Private Sub OnSplitLocalChanged()
    End Sub
    Partial Private Sub OnSplitForeignChanging(value As Double)
    End Sub
    Partial Private Sub OnSplitForeignChanged()
    End Sub
    Partial Private Sub OnSplitSubsidyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitSubsidyChanged()
    End Sub
    Partial Private Sub OnAvgExpensesChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAvgExpensesChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub Ongr_person_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_person_idChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnKey_GUIDChanging(value As String)
    End Sub
    Partial Private Sub OnKey_GUIDChanged()
    End Sub
    Partial Private Sub OnAvgSupLevel12Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel12Changed()
    End Sub
    Partial Private Sub OnAvgSupLevel3Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel3Changed()
    End Sub
    Partial Private Sub OnAvgSupLevel1Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel1Changed()
    End Sub
    Partial Private Sub OnLocalIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnLocalIncome12Changed()
    End Sub
    Partial Private Sub OnForeignIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnForeignIncome12Changed()
    End Sub
    Partial Private Sub OnSubsidyIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnSubsidyIncome12Changed()
    End Sub
    Partial Private Sub OnAvgExpenseBudget12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgExpenseBudget12Changed()
    End Sub
    Partial Private Sub OnAvgMPDBudget12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgMPDBudget12Changed()
    End Sub
    Partial Private Sub OnAvgIncomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncomeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AP_mpd_UserAccountInfos = New EntitySet(Of AP_mpd_UserAccountInfo)(AddressOf Me.attach_AP_mpd_UserAccountInfos, AddressOf Me.detach_AP_mpd_UserAccountInfos)
			Me._AP_mpd_Country = CType(Nothing, EntityRef(Of AP_mpd_Country))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AP_mpd_UserId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property AP_mpd_UserId() As Long
			Get
				Return Me._AP_mpd_UserId
			End Get
			Set
				If ((Me._AP_mpd_UserId = value)  _
							= false) Then
					Me.OnAP_mpd_UserIdChanging(value)
					Me.SendPropertyChanging
					Me._AP_mpd_UserId = value
					Me.SendPropertyChanged("AP_mpd_UserId")
					Me.OnAP_mpd_UserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int")>  _
		Public Property StaffId() As System.Nullable(Of Integer)
			Get
				Return Me._StaffId
			End Get
			Set
				If (Me._StaffId.Equals(value) = false) Then
					Me.OnStaffIdChanging(value)
					Me.SendPropertyChanging
					Me._StaffId = value
					Me.SendPropertyChanged("StaffId")
					Me.OnStaffIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", DbType:="Int NOT NULL")>  _
		Public Property mpdCountryId() As Integer
			Get
				Return Me._mpdCountryId
			End Get
			Set
				If ((Me._mpdCountryId = value)  _
							= false) Then
					If Me._AP_mpd_Country.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmpdCountryIdChanging(value)
					Me.SendPropertyChanging
					Me._mpdCountryId = value
					Me.SendPropertyChanged("mpdCountryId")
					Me.OnmpdCountryIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome12", DbType:="Money NOT NULL")>  _
		Public Property AvgIncome12() As Decimal
			Get
				Return Me._AvgIncome12
			End Get
			Set
				If ((Me._AvgIncome12 = value)  _
							= false) Then
					Me.OnAvgIncome12Changing(value)
					Me.SendPropertyChanging
					Me._AvgIncome12 = value
					Me.SendPropertyChanged("AvgIncome12")
					Me.OnAvgIncome12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome3", DbType:="Money NOT NULL")>  _
		Public Property AvgIncome3() As Decimal
			Get
				Return Me._AvgIncome3
			End Get
			Set
				If ((Me._AvgIncome3 = value)  _
							= false) Then
					Me.OnAvgIncome3Changing(value)
					Me.SendPropertyChanging
					Me._AvgIncome3 = value
					Me.SendPropertyChanged("AvgIncome3")
					Me.OnAvgIncome3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome1", DbType:="Money NOT NULL")>  _
		Public Property AvgIncome1() As Decimal
			Get
				Return Me._AvgIncome1
			End Get
			Set
				If ((Me._AvgIncome1 = value)  _
							= false) Then
					Me.OnAvgIncome1Changing(value)
					Me.SendPropertyChanging
					Me._AvgIncome1 = value
					Me.SendPropertyChanged("AvgIncome1")
					Me.OnAvgIncome1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitLocal", DbType:="Float NOT NULL")>  _
		Public Property SplitLocal() As Double
			Get
				Return Me._SplitLocal
			End Get
			Set
				If ((Me._SplitLocal = value)  _
							= false) Then
					Me.OnSplitLocalChanging(value)
					Me.SendPropertyChanging
					Me._SplitLocal = value
					Me.SendPropertyChanged("SplitLocal")
					Me.OnSplitLocalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitForeign", DbType:="Float NOT NULL")>  _
		Public Property SplitForeign() As Double
			Get
				Return Me._SplitForeign
			End Get
			Set
				If ((Me._SplitForeign = value)  _
							= false) Then
					Me.OnSplitForeignChanging(value)
					Me.SendPropertyChanging
					Me._SplitForeign = value
					Me.SendPropertyChanged("SplitForeign")
					Me.OnSplitForeignChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitSubsidy", DbType:="Float")>  _
		Public Property SplitSubsidy() As System.Nullable(Of Double)
			Get
				Return Me._SplitSubsidy
			End Get
			Set
				If (Me._SplitSubsidy.Equals(value) = false) Then
					Me.OnSplitSubsidyChanging(value)
					Me.SendPropertyChanging
					Me._SplitSubsidy = value
					Me.SendPropertyChanged("SplitSubsidy")
					Me.OnSplitSubsidyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgExpenses", DbType:="Money NOT NULL")>  _
		Public Property AvgExpenses() As Decimal
			Get
				Return Me._AvgExpenses
			End Get
			Set
				If ((Me._AvgExpenses = value)  _
							= false) Then
					Me.OnAvgExpensesChanging(value)
					Me.SendPropertyChanging
					Me._AvgExpenses = value
					Me.SendPropertyChanged("AvgExpenses")
					Me.OnAvgExpensesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(80)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_person_id", DbType:="varchar(50)")>  _
		Public Property gr_person_id() As String
			Get
				Return Me._gr_person_id
			End Get
			Set
				If (String.Equals(Me._gr_person_id, value) = false) Then
					Me.Ongr_person_idChanging(value)
					Me.SendPropertyChanging
					Me._gr_person_id = value
					Me.SendPropertyChanged("gr_person_id")
					Me.Ongr_person_idChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(80)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(80)")>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Key_GUID", DbType:="VarChar(40)")>  _
		Public Property Key_GUID() As String
			Get
				Return Me._Key_GUID
			End Get
			Set
				If (String.Equals(Me._Key_GUID, value) = false) Then
					Me.OnKey_GUIDChanging(value)
					Me.SendPropertyChanging
					Me._Key_GUID = value
					Me.SendPropertyChanged("Key_GUID")
					Me.OnKey_GUIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel12", DbType:="Float NOT NULL")>  _
		Public Property AvgSupLevel12() As Double
			Get
				Return Me._AvgSupLevel12
			End Get
			Set
				If ((Me._AvgSupLevel12 = value)  _
							= false) Then
					Me.OnAvgSupLevel12Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupLevel12 = value
					Me.SendPropertyChanged("AvgSupLevel12")
					Me.OnAvgSupLevel12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel3", DbType:="Float NOT NULL")>  _
		Public Property AvgSupLevel3() As Double
			Get
				Return Me._AvgSupLevel3
			End Get
			Set
				If ((Me._AvgSupLevel3 = value)  _
							= false) Then
					Me.OnAvgSupLevel3Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupLevel3 = value
					Me.SendPropertyChanged("AvgSupLevel3")
					Me.OnAvgSupLevel3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel1", DbType:="Float NOT NULL")>  _
		Public Property AvgSupLevel1() As Double
			Get
				Return Me._AvgSupLevel1
			End Get
			Set
				If ((Me._AvgSupLevel1 = value)  _
							= false) Then
					Me.OnAvgSupLevel1Changing(value)
					Me.SendPropertyChanging
					Me._AvgSupLevel1 = value
					Me.SendPropertyChanged("AvgSupLevel1")
					Me.OnAvgSupLevel1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalIncome12", DbType:="Money NOT NULL")>  _
		Public Property LocalIncome12() As Decimal
			Get
				Return Me._LocalIncome12
			End Get
			Set
				If ((Me._LocalIncome12 = value)  _
							= false) Then
					Me.OnLocalIncome12Changing(value)
					Me.SendPropertyChanging
					Me._LocalIncome12 = value
					Me.SendPropertyChanged("LocalIncome12")
					Me.OnLocalIncome12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ForeignIncome12", DbType:="Money NOT NULL")>  _
		Public Property ForeignIncome12() As Decimal
			Get
				Return Me._ForeignIncome12
			End Get
			Set
				If ((Me._ForeignIncome12 = value)  _
							= false) Then
					Me.OnForeignIncome12Changing(value)
					Me.SendPropertyChanging
					Me._ForeignIncome12 = value
					Me.SendPropertyChanged("ForeignIncome12")
					Me.OnForeignIncome12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsidyIncome12", DbType:="Money NOT NULL")>  _
		Public Property SubsidyIncome12() As Decimal
			Get
				Return Me._SubsidyIncome12
			End Get
			Set
				If ((Me._SubsidyIncome12 = value)  _
							= false) Then
					Me.OnSubsidyIncome12Changing(value)
					Me.SendPropertyChanging
					Me._SubsidyIncome12 = value
					Me.SendPropertyChanged("SubsidyIncome12")
					Me.OnSubsidyIncome12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgExpenseBudget12", DbType:="Money NOT NULL")>  _
		Public Property AvgExpenseBudget12() As Decimal
			Get
				Return Me._AvgExpenseBudget12
			End Get
			Set
				If ((Me._AvgExpenseBudget12 = value)  _
							= false) Then
					Me.OnAvgExpenseBudget12Changing(value)
					Me.SendPropertyChanging
					Me._AvgExpenseBudget12 = value
					Me.SendPropertyChanged("AvgExpenseBudget12")
					Me.OnAvgExpenseBudget12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgMPDBudget12", DbType:="Money NOT NULL")>  _
		Public Property AvgMPDBudget12() As Decimal
			Get
				Return Me._AvgMPDBudget12
			End Get
			Set
				If ((Me._AvgMPDBudget12 = value)  _
							= false) Then
					Me.OnAvgMPDBudget12Changing(value)
					Me.SendPropertyChanging
					Me._AvgMPDBudget12 = value
					Me.SendPropertyChanged("AvgMPDBudget12")
					Me.OnAvgMPDBudget12Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome", DbType:="Money NOT NULL")>  _
		Public Property AvgIncome() As Decimal
			Get
				Return Me._AvgIncome
			End Get
			Set
				If ((Me._AvgIncome = value)  _
							= false) Then
					Me.OnAvgIncomeChanging(value)
					Me.SendPropertyChanging
					Me._AvgIncome = value
					Me.SendPropertyChanged("AvgIncome")
					Me.OnAvgIncomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ap_mpd_User_AP_mpd_UserAccountInfo", Storage:="_AP_mpd_UserAccountInfos", ThisKey:="AP_mpd_UserId", OtherKey:="mpdUserId")>  _
		Public Property AP_mpd_UserAccountInfos() As EntitySet(Of AP_mpd_UserAccountInfo)
			Get
				Return Me._AP_mpd_UserAccountInfos
			End Get
			Set
				Me._AP_mpd_UserAccountInfos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_Ap_mpd_User", Storage:="_AP_mpd_Country", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId", IsForeignKey:=true)>  _
		Public Property AP_mpd_Country() As AP_mpd_Country
			Get
				Return Me._AP_mpd_Country.Entity
			End Get
			Set
				Dim previousValue As AP_mpd_Country = Me._AP_mpd_Country.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AP_mpd_Country.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AP_mpd_Country.Entity = Nothing
						previousValue.Ap_mpd_Users.Remove(Me)
					End If
					Me._AP_mpd_Country.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Ap_mpd_Users.Add(Me)
						Me._mpdCountryId = value.mpdCountryId
					Else
						Me._mpdCountryId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("AP_mpd_Country")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
			Me.SendPropertyChanging
			entity.Ap_mpd_User = Me
		End Sub
		
		Private Sub detach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
			Me.SendPropertyChanging
			entity.Ap_mpd_User = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ministry_systems")>  _
	Partial Public Class ministry_system
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _min_code As String
		
		Private _min_name As String
		
		Private _min_logo As String
		
		Private _last_fin_rep As System.Nullable(Of Date)
		
		Private _gma_status As System.Nullable(Of Byte)
		
		Private _last_dataserver_donation As System.Nullable(Of Date)
		
		Private _iso2_code As String
		
		Private _gr_ministry_id As String
		
		Private _last_dataserver_transaction As System.Nullable(Of Date)
		
		Private _ministry_scope As String
		
		Private _area_code As String
		
		Private _area_name As String
		
		Private _is_active As System.Nullable(Of Boolean)
		
		Private _stage As Byte
		
		Private _fcx As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub Onmin_codeChanging(value As String)
    End Sub
    Partial Private Sub Onmin_codeChanged()
    End Sub
    Partial Private Sub Onmin_nameChanging(value As String)
    End Sub
    Partial Private Sub Onmin_nameChanged()
    End Sub
    Partial Private Sub Onmin_logoChanging(value As String)
    End Sub
    Partial Private Sub Onmin_logoChanged()
    End Sub
    Partial Private Sub Onlast_fin_repChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_fin_repChanged()
    End Sub
    Partial Private Sub Ongma_statusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Ongma_statusChanged()
    End Sub
    Partial Private Sub Onlast_dataserver_donationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_dataserver_donationChanged()
    End Sub
    Partial Private Sub Oniso2_codeChanging(value As String)
    End Sub
    Partial Private Sub Oniso2_codeChanged()
    End Sub
    Partial Private Sub Ongr_ministry_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_ministry_idChanged()
    End Sub
    Partial Private Sub Onlast_dataserver_transactionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_dataserver_transactionChanged()
    End Sub
    Partial Private Sub Onministry_scopeChanging(value As String)
    End Sub
    Partial Private Sub Onministry_scopeChanged()
    End Sub
    Partial Private Sub Onarea_codeChanging(value As String)
    End Sub
    Partial Private Sub Onarea_codeChanged()
    End Sub
    Partial Private Sub Onarea_nameChanging(value As String)
    End Sub
    Partial Private Sub Onarea_nameChanged()
    End Sub
    Partial Private Sub Onis_activeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onis_activeChanged()
    End Sub
    Partial Private Sub OnstageChanging(value As Byte)
    End Sub
    Partial Private Sub OnstageChanged()
    End Sub
    Partial Private Sub OnfcxChanging(value As Boolean)
    End Sub
    Partial Private Sub OnfcxChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_code", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property min_code() As String
			Get
				Return Me._min_code
			End Get
			Set
				If (String.Equals(Me._min_code, value) = false) Then
					Me.Onmin_codeChanging(value)
					Me.SendPropertyChanging
					Me._min_code = value
					Me.SendPropertyChanged("min_code")
					Me.Onmin_codeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_name", DbType:="NVarChar(100)")>  _
		Public Property min_name() As String
			Get
				Return Me._min_name
			End Get
			Set
				If (String.Equals(Me._min_name, value) = false) Then
					Me.Onmin_nameChanging(value)
					Me.SendPropertyChanging
					Me._min_name = value
					Me.SendPropertyChanged("min_name")
					Me.Onmin_nameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_logo", DbType:="NVarChar(250)")>  _
		Public Property min_logo() As String
			Get
				Return Me._min_logo
			End Get
			Set
				If (String.Equals(Me._min_logo, value) = false) Then
					Me.Onmin_logoChanging(value)
					Me.SendPropertyChanging
					Me._min_logo = value
					Me.SendPropertyChanged("min_logo")
					Me.Onmin_logoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_fin_rep", DbType:="SmallDateTime")>  _
		Public Property last_fin_rep() As System.Nullable(Of Date)
			Get
				Return Me._last_fin_rep
			End Get
			Set
				If (Me._last_fin_rep.Equals(value) = false) Then
					Me.Onlast_fin_repChanging(value)
					Me.SendPropertyChanging
					Me._last_fin_rep = value
					Me.SendPropertyChanged("last_fin_rep")
					Me.Onlast_fin_repChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gma_status", DbType:="TinyInt")>  _
		Public Property gma_status() As System.Nullable(Of Byte)
			Get
				Return Me._gma_status
			End Get
			Set
				If (Me._gma_status.Equals(value) = false) Then
					Me.Ongma_statusChanging(value)
					Me.SendPropertyChanging
					Me._gma_status = value
					Me.SendPropertyChanged("gma_status")
					Me.Ongma_statusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_dataserver_donation", DbType:="SmallDateTime")>  _
		Public Property last_dataserver_donation() As System.Nullable(Of Date)
			Get
				Return Me._last_dataserver_donation
			End Get
			Set
				If (Me._last_dataserver_donation.Equals(value) = false) Then
					Me.Onlast_dataserver_donationChanging(value)
					Me.SendPropertyChanging
					Me._last_dataserver_donation = value
					Me.SendPropertyChanged("last_dataserver_donation")
					Me.Onlast_dataserver_donationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iso2_code", DbType:="NVarChar(2)")>  _
		Public Property iso2_code() As String
			Get
				Return Me._iso2_code
			End Get
			Set
				If (String.Equals(Me._iso2_code, value) = false) Then
					Me.Oniso2_codeChanging(value)
					Me.SendPropertyChanging
					Me._iso2_code = value
					Me.SendPropertyChanged("iso2_code")
					Me.Oniso2_codeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_ministry_id", DbType:="NVarChar(128)")>  _
		Public Property gr_ministry_id() As String
			Get
				Return Me._gr_ministry_id
			End Get
			Set
				If (String.Equals(Me._gr_ministry_id, value) = false) Then
					Me.Ongr_ministry_idChanging(value)
					Me.SendPropertyChanging
					Me._gr_ministry_id = value
					Me.SendPropertyChanged("gr_ministry_id")
					Me.Ongr_ministry_idChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_dataserver_transaction", DbType:="SmallDateTime")>  _
		Public Property last_dataserver_transaction() As System.Nullable(Of Date)
			Get
				Return Me._last_dataserver_transaction
			End Get
			Set
				If (Me._last_dataserver_transaction.Equals(value) = false) Then
					Me.Onlast_dataserver_transactionChanging(value)
					Me.SendPropertyChanging
					Me._last_dataserver_transaction = value
					Me.SendPropertyChanged("last_dataserver_transaction")
					Me.Onlast_dataserver_transactionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ministry_scope", DbType:="VarChar(20)")>  _
		Public Property ministry_scope() As String
			Get
				Return Me._ministry_scope
			End Get
			Set
				If (String.Equals(Me._ministry_scope, value) = false) Then
					Me.Onministry_scopeChanging(value)
					Me.SendPropertyChanging
					Me._ministry_scope = value
					Me.SendPropertyChanged("ministry_scope")
					Me.Onministry_scopeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area_code", DbType:="VarChar(10)")>  _
		Public Property area_code() As String
			Get
				Return Me._area_code
			End Get
			Set
				If (String.Equals(Me._area_code, value) = false) Then
					Me.Onarea_codeChanging(value)
					Me.SendPropertyChanging
					Me._area_code = value
					Me.SendPropertyChanged("area_code")
					Me.Onarea_codeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area_name", DbType:="NVarChar(30)")>  _
		Public Property area_name() As String
			Get
				Return Me._area_name
			End Get
			Set
				If (String.Equals(Me._area_name, value) = false) Then
					Me.Onarea_nameChanging(value)
					Me.SendPropertyChanging
					Me._area_name = value
					Me.SendPropertyChanged("area_name")
					Me.Onarea_nameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_active", DbType:="Bit")>  _
		Public Property is_active() As System.Nullable(Of Boolean)
			Get
				Return Me._is_active
			End Get
			Set
				If (Me._is_active.Equals(value) = false) Then
					Me.Onis_activeChanging(value)
					Me.SendPropertyChanging
					Me._is_active = value
					Me.SendPropertyChanged("is_active")
					Me.Onis_activeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stage", DbType:="TinyInt NOT NULL")>  _
		Public Property stage() As Byte
			Get
				Return Me._stage
			End Get
			Set
				If ((Me._stage = value)  _
							= false) Then
					Me.OnstageChanging(value)
					Me.SendPropertyChanging
					Me._stage = value
					Me.SendPropertyChanged("stage")
					Me.OnstageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fcx", DbType:="Bit NOT NULL")>  _
		Public Property fcx() As Boolean
			Get
				Return Me._fcx
			End Get
			Set
				If ((Me._fcx = value)  _
							= false) Then
					Me.OnfcxChanging(value)
					Me.SendPropertyChanging
					Me._fcx = value
					Me.SendPropertyChanged("fcx")
					Me.OnfcxChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
