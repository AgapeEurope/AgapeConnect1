'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace FCX
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
	Partial Public Class FCXDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertFCX_API_FinBat(instance As FCX_API_FinBat)
    End Sub
    Partial Private Sub UpdateFCX_API_FinBat(instance As FCX_API_FinBat)
    End Sub
    Partial Private Sub DeleteFCX_API_FinBat(instance As FCX_API_FinBat)
    End Sub
    Partial Private Sub InsertFCX_API_FinTran(instance As FCX_API_FinTran)
    End Sub
    Partial Private Sub UpdateFCX_API_FinTran(instance As FCX_API_FinTran)
    End Sub
    Partial Private Sub DeleteFCX_API_FinTran(instance As FCX_API_FinTran)
    End Sub
    Partial Private Sub InsertFCX_API_Key(instance As FCX_API_Key)
    End Sub
    Partial Private Sub UpdateFCX_API_Key(instance As FCX_API_Key)
    End Sub
    Partial Private Sub DeleteFCX_API_Key(instance As FCX_API_Key)
    End Sub
    Partial Private Sub InsertFCX_API_Donation_Prop(instance As FCX_API_Donation_Prop)
    End Sub
    Partial Private Sub UpdateFCX_API_Donation_Prop(instance As FCX_API_Donation_Prop)
    End Sub
    Partial Private Sub DeleteFCX_API_Donation_Prop(instance As FCX_API_Donation_Prop)
    End Sub
    Partial Private Sub InsertFCX_API_DonBat(instance As FCX_API_DonBat)
    End Sub
    Partial Private Sub UpdateFCX_API_DonBat(instance As FCX_API_DonBat)
    End Sub
    Partial Private Sub DeleteFCX_API_DonBat(instance As FCX_API_DonBat)
    End Sub
    Partial Private Sub InsertFCX_API_Donor(instance As FCX_API_Donor)
    End Sub
    Partial Private Sub UpdateFCX_API_Donor(instance As FCX_API_Donor)
    End Sub
    Partial Private Sub DeleteFCX_API_Donor(instance As FCX_API_Donor)
    End Sub
    Partial Private Sub InsertFCX_API_Donation(instance As FCX_API_Donation)
    End Sub
    Partial Private Sub UpdateFCX_API_Donation(instance As FCX_API_Donation)
    End Sub
    Partial Private Sub DeleteFCX_API_Donation(instance As FCX_API_Donation)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property FCX_API_FinBats() As System.Data.Linq.Table(Of FCX_API_FinBat)
			Get
				Return Me.GetTable(Of FCX_API_FinBat)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_FinTrans() As System.Data.Linq.Table(Of FCX_API_FinTran)
			Get
				Return Me.GetTable(Of FCX_API_FinTran)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_Keys() As System.Data.Linq.Table(Of FCX_API_Key)
			Get
				Return Me.GetTable(Of FCX_API_Key)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_Donors_Props() As System.Data.Linq.Table(Of FCX_API_Donors_Prop)
			Get
				Return Me.GetTable(Of FCX_API_Donors_Prop)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_Donation_Props() As System.Data.Linq.Table(Of FCX_API_Donation_Prop)
			Get
				Return Me.GetTable(Of FCX_API_Donation_Prop)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_DonBats() As System.Data.Linq.Table(Of FCX_API_DonBat)
			Get
				Return Me.GetTable(Of FCX_API_DonBat)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_Donors() As System.Data.Linq.Table(Of FCX_API_Donor)
			Get
				Return Me.GetTable(Of FCX_API_Donor)
			End Get
		End Property
		
		Public ReadOnly Property FCX_API_Donations() As System.Data.Linq.Table(Of FCX_API_Donation)
			Get
				Return Me.GetTable(Of FCX_API_Donation)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_FinBat")>  _
	Partial Public Class FCX_API_FinBat
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FinBatId As Long
		
		Private _DeveloperId As Integer
		
		Private _Ledger As String
		
		Private _Status As System.Nullable(Of Byte)
		
		Private _StatusDesc As String
		
		Private _Received As System.Nullable(Of Date)
		
		Private _Downloaded As System.Nullable(Of Date)
		
		Private _ITN_Sent As Boolean
		
		Private _UniqueBatchRef As String
		
		Private _Description As String
		
		Private _FCX_API_FinTrans As EntitySet(Of FCX_API_FinTran)
		
		Private _FCX_API_Key As EntityRef(Of FCX_API_Key)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFinBatIdChanging(value As Long)
    End Sub
    Partial Private Sub OnFinBatIdChanged()
    End Sub
    Partial Private Sub OnDeveloperIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeveloperIdChanged()
    End Sub
    Partial Private Sub OnLedgerChanging(value As String)
    End Sub
    Partial Private Sub OnLedgerChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStatusDescChanging(value As String)
    End Sub
    Partial Private Sub OnStatusDescChanged()
    End Sub
    Partial Private Sub OnReceivedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceivedChanged()
    End Sub
    Partial Private Sub OnDownloadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDownloadedChanged()
    End Sub
    Partial Private Sub OnITN_SentChanging(value As Boolean)
    End Sub
    Partial Private Sub OnITN_SentChanged()
    End Sub
    Partial Private Sub OnUniqueBatchRefChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueBatchRefChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_FinTrans = New EntitySet(Of FCX_API_FinTran)(AddressOf Me.attach_FCX_API_FinTrans, AddressOf Me.detach_FCX_API_FinTrans)
			Me._FCX_API_Key = CType(Nothing, EntityRef(Of FCX_API_Key))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinBatId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FinBatId() As Long
			Get
				Return Me._FinBatId
			End Get
			Set
				If ((Me._FinBatId = value)  _
							= false) Then
					Me.OnFinBatIdChanging(value)
					Me.SendPropertyChanging
					Me._FinBatId = value
					Me.SendPropertyChanged("FinBatId")
					Me.OnFinBatIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperId", DbType:="Int NOT NULL")>  _
		Public Property DeveloperId() As Integer
			Get
				Return Me._DeveloperId
			End Get
			Set
				If ((Me._DeveloperId = value)  _
							= false) Then
					If Me._FCX_API_Key.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDeveloperIdChanging(value)
					Me.SendPropertyChanging
					Me._DeveloperId = value
					Me.SendPropertyChanged("DeveloperId")
					Me.OnDeveloperIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ledger", DbType:="NVarChar(10)")>  _
		Public Property Ledger() As String
			Get
				Return Me._Ledger
			End Get
			Set
				If (String.Equals(Me._Ledger, value) = false) Then
					Me.OnLedgerChanging(value)
					Me.SendPropertyChanging
					Me._Ledger = value
					Me.SendPropertyChanged("Ledger")
					Me.OnLedgerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt")>  _
		Public Property Status() As System.Nullable(Of Byte)
			Get
				Return Me._Status
			End Get
			Set
				If (Me._Status.Equals(value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusDesc", DbType:="VarChar(MAX)")>  _
		Public Property StatusDesc() As String
			Get
				Return Me._StatusDesc
			End Get
			Set
				If (String.Equals(Me._StatusDesc, value) = false) Then
					Me.OnStatusDescChanging(value)
					Me.SendPropertyChanging
					Me._StatusDesc = value
					Me.SendPropertyChanged("StatusDesc")
					Me.OnStatusDescChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Received", DbType:="DateTime")>  _
		Public Property Received() As System.Nullable(Of Date)
			Get
				Return Me._Received
			End Get
			Set
				If (Me._Received.Equals(value) = false) Then
					Me.OnReceivedChanging(value)
					Me.SendPropertyChanging
					Me._Received = value
					Me.SendPropertyChanged("Received")
					Me.OnReceivedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Downloaded", DbType:="DateTime")>  _
		Public Property Downloaded() As System.Nullable(Of Date)
			Get
				Return Me._Downloaded
			End Get
			Set
				If (Me._Downloaded.Equals(value) = false) Then
					Me.OnDownloadedChanging(value)
					Me.SendPropertyChanging
					Me._Downloaded = value
					Me.SendPropertyChanged("Downloaded")
					Me.OnDownloadedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITN_Sent", DbType:="Bit NOT NULL")>  _
		Public Property ITN_Sent() As Boolean
			Get
				Return Me._ITN_Sent
			End Get
			Set
				If ((Me._ITN_Sent = value)  _
							= false) Then
					Me.OnITN_SentChanging(value)
					Me.SendPropertyChanging
					Me._ITN_Sent = value
					Me.SendPropertyChanged("ITN_Sent")
					Me.OnITN_SentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueBatchRef", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueBatchRef() As String
			Get
				Return Me._UniqueBatchRef
			End Get
			Set
				If (String.Equals(Me._UniqueBatchRef, value) = false) Then
					Me.OnUniqueBatchRefChanging(value)
					Me.SendPropertyChanging
					Me._UniqueBatchRef = value
					Me.SendPropertyChanged("UniqueBatchRef")
					Me.OnUniqueBatchRefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(200)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_FinBat_FCX_API_FinTran", Storage:="_FCX_API_FinTrans", ThisKey:="FinBatId", OtherKey:="FinBatId")>  _
		Public Property FCX_API_FinTrans() As EntitySet(Of FCX_API_FinTran)
			Get
				Return Me._FCX_API_FinTrans
			End Get
			Set
				Me._FCX_API_FinTrans.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Key_FCX_API_FinBat", Storage:="_FCX_API_Key", ThisKey:="DeveloperId", OtherKey:="DeveloperId", IsForeignKey:=true)>  _
		Public Property FCX_API_Key() As FCX_API_Key
			Get
				Return Me._FCX_API_Key.Entity
			End Get
			Set
				Dim previousValue As FCX_API_Key = Me._FCX_API_Key.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_Key.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_Key.Entity = Nothing
						previousValue.FCX_API_FinBats.Remove(Me)
					End If
					Me._FCX_API_Key.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_FinBats.Add(Me)
						Me._DeveloperId = value.DeveloperId
					Else
						Me._DeveloperId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("FCX_API_Key")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FCX_API_FinTrans(ByVal entity As FCX_API_FinTran)
			Me.SendPropertyChanging
			entity.FCX_API_FinBat = Me
		End Sub
		
		Private Sub detach_FCX_API_FinTrans(ByVal entity As FCX_API_FinTran)
			Me.SendPropertyChanging
			entity.FCX_API_FinBat = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_FinTrans")>  _
	Partial Public Class FCX_API_FinTran
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FinTransId As Long
		
		Private _Account As String
		
		Private _R_C As String
		
		Private _Amount As Decimal
		
		Private _Description As String
		
		Private _TrxDate As Date
		
		Private _Month As System.Nullable(Of Byte)
		
		Private _Year As System.Nullable(Of Short)
		
		Private _FinBatId As Long
		
		Private _UniqueTrxRef As String
		
		Private _FCX_API_FinBat As EntityRef(Of FCX_API_FinBat)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFinTransIdChanging(value As Long)
    End Sub
    Partial Private Sub OnFinTransIdChanged()
    End Sub
    Partial Private Sub OnAccountChanging(value As String)
    End Sub
    Partial Private Sub OnAccountChanged()
    End Sub
    Partial Private Sub OnR_CChanging(value As String)
    End Sub
    Partial Private Sub OnR_CChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTrxDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTrxDateChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnFinBatIdChanging(value As Long)
    End Sub
    Partial Private Sub OnFinBatIdChanged()
    End Sub
    Partial Private Sub OnUniqueTrxRefChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueTrxRefChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_FinBat = CType(Nothing, EntityRef(Of FCX_API_FinBat))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinTransId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FinTransId() As Long
			Get
				Return Me._FinTransId
			End Get
			Set
				If ((Me._FinTransId = value)  _
							= false) Then
					Me.OnFinTransIdChanging(value)
					Me.SendPropertyChanging
					Me._FinTransId = value
					Me.SendPropertyChanged("FinTransId")
					Me.OnFinTransIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Account() As String
			Get
				Return Me._Account
			End Get
			Set
				If (String.Equals(Me._Account, value) = false) Then
					Me.OnAccountChanging(value)
					Me.SendPropertyChanging
					Me._Account = value
					Me.SendPropertyChanged("Account")
					Me.OnAccountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[R/C]", Storage:="_R_C", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property R_C() As String
			Get
				Return Me._R_C
			End Get
			Set
				If (String.Equals(Me._R_C, value) = false) Then
					Me.OnR_CChanging(value)
					Me.SendPropertyChanging
					Me._R_C = value
					Me.SendPropertyChanged("R_C")
					Me.OnR_CChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money NOT NULL")>  _
		Public Property Amount() As Decimal
			Get
				Return Me._Amount
			End Get
			Set
				If ((Me._Amount = value)  _
							= false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(120) NOT NULL", CanBeNull:=false)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrxDate", DbType:="DateTime NOT NULL")>  _
		Public Property TrxDate() As Date
			Get
				Return Me._TrxDate
			End Get
			Set
				If ((Me._TrxDate = value)  _
							= false) Then
					Me.OnTrxDateChanging(value)
					Me.SendPropertyChanging
					Me._TrxDate = value
					Me.SendPropertyChanged("TrxDate")
					Me.OnTrxDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="TinyInt")>  _
		Public Property Month() As System.Nullable(Of Byte)
			Get
				Return Me._Month
			End Get
			Set
				If (Me._Month.Equals(value) = false) Then
					Me.OnMonthChanging(value)
					Me.SendPropertyChanging
					Me._Month = value
					Me.SendPropertyChanged("Month")
					Me.OnMonthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="SmallInt")>  _
		Public Property Year() As System.Nullable(Of Short)
			Get
				Return Me._Year
			End Get
			Set
				If (Me._Year.Equals(value) = false) Then
					Me.OnYearChanging(value)
					Me.SendPropertyChanging
					Me._Year = value
					Me.SendPropertyChanged("Year")
					Me.OnYearChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinBatId", DbType:="BigInt NOT NULL")>  _
		Public Property FinBatId() As Long
			Get
				Return Me._FinBatId
			End Get
			Set
				If ((Me._FinBatId = value)  _
							= false) Then
					If Me._FCX_API_FinBat.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFinBatIdChanging(value)
					Me.SendPropertyChanging
					Me._FinBatId = value
					Me.SendPropertyChanged("FinBatId")
					Me.OnFinBatIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueTrxRef", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueTrxRef() As String
			Get
				Return Me._UniqueTrxRef
			End Get
			Set
				If (String.Equals(Me._UniqueTrxRef, value) = false) Then
					Me.OnUniqueTrxRefChanging(value)
					Me.SendPropertyChanging
					Me._UniqueTrxRef = value
					Me.SendPropertyChanged("UniqueTrxRef")
					Me.OnUniqueTrxRefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_FinBat_FCX_API_FinTran", Storage:="_FCX_API_FinBat", ThisKey:="FinBatId", OtherKey:="FinBatId", IsForeignKey:=true)>  _
		Public Property FCX_API_FinBat() As FCX_API_FinBat
			Get
				Return Me._FCX_API_FinBat.Entity
			End Get
			Set
				Dim previousValue As FCX_API_FinBat = Me._FCX_API_FinBat.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_FinBat.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_FinBat.Entity = Nothing
						previousValue.FCX_API_FinTrans.Remove(Me)
					End If
					Me._FCX_API_FinBat.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_FinTrans.Add(Me)
						Me._FinBatId = value.FinBatId
					Else
						Me._FinBatId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("FCX_API_FinBat")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_Keys")>  _
	Partial Public Class FCX_API_Key
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DeveloperId As Integer
		
		Private _API_KEY As System.Guid
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _ProductName As String
		
		Private _ITN As String
		
		Private _WhiteList As String
		
		Private _TrustLevel As Byte
		
		Private _Notes As String
		
		Private _Active As Boolean
		
		Private _PortalId As Integer
		
		Private _FCX_API_FinBats As EntitySet(Of FCX_API_FinBat)
		
		Private _FCX_API_DonBats As EntitySet(Of FCX_API_DonBat)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeveloperIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeveloperIdChanged()
    End Sub
    Partial Private Sub OnAPI_KEYChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAPI_KEYChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnITNChanging(value As String)
    End Sub
    Partial Private Sub OnITNChanged()
    End Sub
    Partial Private Sub OnWhiteListChanging(value As String)
    End Sub
    Partial Private Sub OnWhiteListChanged()
    End Sub
    Partial Private Sub OnTrustLevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnTrustLevelChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_FinBats = New EntitySet(Of FCX_API_FinBat)(AddressOf Me.attach_FCX_API_FinBats, AddressOf Me.detach_FCX_API_FinBats)
			Me._FCX_API_DonBats = New EntitySet(Of FCX_API_DonBat)(AddressOf Me.attach_FCX_API_DonBats, AddressOf Me.detach_FCX_API_DonBats)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DeveloperId() As Integer
			Get
				Return Me._DeveloperId
			End Get
			Set
				If ((Me._DeveloperId = value)  _
							= false) Then
					Me.OnDeveloperIdChanging(value)
					Me.SendPropertyChanging
					Me._DeveloperId = value
					Me.SendPropertyChanged("DeveloperId")
					Me.OnDeveloperIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[API-KEY]", Storage:="_API_KEY", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property API_KEY() As System.Guid
			Get
				Return Me._API_KEY
			End Get
			Set
				If ((Me._API_KEY = value)  _
							= false) Then
					Me.OnAPI_KEYChanging(value)
					Me.SendPropertyChanging
					Me._API_KEY = value
					Me.SendPropertyChanged("API_KEY")
					Me.OnAPI_KEYChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(50)")>  _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set
				If (String.Equals(Me._ProductName, value) = false) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITN", DbType:="NVarChar(300)")>  _
		Public Property ITN() As String
			Get
				Return Me._ITN
			End Get
			Set
				If (String.Equals(Me._ITN, value) = false) Then
					Me.OnITNChanging(value)
					Me.SendPropertyChanging
					Me._ITN = value
					Me.SendPropertyChanged("ITN")
					Me.OnITNChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WhiteList", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property WhiteList() As String
			Get
				Return Me._WhiteList
			End Get
			Set
				If (String.Equals(Me._WhiteList, value) = false) Then
					Me.OnWhiteListChanging(value)
					Me.SendPropertyChanging
					Me._WhiteList = value
					Me.SendPropertyChanged("WhiteList")
					Me.OnWhiteListChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrustLevel", DbType:="TinyInt NOT NULL")>  _
		Public Property TrustLevel() As Byte
			Get
				Return Me._TrustLevel
			End Get
			Set
				If ((Me._TrustLevel = value)  _
							= false) Then
					Me.OnTrustLevelChanging(value)
					Me.SendPropertyChanging
					Me._TrustLevel = value
					Me.SendPropertyChanged("TrustLevel")
					Me.OnTrustLevelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
		Public Property Active() As Boolean
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
		Public Property PortalId() As Integer
			Get
				Return Me._PortalId
			End Get
			Set
				If ((Me._PortalId = value)  _
							= false) Then
					Me.OnPortalIdChanging(value)
					Me.SendPropertyChanging
					Me._PortalId = value
					Me.SendPropertyChanged("PortalId")
					Me.OnPortalIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Key_FCX_API_FinBat", Storage:="_FCX_API_FinBats", ThisKey:="DeveloperId", OtherKey:="DeveloperId")>  _
		Public Property FCX_API_FinBats() As EntitySet(Of FCX_API_FinBat)
			Get
				Return Me._FCX_API_FinBats
			End Get
			Set
				Me._FCX_API_FinBats.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Key_FCX_API_DonBat", Storage:="_FCX_API_DonBats", ThisKey:="DeveloperId", OtherKey:="DeveloperId")>  _
		Public Property FCX_API_DonBats() As EntitySet(Of FCX_API_DonBat)
			Get
				Return Me._FCX_API_DonBats
			End Get
			Set
				Me._FCX_API_DonBats.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FCX_API_FinBats(ByVal entity As FCX_API_FinBat)
			Me.SendPropertyChanging
			entity.FCX_API_Key = Me
		End Sub
		
		Private Sub detach_FCX_API_FinBats(ByVal entity As FCX_API_FinBat)
			Me.SendPropertyChanging
			entity.FCX_API_Key = Nothing
		End Sub
		
		Private Sub attach_FCX_API_DonBats(ByVal entity As FCX_API_DonBat)
			Me.SendPropertyChanging
			entity.FCX_API_Key = Me
		End Sub
		
		Private Sub detach_FCX_API_DonBats(ByVal entity As FCX_API_DonBat)
			Me.SendPropertyChanging
			entity.FCX_API_Key = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_Donors_Prop")>  _
	Partial Public Class FCX_API_Donors_Prop
		
		Private _PropertyId As Long
		
		Private _DonorId As Long
		
		Private _PropertyName As String
		
		Private _PropertyValue As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyId", DbType:="BigInt NOT NULL")>  _
		Public Property PropertyId() As Long
			Get
				Return Me._PropertyId
			End Get
			Set
				If ((Me._PropertyId = value)  _
							= false) Then
					Me._PropertyId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", DbType:="BigInt NOT NULL")>  _
		Public Property DonorId() As Long
			Get
				Return Me._DonorId
			End Get
			Set
				If ((Me._DonorId = value)  _
							= false) Then
					Me._DonorId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
		Public Property PropertyName() As String
			Get
				Return Me._PropertyName
			End Get
			Set
				If (String.Equals(Me._PropertyName, value) = false) Then
					Me._PropertyName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="NVarChar(200)")>  _
		Public Property PropertyValue() As String
			Get
				Return Me._PropertyValue
			End Get
			Set
				If (String.Equals(Me._PropertyValue, value) = false) Then
					Me._PropertyValue = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_Donation_Prop")>  _
	Partial Public Class FCX_API_Donation_Prop
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PropertyId As Long
		
		Private _DonationId As Long
		
		Private _PropertyName As String
		
		Private _PropertyValue As String
		
		Private _FCX_API_Donation As EntityRef(Of FCX_API_Donation)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPropertyIdChanging(value As Long)
    End Sub
    Partial Private Sub OnPropertyIdChanged()
    End Sub
    Partial Private Sub OnDonationIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonationIdChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_Donation = CType(Nothing, EntityRef(Of FCX_API_Donation))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property PropertyId() As Long
			Get
				Return Me._PropertyId
			End Get
			Set
				If ((Me._PropertyId = value)  _
							= false) Then
					Me.OnPropertyIdChanging(value)
					Me.SendPropertyChanging
					Me._PropertyId = value
					Me.SendPropertyChanged("PropertyId")
					Me.OnPropertyIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationId", DbType:="BigInt NOT NULL")>  _
		Public Property DonationId() As Long
			Get
				Return Me._DonationId
			End Get
			Set
				If ((Me._DonationId = value)  _
							= false) Then
					If Me._FCX_API_Donation.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDonationIdChanging(value)
					Me.SendPropertyChanging
					Me._DonationId = value
					Me.SendPropertyChanged("DonationId")
					Me.OnDonationIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
		Public Property PropertyName() As String
			Get
				Return Me._PropertyName
			End Get
			Set
				If (String.Equals(Me._PropertyName, value) = false) Then
					Me.OnPropertyNameChanging(value)
					Me.SendPropertyChanging
					Me._PropertyName = value
					Me.SendPropertyChanged("PropertyName")
					Me.OnPropertyNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="NVarChar(200)")>  _
		Public Property PropertyValue() As String
			Get
				Return Me._PropertyValue
			End Get
			Set
				If (String.Equals(Me._PropertyValue, value) = false) Then
					Me.OnPropertyValueChanging(value)
					Me.SendPropertyChanging
					Me._PropertyValue = value
					Me.SendPropertyChanged("PropertyValue")
					Me.OnPropertyValueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Donation_FCX_API_Donation_Prop", Storage:="_FCX_API_Donation", ThisKey:="DonationId", OtherKey:="DonationId", IsForeignKey:=true)>  _
		Public Property FCX_API_Donation() As FCX_API_Donation
			Get
				Return Me._FCX_API_Donation.Entity
			End Get
			Set
				Dim previousValue As FCX_API_Donation = Me._FCX_API_Donation.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_Donation.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_Donation.Entity = Nothing
						previousValue.FCX_API_Donation_Props.Remove(Me)
					End If
					Me._FCX_API_Donation.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_Donation_Props.Add(Me)
						Me._DonationId = value.DonationId
					Else
						Me._DonationId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("FCX_API_Donation")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_DonBat")>  _
	Partial Public Class FCX_API_DonBat
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DonBatId As Long
		
		Private _DeveloperId As System.Nullable(Of Integer)
		
		Private _Status As System.Nullable(Of Byte)
		
		Private _SatusDesc As String
		
		Private _Received As System.Nullable(Of Date)
		
		Private _Downloaded As System.Nullable(Of Date)
		
		Private _ITN_Sent As Boolean
		
		Private _UniqueBatchRef As String
		
		Private _FCX_API_Donations As EntitySet(Of FCX_API_Donation)
		
		Private _FCX_API_Key As EntityRef(Of FCX_API_Key)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonBatIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonBatIdChanged()
    End Sub
    Partial Private Sub OnDeveloperIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDeveloperIdChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnSatusDescChanging(value As String)
    End Sub
    Partial Private Sub OnSatusDescChanged()
    End Sub
    Partial Private Sub OnReceivedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReceivedChanged()
    End Sub
    Partial Private Sub OnDownloadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDownloadedChanged()
    End Sub
    Partial Private Sub OnITN_SentChanging(value As Boolean)
    End Sub
    Partial Private Sub OnITN_SentChanged()
    End Sub
    Partial Private Sub OnUniqueBatchRefChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueBatchRefChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_Donations = New EntitySet(Of FCX_API_Donation)(AddressOf Me.attach_FCX_API_Donations, AddressOf Me.detach_FCX_API_Donations)
			Me._FCX_API_Key = CType(Nothing, EntityRef(Of FCX_API_Key))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonBatId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DonBatId() As Long
			Get
				Return Me._DonBatId
			End Get
			Set
				If ((Me._DonBatId = value)  _
							= false) Then
					Me.OnDonBatIdChanging(value)
					Me.SendPropertyChanging
					Me._DonBatId = value
					Me.SendPropertyChanged("DonBatId")
					Me.OnDonBatIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperId", DbType:="Int")>  _
		Public Property DeveloperId() As System.Nullable(Of Integer)
			Get
				Return Me._DeveloperId
			End Get
			Set
				If (Me._DeveloperId.Equals(value) = false) Then
					If Me._FCX_API_Key.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDeveloperIdChanging(value)
					Me.SendPropertyChanging
					Me._DeveloperId = value
					Me.SendPropertyChanged("DeveloperId")
					Me.OnDeveloperIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt")>  _
		Public Property Status() As System.Nullable(Of Byte)
			Get
				Return Me._Status
			End Get
			Set
				If (Me._Status.Equals(value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SatusDesc", DbType:="NVarChar(MAX)")>  _
		Public Property SatusDesc() As String
			Get
				Return Me._SatusDesc
			End Get
			Set
				If (String.Equals(Me._SatusDesc, value) = false) Then
					Me.OnSatusDescChanging(value)
					Me.SendPropertyChanging
					Me._SatusDesc = value
					Me.SendPropertyChanged("SatusDesc")
					Me.OnSatusDescChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Received", DbType:="DateTime")>  _
		Public Property Received() As System.Nullable(Of Date)
			Get
				Return Me._Received
			End Get
			Set
				If (Me._Received.Equals(value) = false) Then
					Me.OnReceivedChanging(value)
					Me.SendPropertyChanging
					Me._Received = value
					Me.SendPropertyChanged("Received")
					Me.OnReceivedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Downloaded", DbType:="DateTime")>  _
		Public Property Downloaded() As System.Nullable(Of Date)
			Get
				Return Me._Downloaded
			End Get
			Set
				If (Me._Downloaded.Equals(value) = false) Then
					Me.OnDownloadedChanging(value)
					Me.SendPropertyChanging
					Me._Downloaded = value
					Me.SendPropertyChanged("Downloaded")
					Me.OnDownloadedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITN_Sent", DbType:="Bit NOT NULL")>  _
		Public Property ITN_Sent() As Boolean
			Get
				Return Me._ITN_Sent
			End Get
			Set
				If ((Me._ITN_Sent = value)  _
							= false) Then
					Me.OnITN_SentChanging(value)
					Me.SendPropertyChanging
					Me._ITN_Sent = value
					Me.SendPropertyChanged("ITN_Sent")
					Me.OnITN_SentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueBatchRef", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueBatchRef() As String
			Get
				Return Me._UniqueBatchRef
			End Get
			Set
				If (String.Equals(Me._UniqueBatchRef, value) = false) Then
					Me.OnUniqueBatchRefChanging(value)
					Me.SendPropertyChanging
					Me._UniqueBatchRef = value
					Me.SendPropertyChanged("UniqueBatchRef")
					Me.OnUniqueBatchRefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_DonBat_FCX_API_Donation", Storage:="_FCX_API_Donations", ThisKey:="DonBatId", OtherKey:="DonationBatId")>  _
		Public Property FCX_API_Donations() As EntitySet(Of FCX_API_Donation)
			Get
				Return Me._FCX_API_Donations
			End Get
			Set
				Me._FCX_API_Donations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Key_FCX_API_DonBat", Storage:="_FCX_API_Key", ThisKey:="DeveloperId", OtherKey:="DeveloperId", IsForeignKey:=true)>  _
		Public Property FCX_API_Key() As FCX_API_Key
			Get
				Return Me._FCX_API_Key.Entity
			End Get
			Set
				Dim previousValue As FCX_API_Key = Me._FCX_API_Key.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_Key.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_Key.Entity = Nothing
						previousValue.FCX_API_DonBats.Remove(Me)
					End If
					Me._FCX_API_Key.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_DonBats.Add(Me)
						Me._DeveloperId = value.DeveloperId
					Else
						Me._DeveloperId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("FCX_API_Key")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FCX_API_Donations(ByVal entity As FCX_API_Donation)
			Me.SendPropertyChanging
			entity.FCX_API_DonBat = Me
		End Sub
		
		Private Sub detach_FCX_API_Donations(ByVal entity As FCX_API_Donation)
			Me.SendPropertyChanging
			entity.FCX_API_DonBat = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_Donors")>  _
	Partial Public Class FCX_API_Donor
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DonorId As Long
		
		Private _Title As String
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _MiddleName As String
		
		Private _SpouseFirstName As String
		
		Private _SpouseLastName As String
		
		Private _Email As String
		
		Private _StreetAddress As String
		
		Private _City As String
		
		Private _State As String
		
		Private _Zip As String
		
		Private _Country As String
		
		Private _MobilePhone As String
		
		Private _Phone As String
		
		Private _UniqueDonorRef As String
		
		Private _DonationnProcessorId As String
		
		Private _FCX_API_Donations As EntitySet(Of FCX_API_Donation)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonorIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonorIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnSpouseFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnSpouseFirstNameChanged()
    End Sub
    Partial Private Sub OnSpouseLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnSpouseLastNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnStreetAddressChanging(value As String)
    End Sub
    Partial Private Sub OnStreetAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnMobilePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnUniqueDonorRefChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueDonorRefChanged()
    End Sub
    Partial Private Sub OnDonationnProcessorIdChanging(value As String)
    End Sub
    Partial Private Sub OnDonationnProcessorIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_Donations = New EntitySet(Of FCX_API_Donation)(AddressOf Me.attach_FCX_API_Donations, AddressOf Me.detach_FCX_API_Donations)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DonorId() As Long
			Get
				Return Me._DonorId
			End Get
			Set
				If ((Me._DonorId = value)  _
							= false) Then
					Me.OnDonorIdChanging(value)
					Me.SendPropertyChanging
					Me._DonorId = value
					Me.SendPropertyChanged("DonorId")
					Me.OnDonorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(15)")>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(70)")>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(70)")>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(70)")>  _
		Public Property MiddleName() As String
			Get
				Return Me._MiddleName
			End Get
			Set
				If (String.Equals(Me._MiddleName, value) = false) Then
					Me.OnMiddleNameChanging(value)
					Me.SendPropertyChanging
					Me._MiddleName = value
					Me.SendPropertyChanged("MiddleName")
					Me.OnMiddleNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpouseFirstName", DbType:="NVarChar(70)")>  _
		Public Property SpouseFirstName() As String
			Get
				Return Me._SpouseFirstName
			End Get
			Set
				If (String.Equals(Me._SpouseFirstName, value) = false) Then
					Me.OnSpouseFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._SpouseFirstName = value
					Me.SendPropertyChanged("SpouseFirstName")
					Me.OnSpouseFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpouseLastName", DbType:="NVarChar(70)")>  _
		Public Property SpouseLastName() As String
			Get
				Return Me._SpouseLastName
			End Get
			Set
				If (String.Equals(Me._SpouseLastName, value) = false) Then
					Me.OnSpouseLastNameChanging(value)
					Me.SendPropertyChanging
					Me._SpouseLastName = value
					Me.SendPropertyChanged("SpouseLastName")
					Me.OnSpouseLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(70)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StreetAddress", DbType:="NVarChar(120)")>  _
		Public Property StreetAddress() As String
			Get
				Return Me._StreetAddress
			End Get
			Set
				If (String.Equals(Me._StreetAddress, value) = false) Then
					Me.OnStreetAddressChanging(value)
					Me.SendPropertyChanging
					Me._StreetAddress = value
					Me.SendPropertyChanged("StreetAddress")
					Me.OnStreetAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(80)")>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(80)")>  _
		Public Property State() As String
			Get
				Return Me._State
			End Get
			Set
				If (String.Equals(Me._State, value) = false) Then
					Me.OnStateChanging(value)
					Me.SendPropertyChanging
					Me._State = value
					Me.SendPropertyChanged("State")
					Me.OnStateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(80)")>  _
		Public Property Zip() As String
			Get
				Return Me._Zip
			End Get
			Set
				If (String.Equals(Me._Zip, value) = false) Then
					Me.OnZipChanging(value)
					Me.SendPropertyChanging
					Me._Zip = value
					Me.SendPropertyChanged("Zip")
					Me.OnZipChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePhone", DbType:="NVarChar(50)")>  _
		Public Property MobilePhone() As String
			Get
				Return Me._MobilePhone
			End Get
			Set
				If (String.Equals(Me._MobilePhone, value) = false) Then
					Me.OnMobilePhoneChanging(value)
					Me.SendPropertyChanging
					Me._MobilePhone = value
					Me.SendPropertyChanged("MobilePhone")
					Me.OnMobilePhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueDonorRef", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueDonorRef() As String
			Get
				Return Me._UniqueDonorRef
			End Get
			Set
				If (String.Equals(Me._UniqueDonorRef, value) = false) Then
					Me.OnUniqueDonorRefChanging(value)
					Me.SendPropertyChanging
					Me._UniqueDonorRef = value
					Me.SendPropertyChanged("UniqueDonorRef")
					Me.OnUniqueDonorRefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationnProcessorId", DbType:="NVarChar(250)")>  _
		Public Property DonationnProcessorId() As String
			Get
				Return Me._DonationnProcessorId
			End Get
			Set
				If (String.Equals(Me._DonationnProcessorId, value) = false) Then
					Me.OnDonationnProcessorIdChanging(value)
					Me.SendPropertyChanging
					Me._DonationnProcessorId = value
					Me.SendPropertyChanged("DonationnProcessorId")
					Me.OnDonationnProcessorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Donor_FCX_API_Donation", Storage:="_FCX_API_Donations", ThisKey:="DonorId", OtherKey:="DonorId")>  _
		Public Property FCX_API_Donations() As EntitySet(Of FCX_API_Donation)
			Get
				Return Me._FCX_API_Donations
			End Get
			Set
				Me._FCX_API_Donations.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FCX_API_Donations(ByVal entity As FCX_API_Donation)
			Me.SendPropertyChanging
			entity.FCX_API_Donor = Me
		End Sub
		
		Private Sub detach_FCX_API_Donations(ByVal entity As FCX_API_Donation)
			Me.SendPropertyChanging
			entity.FCX_API_Donor = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FCX_API_Donation")>  _
	Partial Public Class FCX_API_Donation
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DonationId As Long
		
		Private _DonationBatId As Long
		
		Private _Amount As Decimal
		
		Private _GiftDate As Date
		
		Private _GlobalDonorCode As String
		
		Private _DesigId As String
		
		Private _PaymentProcessor As String
		
		Private _PaymentProcessorTrxId As String
		
		Private _DonorId As Long
		
		Private _UniqueDonationRef As String
		
		Private _IBAN As String
		
		Private _VCode As String
		
		Private _FCX_API_Donation_Props As EntitySet(Of FCX_API_Donation_Prop)
		
		Private _FCX_API_DonBat As EntityRef(Of FCX_API_DonBat)
		
		Private _FCX_API_Donor As EntityRef(Of FCX_API_Donor)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonationIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonationIdChanged()
    End Sub
    Partial Private Sub OnDonationBatIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonationBatIdChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnGiftDateChanging(value As Date)
    End Sub
    Partial Private Sub OnGiftDateChanged()
    End Sub
    Partial Private Sub OnGlobalDonorCodeChanging(value As String)
    End Sub
    Partial Private Sub OnGlobalDonorCodeChanged()
    End Sub
    Partial Private Sub OnDesigIdChanging(value As String)
    End Sub
    Partial Private Sub OnDesigIdChanged()
    End Sub
    Partial Private Sub OnPaymentProcessorChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentProcessorChanged()
    End Sub
    Partial Private Sub OnPaymentProcessorTrxIdChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentProcessorTrxIdChanged()
    End Sub
    Partial Private Sub OnDonorIdChanging(value As Long)
    End Sub
    Partial Private Sub OnDonorIdChanged()
    End Sub
    Partial Private Sub OnUniqueDonationRefChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueDonationRefChanged()
    End Sub
    Partial Private Sub OnIBANChanging(value As String)
    End Sub
    Partial Private Sub OnIBANChanged()
    End Sub
    Partial Private Sub OnVCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FCX_API_Donation_Props = New EntitySet(Of FCX_API_Donation_Prop)(AddressOf Me.attach_FCX_API_Donation_Props, AddressOf Me.detach_FCX_API_Donation_Props)
			Me._FCX_API_DonBat = CType(Nothing, EntityRef(Of FCX_API_DonBat))
			Me._FCX_API_Donor = CType(Nothing, EntityRef(Of FCX_API_Donor))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DonationId() As Long
			Get
				Return Me._DonationId
			End Get
			Set
				If ((Me._DonationId = value)  _
							= false) Then
					Me.OnDonationIdChanging(value)
					Me.SendPropertyChanging
					Me._DonationId = value
					Me.SendPropertyChanged("DonationId")
					Me.OnDonationIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationBatId", DbType:="BigInt NOT NULL")>  _
		Public Property DonationBatId() As Long
			Get
				Return Me._DonationBatId
			End Get
			Set
				If ((Me._DonationBatId = value)  _
							= false) Then
					If Me._FCX_API_DonBat.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDonationBatIdChanging(value)
					Me.SendPropertyChanging
					Me._DonationBatId = value
					Me.SendPropertyChanged("DonationBatId")
					Me.OnDonationBatIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money NOT NULL")>  _
		Public Property Amount() As Decimal
			Get
				Return Me._Amount
			End Get
			Set
				If ((Me._Amount = value)  _
							= false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiftDate", DbType:="DateTime NOT NULL")>  _
		Public Property GiftDate() As Date
			Get
				Return Me._GiftDate
			End Get
			Set
				If ((Me._GiftDate = value)  _
							= false) Then
					Me.OnGiftDateChanging(value)
					Me.SendPropertyChanging
					Me._GiftDate = value
					Me.SendPropertyChanged("GiftDate")
					Me.OnGiftDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlobalDonorCode", DbType:="NVarChar(100)")>  _
		Public Property GlobalDonorCode() As String
			Get
				Return Me._GlobalDonorCode
			End Get
			Set
				If (String.Equals(Me._GlobalDonorCode, value) = false) Then
					Me.OnGlobalDonorCodeChanging(value)
					Me.SendPropertyChanging
					Me._GlobalDonorCode = value
					Me.SendPropertyChanged("GlobalDonorCode")
					Me.OnGlobalDonorCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesigId", DbType:="NChar(120)")>  _
		Public Property DesigId() As String
			Get
				Return Me._DesigId
			End Get
			Set
				If (String.Equals(Me._DesigId, value) = false) Then
					Me.OnDesigIdChanging(value)
					Me.SendPropertyChanging
					Me._DesigId = value
					Me.SendPropertyChanged("DesigId")
					Me.OnDesigIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentProcessor", DbType:="NVarChar(50)")>  _
		Public Property PaymentProcessor() As String
			Get
				Return Me._PaymentProcessor
			End Get
			Set
				If (String.Equals(Me._PaymentProcessor, value) = false) Then
					Me.OnPaymentProcessorChanging(value)
					Me.SendPropertyChanging
					Me._PaymentProcessor = value
					Me.SendPropertyChanged("PaymentProcessor")
					Me.OnPaymentProcessorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentProcessorTrxId", DbType:="NVarChar(250)")>  _
		Public Property PaymentProcessorTrxId() As String
			Get
				Return Me._PaymentProcessorTrxId
			End Get
			Set
				If (String.Equals(Me._PaymentProcessorTrxId, value) = false) Then
					Me.OnPaymentProcessorTrxIdChanging(value)
					Me.SendPropertyChanging
					Me._PaymentProcessorTrxId = value
					Me.SendPropertyChanged("PaymentProcessorTrxId")
					Me.OnPaymentProcessorTrxIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", DbType:="BigInt NOT NULL")>  _
		Public Property DonorId() As Long
			Get
				Return Me._DonorId
			End Get
			Set
				If ((Me._DonorId = value)  _
							= false) Then
					If Me._FCX_API_Donor.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDonorIdChanging(value)
					Me.SendPropertyChanging
					Me._DonorId = value
					Me.SendPropertyChanged("DonorId")
					Me.OnDonorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueDonationRef", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueDonationRef() As String
			Get
				Return Me._UniqueDonationRef
			End Get
			Set
				If (String.Equals(Me._UniqueDonationRef, value) = false) Then
					Me.OnUniqueDonationRefChanging(value)
					Me.SendPropertyChanging
					Me._UniqueDonationRef = value
					Me.SendPropertyChanged("UniqueDonationRef")
					Me.OnUniqueDonationRefChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IBAN", DbType:="NVarChar(100)")>  _
		Public Property IBAN() As String
			Get
				Return Me._IBAN
			End Get
			Set
				If (String.Equals(Me._IBAN, value) = false) Then
					Me.OnIBANChanging(value)
					Me.SendPropertyChanging
					Me._IBAN = value
					Me.SendPropertyChanged("IBAN")
					Me.OnIBANChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VCode", DbType:="NVarChar(20)")>  _
		Public Property VCode() As String
			Get
				Return Me._VCode
			End Get
			Set
				If (String.Equals(Me._VCode, value) = false) Then
					Me.OnVCodeChanging(value)
					Me.SendPropertyChanging
					Me._VCode = value
					Me.SendPropertyChanged("VCode")
					Me.OnVCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Donation_FCX_API_Donation_Prop", Storage:="_FCX_API_Donation_Props", ThisKey:="DonationId", OtherKey:="DonationId")>  _
		Public Property FCX_API_Donation_Props() As EntitySet(Of FCX_API_Donation_Prop)
			Get
				Return Me._FCX_API_Donation_Props
			End Get
			Set
				Me._FCX_API_Donation_Props.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_DonBat_FCX_API_Donation", Storage:="_FCX_API_DonBat", ThisKey:="DonationBatId", OtherKey:="DonBatId", IsForeignKey:=true)>  _
		Public Property FCX_API_DonBat() As FCX_API_DonBat
			Get
				Return Me._FCX_API_DonBat.Entity
			End Get
			Set
				Dim previousValue As FCX_API_DonBat = Me._FCX_API_DonBat.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_DonBat.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_DonBat.Entity = Nothing
						previousValue.FCX_API_Donations.Remove(Me)
					End If
					Me._FCX_API_DonBat.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_Donations.Add(Me)
						Me._DonationBatId = value.DonBatId
					Else
						Me._DonationBatId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("FCX_API_DonBat")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FCX_API_Donor_FCX_API_Donation", Storage:="_FCX_API_Donor", ThisKey:="DonorId", OtherKey:="DonorId", IsForeignKey:=true)>  _
		Public Property FCX_API_Donor() As FCX_API_Donor
			Get
				Return Me._FCX_API_Donor.Entity
			End Get
			Set
				Dim previousValue As FCX_API_Donor = Me._FCX_API_Donor.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FCX_API_Donor.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FCX_API_Donor.Entity = Nothing
						previousValue.FCX_API_Donations.Remove(Me)
					End If
					Me._FCX_API_Donor.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FCX_API_Donations.Add(Me)
						Me._DonorId = value.DonorId
					Else
						Me._DonorId = CType(Nothing, Long)
					End If
					Me.SendPropertyChanged("FCX_API_Donor")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FCX_API_Donation_Props(ByVal entity As FCX_API_Donation_Prop)
			Me.SendPropertyChanging
			entity.FCX_API_Donation = Me
		End Sub
		
		Private Sub detach_FCX_API_Donation_Props(ByVal entity As FCX_API_Donation_Prop)
			Me.SendPropertyChanging
			entity.FCX_API_Donation = Nothing
		End Sub
	End Class
End Namespace
