'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Give
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AC-FR")>  _
	Partial Public Class GiveDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
    Partial Private Sub UpdateAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
    Partial Private Sub DeleteAgape_Give_DonationType(instance As Agape_Give_DonationType)
    End Sub
    Partial Private Sub InsertAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    Partial Private Sub UpdateAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    Partial Private Sub DeleteAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Agape_Give_DonationTypes() As System.Data.Linq.Table(Of Agape_Give_DonationType)
			Get
				Return Me.GetTable(Of Agape_Give_DonationType)
			End Get
		End Property
		
		Public ReadOnly Property Agape_Give_BankTransfers() As System.Data.Linq.Table(Of Agape_Give_BankTransfer)
			Get
				Return Me.GetTable(Of Agape_Give_BankTransfer)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Give_DonationType")>  _
	Partial Public Class Agape_Give_DonationType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DonationTypeId As Integer
		
		Private _DonationTypeName As String
		
		Private _DonationTypeNumber As System.Nullable(Of Byte)
		
		Private _Visible As System.Nullable(Of Boolean)
		
		Private _Agape_Give_BankTransfers As EntitySet(Of Agape_Give_BankTransfer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDonationTypeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDonationTypeIdChanged()
    End Sub
    Partial Private Sub OnDonationTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnDonationTypeNameChanged()
    End Sub
    Partial Private Sub OnDonationTypeNumberChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDonationTypeNumberChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Give_BankTransfers = New EntitySet(Of Agape_Give_BankTransfer)(AddressOf Me.attach_Agape_Give_BankTransfers, AddressOf Me.detach_Agape_Give_BankTransfers)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property DonationTypeId() As Integer
			Get
				Return Me._DonationTypeId
			End Get
			Set
				If ((Me._DonationTypeId = value)  _
							= false) Then
					Me.OnDonationTypeIdChanging(value)
					Me.SendPropertyChanging
					Me._DonationTypeId = value
					Me.SendPropertyChanged("DonationTypeId")
					Me.OnDonationTypeIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeName", DbType:="NVarChar(100)")>  _
		Public Property DonationTypeName() As String
			Get
				Return Me._DonationTypeName
			End Get
			Set
				If (String.Equals(Me._DonationTypeName, value) = false) Then
					Me.OnDonationTypeNameChanging(value)
					Me.SendPropertyChanging
					Me._DonationTypeName = value
					Me.SendPropertyChanged("DonationTypeName")
					Me.OnDonationTypeNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationTypeNumber", DbType:="TinyInt")>  _
		Public Property DonationTypeNumber() As System.Nullable(Of Byte)
			Get
				Return Me._DonationTypeNumber
			End Get
			Set
				If (Me._DonationTypeNumber.Equals(value) = false) Then
					Me.OnDonationTypeNumberChanging(value)
					Me.SendPropertyChanging
					Me._DonationTypeNumber = value
					Me.SendPropertyChanged("DonationTypeNumber")
					Me.OnDonationTypeNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit")>  _
		Public Property Visible() As System.Nullable(Of Boolean)
			Get
				Return Me._Visible
			End Get
			Set
				If (Me._Visible.Equals(value) = false) Then
					Me.OnVisibleChanging(value)
					Me.SendPropertyChanging
					Me._Visible = value
					Me.SendPropertyChanged("Visible")
					Me.OnVisibleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Give_DonationType_Agape_Give_BankTransfer", Storage:="_Agape_Give_BankTransfers", ThisKey:="DonationTypeNumber", OtherKey:="DonationType")>  _
		Public Property Agape_Give_BankTransfers() As EntitySet(Of Agape_Give_BankTransfer)
			Get
				Return Me._Agape_Give_BankTransfers
			End Get
			Set
				Me._Agape_Give_BankTransfers.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Agape_Give_BankTransfers(ByVal entity As Agape_Give_BankTransfer)
			Me.SendPropertyChanging
			entity.Agape_Give_DonationType = Me
		End Sub
		
		Private Sub detach_Agape_Give_BankTransfers(ByVal entity As Agape_Give_BankTransfer)
			Me.SendPropertyChanging
			entity.Agape_Give_DonationType = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Give_BankTransfer")>  _
	Partial Public Class Agape_Give_BankTransfer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _VirId As Integer
		
		Private _DonorId As System.Nullable(Of Integer)
		
		Private _BankName As String
		
		Private _BankStreet1 As String
		
		Private _BankStreet2 As String
		
		Private _BankPostal As String
		
		Private _acNo As String
		
		Private _Frequency As System.Nullable(Of Short)
		
		Private _StartDate As System.Nullable(Of Date)
		
		Private _Amount As System.Nullable(Of Short)
		
		Private _BankCity As String
		
		Private _GiveMessage As String
		
		Private _Reference As String
		
		Private _Status As System.Nullable(Of Byte)
		
		Private _DonationType As System.Nullable(Of Byte)
		
		Private _TypeId As System.Nullable(Of Integer)
		
		Private _SetupDate As System.Nullable(Of Date)
		
		Private _GiveMethod As System.Nullable(Of Byte)
		
		Private _BankCountry As String
		
		Private _Agape_Give_DonationType As EntityRef(Of Agape_Give_DonationType)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVirIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVirIdChanged()
    End Sub
    Partial Private Sub OnDonorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDonorIdChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnBankStreet1Changing(value As String)
    End Sub
    Partial Private Sub OnBankStreet1Changed()
    End Sub
    Partial Private Sub OnBankStreet2Changing(value As String)
    End Sub
    Partial Private Sub OnBankStreet2Changed()
    End Sub
    Partial Private Sub OnBankPostalChanging(value As String)
    End Sub
    Partial Private Sub OnBankPostalChanged()
    End Sub
    Partial Private Sub OnacNoChanging(value As String)
    End Sub
    Partial Private Sub OnacNoChanged()
    End Sub
    Partial Private Sub OnFrequencyChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFrequencyChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnBankCityChanging(value As String)
    End Sub
    Partial Private Sub OnBankCityChanged()
    End Sub
    Partial Private Sub OnGiveMessageChanging(value As String)
    End Sub
    Partial Private Sub OnGiveMessageChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnDonationTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDonationTypeChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnSetupDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSetupDateChanged()
    End Sub
    Partial Private Sub OnGiveMethodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnGiveMethodChanged()
    End Sub
    Partial Private Sub OnBankCountryChanging(value As String)
    End Sub
    Partial Private Sub OnBankCountryChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Agape_Give_DonationType = CType(Nothing, EntityRef(Of Agape_Give_DonationType))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property VirId() As Integer
			Get
				Return Me._VirId
			End Get
			Set
				If ((Me._VirId = value)  _
							= false) Then
					Me.OnVirIdChanging(value)
					Me.SendPropertyChanging
					Me._VirId = value
					Me.SendPropertyChanged("VirId")
					Me.OnVirIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", DbType:="Int")>  _
		Public Property DonorId() As System.Nullable(Of Integer)
			Get
				Return Me._DonorId
			End Get
			Set
				If (Me._DonorId.Equals(value) = false) Then
					Me.OnDonorIdChanging(value)
					Me.SendPropertyChanging
					Me._DonorId = value
					Me.SendPropertyChanged("DonorId")
					Me.OnDonorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="NVarChar(300)")>  _
		Public Property BankName() As String
			Get
				Return Me._BankName
			End Get
			Set
				If (String.Equals(Me._BankName, value) = false) Then
					Me.OnBankNameChanging(value)
					Me.SendPropertyChanging
					Me._BankName = value
					Me.SendPropertyChanged("BankName")
					Me.OnBankNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankStreet1", DbType:="NVarChar(200)")>  _
		Public Property BankStreet1() As String
			Get
				Return Me._BankStreet1
			End Get
			Set
				If (String.Equals(Me._BankStreet1, value) = false) Then
					Me.OnBankStreet1Changing(value)
					Me.SendPropertyChanging
					Me._BankStreet1 = value
					Me.SendPropertyChanged("BankStreet1")
					Me.OnBankStreet1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankStreet2", DbType:="NVarChar(200)")>  _
		Public Property BankStreet2() As String
			Get
				Return Me._BankStreet2
			End Get
			Set
				If (String.Equals(Me._BankStreet2, value) = false) Then
					Me.OnBankStreet2Changing(value)
					Me.SendPropertyChanging
					Me._BankStreet2 = value
					Me.SendPropertyChanged("BankStreet2")
					Me.OnBankStreet2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankPostal", DbType:="NVarChar(10)")>  _
		Public Property BankPostal() As String
			Get
				Return Me._BankPostal
			End Get
			Set
				If (String.Equals(Me._BankPostal, value) = false) Then
					Me.OnBankPostalChanging(value)
					Me.SendPropertyChanging
					Me._BankPostal = value
					Me.SendPropertyChanged("BankPostal")
					Me.OnBankPostalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acNo", DbType:="NVarChar(100)")>  _
		Public Property acNo() As String
			Get
				Return Me._acNo
			End Get
			Set
				If (String.Equals(Me._acNo, value) = false) Then
					Me.OnacNoChanging(value)
					Me.SendPropertyChanging
					Me._acNo = value
					Me.SendPropertyChanged("acNo")
					Me.OnacNoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="SmallInt")>  _
		Public Property Frequency() As System.Nullable(Of Short)
			Get
				Return Me._Frequency
			End Get
			Set
				If (Me._Frequency.Equals(value) = false) Then
					Me.OnFrequencyChanging(value)
					Me.SendPropertyChanging
					Me._Frequency = value
					Me.SendPropertyChanged("Frequency")
					Me.OnFrequencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
		Public Property StartDate() As System.Nullable(Of Date)
			Get
				Return Me._StartDate
			End Get
			Set
				If (Me._StartDate.Equals(value) = false) Then
					Me.OnStartDateChanging(value)
					Me.SendPropertyChanging
					Me._StartDate = value
					Me.SendPropertyChanged("StartDate")
					Me.OnStartDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="SmallInt")>  _
		Public Property Amount() As System.Nullable(Of Short)
			Get
				Return Me._Amount
			End Get
			Set
				If (Me._Amount.Equals(value) = false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankCity", DbType:="NVarChar(200)")>  _
		Public Property BankCity() As String
			Get
				Return Me._BankCity
			End Get
			Set
				If (String.Equals(Me._BankCity, value) = false) Then
					Me.OnBankCityChanging(value)
					Me.SendPropertyChanging
					Me._BankCity = value
					Me.SendPropertyChanged("BankCity")
					Me.OnBankCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMessage", DbType:="NVarChar(MAX)")>  _
		Public Property GiveMessage() As String
			Get
				Return Me._GiveMessage
			End Get
			Set
				If (String.Equals(Me._GiveMessage, value) = false) Then
					Me.OnGiveMessageChanging(value)
					Me.SendPropertyChanging
					Me._GiveMessage = value
					Me.SendPropertyChanged("GiveMessage")
					Me.OnGiveMessageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
		Public Property Reference() As String
			Get
				Return Me._Reference
			End Get
			Set
				If (String.Equals(Me._Reference, value) = false) Then
					Me.OnReferenceChanging(value)
					Me.SendPropertyChanging
					Me._Reference = value
					Me.SendPropertyChanged("Reference")
					Me.OnReferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt")>  _
		Public Property Status() As System.Nullable(Of Byte)
			Get
				Return Me._Status
			End Get
			Set
				If (Me._Status.Equals(value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationType", DbType:="TinyInt")>  _
		Public Property DonationType() As System.Nullable(Of Byte)
			Get
				Return Me._DonationType
			End Get
			Set
				If (Me._DonationType.Equals(value) = false) Then
					If Me._Agape_Give_DonationType.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnDonationTypeChanging(value)
					Me.SendPropertyChanging
					Me._DonationType = value
					Me.SendPropertyChanged("DonationType")
					Me.OnDonationTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
		Public Property TypeId() As System.Nullable(Of Integer)
			Get
				Return Me._TypeId
			End Get
			Set
				If (Me._TypeId.Equals(value) = false) Then
					Me.OnTypeIdChanging(value)
					Me.SendPropertyChanging
					Me._TypeId = value
					Me.SendPropertyChanged("TypeId")
					Me.OnTypeIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SetupDate", DbType:="DateTime")>  _
		Public Property SetupDate() As System.Nullable(Of Date)
			Get
				Return Me._SetupDate
			End Get
			Set
				If (Me._SetupDate.Equals(value) = false) Then
					Me.OnSetupDateChanging(value)
					Me.SendPropertyChanging
					Me._SetupDate = value
					Me.SendPropertyChanged("SetupDate")
					Me.OnSetupDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMethod", DbType:="TinyInt")>  _
		Public Property GiveMethod() As System.Nullable(Of Byte)
			Get
				Return Me._GiveMethod
			End Get
			Set
				If (Me._GiveMethod.Equals(value) = false) Then
					Me.OnGiveMethodChanging(value)
					Me.SendPropertyChanging
					Me._GiveMethod = value
					Me.SendPropertyChanged("GiveMethod")
					Me.OnGiveMethodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankCountry", DbType:="NVarChar(200)")>  _
		Public Property BankCountry() As String
			Get
				Return Me._BankCountry
			End Get
			Set
				If (String.Equals(Me._BankCountry, value) = false) Then
					Me.OnBankCountryChanging(value)
					Me.SendPropertyChanging
					Me._BankCountry = value
					Me.SendPropertyChanged("BankCountry")
					Me.OnBankCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agape_Give_DonationType_Agape_Give_BankTransfer", Storage:="_Agape_Give_DonationType", ThisKey:="DonationType", OtherKey:="DonationTypeNumber", IsForeignKey:=true)>  _
		Public Property Agape_Give_DonationType() As Agape_Give_DonationType
			Get
				Return Me._Agape_Give_DonationType.Entity
			End Get
			Set
				Dim previousValue As Agape_Give_DonationType = Me._Agape_Give_DonationType.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Agape_Give_DonationType.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Agape_Give_DonationType.Entity = Nothing
						previousValue.Agape_Give_BankTransfers.Remove(Me)
					End If
					Me._Agape_Give_DonationType.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Agape_Give_BankTransfers.Add(Me)
						Me._DonationType = value.DonationTypeNumber
					Else
						Me._DonationType = CType(Nothing, Nullable(Of Byte))
					End If
					Me.SendPropertyChanged("Agape_Give_DonationType")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
