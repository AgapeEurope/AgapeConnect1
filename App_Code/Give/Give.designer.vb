'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Give
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AgapeConnect")>  _
	Partial Public Class GiveDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    Partial Private Sub UpdateAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    Partial Private Sub DeleteAgape_Give_BankTransfer(instance As Agape_Give_BankTransfer)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SiteSqlServer").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Agape_Give_BankTransfers() As System.Data.Linq.Table(Of Agape_Give_BankTransfer)
			Get
				Return Me.GetTable(Of Agape_Give_BankTransfer)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agape_Give_BankTransfer")>  _
	Partial Public Class Agape_Give_BankTransfer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _VirId As Integer
		
		Private _DonorId As System.Nullable(Of Integer)
		
		Private _acNo As String
		
		Private _Frequency As System.Nullable(Of Short)
		
		Private _StartDate As System.Nullable(Of Date)
		
		Private _Amount As System.Nullable(Of Short)
		
		Private _GiveMessage As String
		
		Private _Reference As String
		
		Private _Status As System.Nullable(Of Byte)
		
		Private _DonationType As System.Nullable(Of Byte)
		
		Private _TypeId As System.Nullable(Of Integer)
		
		Private _SetupDate As System.Nullable(Of Date)
		
		Private _GiveMethod As System.Nullable(Of Byte)
		
		Private _PortalID As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVirIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVirIdChanged()
    End Sub
    Partial Private Sub OnDonorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDonorIdChanged()
    End Sub
    Partial Private Sub OnacNoChanging(value As String)
    End Sub
    Partial Private Sub OnacNoChanged()
    End Sub
    Partial Private Sub OnFrequencyChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnFrequencyChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnGiveMessageChanging(value As String)
    End Sub
    Partial Private Sub OnGiveMessageChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnDonationTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnDonationTypeChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnSetupDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSetupDateChanged()
    End Sub
    Partial Private Sub OnGiveMethodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnGiveMethodChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property VirId() As Integer
			Get
				Return Me._VirId
			End Get
			Set
				If ((Me._VirId = value)  _
							= false) Then
					Me.OnVirIdChanging(value)
					Me.SendPropertyChanging
					Me._VirId = value
					Me.SendPropertyChanged("VirId")
					Me.OnVirIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonorId", DbType:="Int")>  _
		Public Property DonorId() As System.Nullable(Of Integer)
			Get
				Return Me._DonorId
			End Get
			Set
				If (Me._DonorId.Equals(value) = false) Then
					Me.OnDonorIdChanging(value)
					Me.SendPropertyChanging
					Me._DonorId = value
					Me.SendPropertyChanged("DonorId")
					Me.OnDonorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acNo", DbType:="NVarChar(100)")>  _
		Public Property acNo() As String
			Get
				Return Me._acNo
			End Get
			Set
				If (String.Equals(Me._acNo, value) = false) Then
					Me.OnacNoChanging(value)
					Me.SendPropertyChanging
					Me._acNo = value
					Me.SendPropertyChanged("acNo")
					Me.OnacNoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="SmallInt")>  _
		Public Property Frequency() As System.Nullable(Of Short)
			Get
				Return Me._Frequency
			End Get
			Set
				If (Me._Frequency.Equals(value) = false) Then
					Me.OnFrequencyChanging(value)
					Me.SendPropertyChanging
					Me._Frequency = value
					Me.SendPropertyChanged("Frequency")
					Me.OnFrequencyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
		Public Property StartDate() As System.Nullable(Of Date)
			Get
				Return Me._StartDate
			End Get
			Set
				If (Me._StartDate.Equals(value) = false) Then
					Me.OnStartDateChanging(value)
					Me.SendPropertyChanging
					Me._StartDate = value
					Me.SendPropertyChanged("StartDate")
					Me.OnStartDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="SmallInt")>  _
		Public Property Amount() As System.Nullable(Of Short)
			Get
				Return Me._Amount
			End Get
			Set
				If (Me._Amount.Equals(value) = false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMessage", DbType:="NVarChar(MAX)")>  _
		Public Property GiveMessage() As String
			Get
				Return Me._GiveMessage
			End Get
			Set
				If (String.Equals(Me._GiveMessage, value) = false) Then
					Me.OnGiveMessageChanging(value)
					Me.SendPropertyChanging
					Me._GiveMessage = value
					Me.SendPropertyChanged("GiveMessage")
					Me.OnGiveMessageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
		Public Property Reference() As String
			Get
				Return Me._Reference
			End Get
			Set
				If (String.Equals(Me._Reference, value) = false) Then
					Me.OnReferenceChanging(value)
					Me.SendPropertyChanging
					Me._Reference = value
					Me.SendPropertyChanged("Reference")
					Me.OnReferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt")>  _
		Public Property Status() As System.Nullable(Of Byte)
			Get
				Return Me._Status
			End Get
			Set
				If (Me._Status.Equals(value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonationType", DbType:="TinyInt")>  _
		Public Property DonationType() As System.Nullable(Of Byte)
			Get
				Return Me._DonationType
			End Get
			Set
				If (Me._DonationType.Equals(value) = false) Then
					Me.OnDonationTypeChanging(value)
					Me.SendPropertyChanging
					Me._DonationType = value
					Me.SendPropertyChanged("DonationType")
					Me.OnDonationTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
		Public Property TypeId() As System.Nullable(Of Integer)
			Get
				Return Me._TypeId
			End Get
			Set
				If (Me._TypeId.Equals(value) = false) Then
					Me.OnTypeIdChanging(value)
					Me.SendPropertyChanging
					Me._TypeId = value
					Me.SendPropertyChanged("TypeId")
					Me.OnTypeIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SetupDate", DbType:="DateTime")>  _
		Public Property SetupDate() As System.Nullable(Of Date)
			Get
				Return Me._SetupDate
			End Get
			Set
				If (Me._SetupDate.Equals(value) = false) Then
					Me.OnSetupDateChanging(value)
					Me.SendPropertyChanging
					Me._SetupDate = value
					Me.SendPropertyChanged("SetupDate")
					Me.OnSetupDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GiveMethod", DbType:="TinyInt")>  _
		Public Property GiveMethod() As System.Nullable(Of Byte)
			Get
				Return Me._GiveMethod
			End Get
			Set
				If (Me._GiveMethod.Equals(value) = false) Then
					Me.OnGiveMethodChanging(value)
					Me.SendPropertyChanging
					Me._GiveMethod = value
					Me.SendPropertyChanged("GiveMethod")
					Me.OnGiveMethodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int")>  _
		Public Property PortalID() As System.Nullable(Of Integer)
			Get
				Return Me._PortalID
			End Get
			Set
				If (Me._PortalID.Equals(value) = false) Then
					Me.OnPortalIDChanging(value)
					Me.SendPropertyChanging
					Me._PortalID = value
					Me.SendPropertyChanged("PortalID")
					Me.OnPortalIDChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
